Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    PRINT
    STRING
    VAL_STRING

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main
Rule 2     np_program_start -> epsilon
Rule 3     np_start_dirfunc -> epsilon
Rule 4     main -> MAIN np_prep_main ( ) { loop_estatuto } np_fin_total
Rule 5     np_prep_main -> epsilon
Rule 6     np_fin_total -> epsilon
Rule 7     var_opcional -> var_declaracion
Rule 8     var_opcional -> epsilon
Rule 9     variable -> ID np_single_var_process
Rule 10    var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion
Rule 11    np_var_prep -> epsilon
Rule 12    loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion
Rule 13    loop_var_declaracion -> epsilon
Rule 14    var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ;
Rule 15    array_opcional -> [ VAL_INT np_push_const_int ]
Rule 16    array_opcional -> epsilon
Rule 17    loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo
Rule 18    loop_var_decl_mismo_tipo -> epsilon
Rule 19    np_set_curr_var_type -> epsilon
Rule 20    np_set_curr_var_name -> epsilon
Rule 21    np_add_var_to_varstable -> epsilon
Rule 22    func_programa_loop -> func_definicion func_programa_loop
Rule 23    func_programa_loop -> epsilon
Rule 24    func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
Rule 25    func_tipo_retorno -> tipo
Rule 26    func_tipo_retorno -> VOID
Rule 27    np_func_tipo_retorno -> epsilon
Rule 28    np_func_id -> epsilon
Rule 29    np_add_to_func_dir -> epsilon
Rule 30    np_save_curr_func_quad -> epsilon
Rule 31    np_kill_func -> epsilon
Rule 32    np_prep_func_params -> epsilon
Rule 33    func_parametro -> parametro
Rule 34    func_parametro -> epsilon
Rule 35    parametro -> tipo ID np_add_param loop_parametro
Rule 36    loop_parametro -> , tipo ID np_add_param loop_parametro
Rule 37    loop_parametro -> epsilon
Rule 38    np_add_param -> epsilon
Rule 39    tipo -> INT
Rule 40    tipo -> FLOAT
Rule 41    tipo -> CHAR
Rule 42    tipo -> BOOL
Rule 43    estatuto -> asignacion
Rule 44    estatuto -> func_llamada ;
Rule 45    estatuto -> read
Rule 46    estatuto -> write
Rule 47    estatuto -> decision
Rule 48    estatuto -> repeticion
Rule 49    estatuto -> func_return
Rule 50    asignacion -> variable = hyper_exp ;
Rule 51    func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
Rule 52    np_fc_1 -> epsilon
Rule 53    argumento_loop -> hyper_exp np_fc_2 argumento_loop_1
Rule 54    argumento_loop -> epsilon
Rule 55    argumento_loop_1 -> , hyper_exp np_fc_2 argumento_loop_1
Rule 56    argumento_loop_1 -> epsilon
Rule 57    hyper_exp_loop -> hyper_exp np_add_to_input_counter hyper_exp_loop_1
Rule 58    hyper_exp_loop_1 -> , hyper_exp np_add_to_input_counter hyper_exp_loop_1
Rule 59    hyper_exp_loop_1 -> epsilon
Rule 60    np_fc_2 -> epsilon
Rule 61    func_return -> RETURN ( hyper_exp ) ;
Rule 62    read -> READ ( variable_loop ) ;
Rule 63    variable_loop -> variable np_add_to_input_counter variable_loop_1
Rule 64    variable_loop_1 -> , variable np_add_to_input_counter variable_loop_1
Rule 65    variable_loop_1 -> epsilon
Rule 66    np_add_to_input_counter -> epsilon
Rule 67    write -> WRITE ( hyper_exp_loop ) ;
Rule 68    decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
Rule 69    decision_else -> ELSE np_decision_2 { loop_estatuto }
Rule 70    decision_else -> epsilon
Rule 71    np_decision_1 -> epsilon
Rule 72    np_decision_2 -> epsilon
Rule 73    loop_estatuto -> estatuto loop_estatuto
Rule 74    loop_estatuto -> epsilon
Rule 75    repeticion -> condicional
Rule 76    repeticion -> no_condicional
Rule 77    condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
Rule 78    np_cond_1 -> epsilon
Rule 79    np_cond_2 -> epsilon
Rule 80    np_cond_3 -> epsilon
Rule 81    no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }
Rule 82    np_for_1 -> epsilon
Rule 83    np_for_2 -> epsilon
Rule 84    np_for_3 -> epsilon
Rule 85    hyper_exp -> super_exp hyper_exp_1
Rule 86    hyper_exp_1 -> & np_push_operator_stack super_exp
Rule 87    hyper_exp_1 -> | np_push_operator_stack super_exp
Rule 88    hyper_exp_1 -> epsilon
Rule 89    super_exp -> exp super_exp_1
Rule 90    super_exp_1 -> < np_push_operator_stack exp
Rule 91    super_exp_1 -> > np_push_operator_stack exp
Rule 92    super_exp_1 -> EQUAL_TO np_push_operator_stack exp
Rule 93    super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp
Rule 94    super_exp_1 -> epsilon
Rule 95    exp -> term exp_1
Rule 96    exp_1 -> + np_push_operator_stack term
Rule 97    exp_1 -> - np_push_operator_stack term
Rule 98    exp_1 -> epsilon
Rule 99    term -> factor term_1
Rule 100   term_1 -> * np_push_operator_stack factor
Rule 101   term_1 -> / np_push_operator_stack factor
Rule 102   term_1 -> epsilon
Rule 103   np_push_operator_stack -> epsilon
Rule 104   np_pop_operator_stack -> epsilon
Rule 105   factor -> constant
Rule 106   factor -> variable
Rule 107   factor -> ( hyper_exp )
Rule 108   factor -> func_llamada
Rule 109   constant -> VAL_INT np_push_const_int
Rule 110   constant -> VAL_FLOAT np_push_const_float
Rule 111   constant -> VAL_CHAR np_push_const_char
Rule 112   np_push_const_int -> epsilon
Rule 113   np_push_const_float -> epsilon
Rule 114   np_push_const_char -> epsilon
Rule 115   np_single_var_process -> epsilon
Rule 116   epsilon -> <empty>

Terminals, with rules where they appear

&                    : 86
(                    : 4 24 51 61 62 67 68 77 107
)                    : 4 24 51 61 62 67 68 77 107
*                    : 100
+                    : 96
,                    : 17 36 55 58 64
-                    : 97
/                    : 101
;                    : 1 14 24 44 50 61 62 67
<                    : 90
=                    : 50 81
>                    : 91
BOOL                 : 42
CHAR                 : 41
DO                   : 77 81
ELSE                 : 69
EQUAL_TO             : 92
FLOAT                : 40
FOR                  : 81
FUNCTION             : 24
ID                   : 1 9 14 17 24 35 36 51
IF                   : 68
INT                  : 39
MAIN                 : 4
NOT_EQUAL_TO         : 93
PRINT                : 
PROGRAM              : 1
READ                 : 62
RETURN               : 61
STRING               : 
THEN                 : 68
TO                   : 81
VAL_CHAR             : 111
VAL_FLOAT            : 110
VAL_INT              : 15 109
VAL_STRING           : 
VARS                 : 10
VOID                 : 26
WHILE                : 77
WRITE                : 67
[                    : 15
]                    : 15
error                : 
{                    : 4 24 68 69 77 81
|                    : 87
}                    : 4 24 68 69 77 81

Nonterminals, with rules where they appear

argumento_loop       : 51
argumento_loop_1     : 53 55
array_opcional       : 14 17
asignacion           : 43
condicional          : 75
constant             : 105
decision             : 47
decision_else        : 68
epsilon              : 2 3 5 6 8 11 13 16 18 19 20 21 23 27 28 29 30 31 32 34 37 38 52 54 56 59 60 65 66 70 71 72 74 78 79 80 82 83 84 88 94 98 102 103 104 112 113 114 115
estatuto             : 73
exp                  : 89 90 91 92 93
exp_1                : 95
factor               : 99 100 101
func_definicion      : 22
func_llamada         : 44 108
func_parametro       : 24
func_programa_loop   : 1 22
func_return          : 49
func_tipo_retorno    : 24
hyper_exp            : 50 53 55 57 58 61 68 77 81 81 107
hyper_exp_1          : 85
hyper_exp_loop       : 67
hyper_exp_loop_1     : 57 58
loop_estatuto        : 4 24 68 69 73 77 81
loop_parametro       : 35 36
loop_var_decl_mismo_tipo : 14 17
loop_var_declaracion : 10 12
main                 : 1
no_condicional       : 76
np_add_param         : 35 36
np_add_to_func_dir   : 24
np_add_to_input_counter : 57 58 63 64
np_add_var_to_varstable : 14 17
np_cond_1            : 77
np_cond_2            : 77
np_cond_3            : 77
np_decision_1        : 68
np_decision_2        : 69
np_fc_1              : 51
np_fc_2              : 53 55
np_fin_total         : 4
np_for_1             : 81
np_for_2             : 81
np_for_3             : 81
np_func_id           : 24
np_func_tipo_retorno : 24
np_kill_func         : 24
np_pop_operator_stack : 51
np_prep_func_params  : 24
np_prep_main         : 4
np_program_start     : 1
np_push_const_char   : 111
np_push_const_float  : 110
np_push_const_int    : 15 109
np_push_operator_stack : 51 86 87 90 91 92 93 96 97 100 101
np_save_curr_func_quad : 24
np_set_curr_var_name : 14 17
np_set_curr_var_type : 14
np_single_var_process : 9
np_start_dirfunc     : 1
np_var_prep          : 10
parametro            : 33
programa             : 0
read                 : 45
repeticion           : 48
super_exp            : 85 86 87
super_exp_1          : 89
term                 : 95 96 97
term_1               : 99
tipo                 : 14 25 35 36
var_declaracion      : 7
var_declaracion_mismo_tipo : 10 12
var_opcional         : 1 24
variable             : 50 63 64 81 106
variable_loop        : 62
variable_loop_1      : 63 64
write                : 46

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main
    (2) np_program_start -> . epsilon
    (116) epsilon -> .

    ID              reduce using rule 116 (epsilon -> .)

    np_program_start               shift and go to state 3
    epsilon                        shift and go to state 4

state 3

    (1) programa -> PROGRAM np_program_start . ID np_start_dirfunc ; var_opcional func_programa_loop main

    ID              shift and go to state 5


state 4

    (2) np_program_start -> epsilon .

    ID              reduce using rule 2 (np_program_start -> epsilon .)


state 5

    (1) programa -> PROGRAM np_program_start ID . np_start_dirfunc ; var_opcional func_programa_loop main
    (3) np_start_dirfunc -> . epsilon
    (116) epsilon -> .

    ;               reduce using rule 116 (epsilon -> .)

    np_start_dirfunc               shift and go to state 6
    epsilon                        shift and go to state 7

state 6

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc . ; var_opcional func_programa_loop main

    ;               shift and go to state 8


state 7

    (3) np_start_dirfunc -> epsilon .

    ;               reduce using rule 3 (np_start_dirfunc -> epsilon .)


state 8

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc ; . var_opcional func_programa_loop main
    (7) var_opcional -> . var_declaracion
    (8) var_opcional -> . epsilon
    (10) var_declaracion -> . VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion
    (116) epsilon -> .

    VARS            shift and go to state 12
    FUNCTION        reduce using rule 116 (epsilon -> .)
    MAIN            reduce using rule 116 (epsilon -> .)

    var_opcional                   shift and go to state 9
    var_declaracion                shift and go to state 10
    epsilon                        shift and go to state 11

state 9

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional . func_programa_loop main
    (22) func_programa_loop -> . func_definicion func_programa_loop
    (23) func_programa_loop -> . epsilon
    (24) func_definicion -> . FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (116) epsilon -> .

    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 116 (epsilon -> .)

    func_programa_loop             shift and go to state 13
    func_definicion                shift and go to state 14
    epsilon                        shift and go to state 15

state 10

    (7) var_opcional -> var_declaracion .

    FUNCTION        reduce using rule 7 (var_opcional -> var_declaracion .)
    MAIN            reduce using rule 7 (var_opcional -> var_declaracion .)
    {               reduce using rule 7 (var_opcional -> var_declaracion .)


state 11

    (8) var_opcional -> epsilon .

    FUNCTION        reduce using rule 8 (var_opcional -> epsilon .)
    MAIN            reduce using rule 8 (var_opcional -> epsilon .)
    {               reduce using rule 8 (var_opcional -> epsilon .)


state 12

    (10) var_declaracion -> VARS . np_var_prep var_declaracion_mismo_tipo loop_var_declaracion
    (11) np_var_prep -> . epsilon
    (116) epsilon -> .

    INT             reduce using rule 116 (epsilon -> .)
    FLOAT           reduce using rule 116 (epsilon -> .)
    CHAR            reduce using rule 116 (epsilon -> .)
    BOOL            reduce using rule 116 (epsilon -> .)

    np_var_prep                    shift and go to state 17
    epsilon                        shift and go to state 18

state 13

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop . main
    (4) main -> . MAIN np_prep_main ( ) { loop_estatuto } np_fin_total

    MAIN            shift and go to state 20

    main                           shift and go to state 19

state 14

    (22) func_programa_loop -> func_definicion . func_programa_loop
    (22) func_programa_loop -> . func_definicion func_programa_loop
    (23) func_programa_loop -> . epsilon
    (24) func_definicion -> . FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (116) epsilon -> .

    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 116 (epsilon -> .)

    func_definicion                shift and go to state 14
    func_programa_loop             shift and go to state 21
    epsilon                        shift and go to state 15

state 15

    (23) func_programa_loop -> epsilon .

    MAIN            reduce using rule 23 (func_programa_loop -> epsilon .)


state 16

    (24) func_definicion -> FUNCTION . func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (25) func_tipo_retorno -> . tipo
    (26) func_tipo_retorno -> . VOID
    (39) tipo -> . INT
    (40) tipo -> . FLOAT
    (41) tipo -> . CHAR
    (42) tipo -> . BOOL

    VOID            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOL            shift and go to state 28

    func_tipo_retorno              shift and go to state 22
    tipo                           shift and go to state 23

state 17

    (10) var_declaracion -> VARS np_var_prep . var_declaracion_mismo_tipo loop_var_declaracion
    (14) var_declaracion_mismo_tipo -> . tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (39) tipo -> . INT
    (40) tipo -> . FLOAT
    (41) tipo -> . CHAR
    (42) tipo -> . BOOL

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOL            shift and go to state 28

    var_declaracion_mismo_tipo     shift and go to state 29
    tipo                           shift and go to state 30

state 18

    (11) np_var_prep -> epsilon .

    INT             reduce using rule 11 (np_var_prep -> epsilon .)
    FLOAT           reduce using rule 11 (np_var_prep -> epsilon .)
    CHAR            reduce using rule 11 (np_var_prep -> epsilon .)
    BOOL            reduce using rule 11 (np_var_prep -> epsilon .)


state 19

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main .

    $end            reduce using rule 1 (programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main .)


state 20

    (4) main -> MAIN . np_prep_main ( ) { loop_estatuto } np_fin_total
    (5) np_prep_main -> . epsilon
    (116) epsilon -> .

    (               reduce using rule 116 (epsilon -> .)

    np_prep_main                   shift and go to state 31
    epsilon                        shift and go to state 32

state 21

    (22) func_programa_loop -> func_definicion func_programa_loop .

    MAIN            reduce using rule 22 (func_programa_loop -> func_definicion func_programa_loop .)


state 22

    (24) func_definicion -> FUNCTION func_tipo_retorno . np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (27) np_func_tipo_retorno -> . epsilon
    (116) epsilon -> .

    ID              reduce using rule 116 (epsilon -> .)

    np_func_tipo_retorno           shift and go to state 33
    epsilon                        shift and go to state 34

state 23

    (25) func_tipo_retorno -> tipo .

    ID              reduce using rule 25 (func_tipo_retorno -> tipo .)


state 24

    (26) func_tipo_retorno -> VOID .

    ID              reduce using rule 26 (func_tipo_retorno -> VOID .)


state 25

    (39) tipo -> INT .

    ID              reduce using rule 39 (tipo -> INT .)


state 26

    (40) tipo -> FLOAT .

    ID              reduce using rule 40 (tipo -> FLOAT .)


state 27

    (41) tipo -> CHAR .

    ID              reduce using rule 41 (tipo -> CHAR .)


state 28

    (42) tipo -> BOOL .

    ID              reduce using rule 42 (tipo -> BOOL .)


state 29

    (10) var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo . loop_var_declaracion
    (12) loop_var_declaracion -> . var_declaracion_mismo_tipo loop_var_declaracion
    (13) loop_var_declaracion -> . epsilon
    (14) var_declaracion_mismo_tipo -> . tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (116) epsilon -> .
    (39) tipo -> . INT
    (40) tipo -> . FLOAT
    (41) tipo -> . CHAR
    (42) tipo -> . BOOL

    FUNCTION        reduce using rule 116 (epsilon -> .)
    MAIN            reduce using rule 116 (epsilon -> .)
    {               reduce using rule 116 (epsilon -> .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOL            shift and go to state 28

    var_declaracion_mismo_tipo     shift and go to state 35
    loop_var_declaracion           shift and go to state 36
    epsilon                        shift and go to state 37
    tipo                           shift and go to state 30

state 30

    (14) var_declaracion_mismo_tipo -> tipo . np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (19) np_set_curr_var_type -> . epsilon
    (116) epsilon -> .

    ID              reduce using rule 116 (epsilon -> .)

    np_set_curr_var_type           shift and go to state 38
    epsilon                        shift and go to state 39

state 31

    (4) main -> MAIN np_prep_main . ( ) { loop_estatuto } np_fin_total

    (               shift and go to state 40


state 32

    (5) np_prep_main -> epsilon .

    (               reduce using rule 5 (np_prep_main -> epsilon .)


state 33

    (24) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno . ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func

    ID              shift and go to state 41


state 34

    (27) np_func_tipo_retorno -> epsilon .

    ID              reduce using rule 27 (np_func_tipo_retorno -> epsilon .)


state 35

    (12) loop_var_declaracion -> var_declaracion_mismo_tipo . loop_var_declaracion
    (12) loop_var_declaracion -> . var_declaracion_mismo_tipo loop_var_declaracion
    (13) loop_var_declaracion -> . epsilon
    (14) var_declaracion_mismo_tipo -> . tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (116) epsilon -> .
    (39) tipo -> . INT
    (40) tipo -> . FLOAT
    (41) tipo -> . CHAR
    (42) tipo -> . BOOL

    FUNCTION        reduce using rule 116 (epsilon -> .)
    MAIN            reduce using rule 116 (epsilon -> .)
    {               reduce using rule 116 (epsilon -> .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOL            shift and go to state 28

    var_declaracion_mismo_tipo     shift and go to state 35
    loop_var_declaracion           shift and go to state 42
    epsilon                        shift and go to state 37
    tipo                           shift and go to state 30

state 36

    (10) var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion .

    FUNCTION        reduce using rule 10 (var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion .)
    MAIN            reduce using rule 10 (var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion .)
    {               reduce using rule 10 (var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion .)


state 37

    (13) loop_var_declaracion -> epsilon .

    FUNCTION        reduce using rule 13 (loop_var_declaracion -> epsilon .)
    MAIN            reduce using rule 13 (loop_var_declaracion -> epsilon .)
    {               reduce using rule 13 (loop_var_declaracion -> epsilon .)


state 38

    (14) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type . ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ;

    ID              shift and go to state 43


state 39

    (19) np_set_curr_var_type -> epsilon .

    ID              reduce using rule 19 (np_set_curr_var_type -> epsilon .)


state 40

    (4) main -> MAIN np_prep_main ( . ) { loop_estatuto } np_fin_total

    )               shift and go to state 44


state 41

    (24) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID . np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (28) np_func_id -> . epsilon
    (116) epsilon -> .

    (               reduce using rule 116 (epsilon -> .)

    np_func_id                     shift and go to state 45
    epsilon                        shift and go to state 46

state 42

    (12) loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion .

    FUNCTION        reduce using rule 12 (loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion .)
    MAIN            reduce using rule 12 (loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion .)
    {               reduce using rule 12 (loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion .)


state 43

    (14) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID . np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (20) np_set_curr_var_name -> . epsilon
    (116) epsilon -> .

    [               reduce using rule 116 (epsilon -> .)
    ,               reduce using rule 116 (epsilon -> .)
    ;               reduce using rule 116 (epsilon -> .)

    np_set_curr_var_name           shift and go to state 47
    epsilon                        shift and go to state 48

state 44

    (4) main -> MAIN np_prep_main ( ) . { loop_estatuto } np_fin_total

    {               shift and go to state 49


state 45

    (24) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id . np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (29) np_add_to_func_dir -> . epsilon
    (116) epsilon -> .

    (               reduce using rule 116 (epsilon -> .)

    np_add_to_func_dir             shift and go to state 50
    epsilon                        shift and go to state 51

state 46

    (28) np_func_id -> epsilon .

    (               reduce using rule 28 (np_func_id -> epsilon .)


state 47

    (14) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name . array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (15) array_opcional -> . [ VAL_INT np_push_const_int ]
    (16) array_opcional -> . epsilon
    (116) epsilon -> .

    [               shift and go to state 53
    ,               reduce using rule 116 (epsilon -> .)
    ;               reduce using rule 116 (epsilon -> .)

    array_opcional                 shift and go to state 52
    epsilon                        shift and go to state 54

state 48

    (20) np_set_curr_var_name -> epsilon .

    [               reduce using rule 20 (np_set_curr_var_name -> epsilon .)
    ,               reduce using rule 20 (np_set_curr_var_name -> epsilon .)
    ;               reduce using rule 20 (np_set_curr_var_name -> epsilon .)


state 49

    (4) main -> MAIN np_prep_main ( ) { . loop_estatuto } np_fin_total
    (73) loop_estatuto -> . estatuto loop_estatuto
    (74) loop_estatuto -> . epsilon
    (43) estatuto -> . asignacion
    (44) estatuto -> . func_llamada ;
    (45) estatuto -> . read
    (46) estatuto -> . write
    (47) estatuto -> . decision
    (48) estatuto -> . repeticion
    (49) estatuto -> . func_return
    (116) epsilon -> .
    (50) asignacion -> . variable = hyper_exp ;
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (62) read -> . READ ( variable_loop ) ;
    (67) write -> . WRITE ( hyper_exp_loop ) ;
    (68) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (75) repeticion -> . condicional
    (76) repeticion -> . no_condicional
    (61) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (77) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (81) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 116 (epsilon -> .)
    ID              shift and go to state 66
    READ            shift and go to state 67
    WRITE           shift and go to state 68
    IF              shift and go to state 69
    RETURN          shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74

    loop_estatuto                  shift and go to state 55
    estatuto                       shift and go to state 56
    epsilon                        shift and go to state 57
    asignacion                     shift and go to state 58
    func_llamada                   shift and go to state 59
    read                           shift and go to state 60
    write                          shift and go to state 61
    decision                       shift and go to state 62
    repeticion                     shift and go to state 63
    func_return                    shift and go to state 64
    variable                       shift and go to state 65
    condicional                    shift and go to state 70
    no_condicional                 shift and go to state 71

state 50

    (24) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir . ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func

    (               shift and go to state 75


state 51

    (29) np_add_to_func_dir -> epsilon .

    (               reduce using rule 29 (np_add_to_func_dir -> epsilon .)


state 52

    (14) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional . np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (21) np_add_var_to_varstable -> . epsilon
    (116) epsilon -> .

    ,               reduce using rule 116 (epsilon -> .)
    ;               reduce using rule 116 (epsilon -> .)

    np_add_var_to_varstable        shift and go to state 76
    epsilon                        shift and go to state 77

state 53

    (15) array_opcional -> [ . VAL_INT np_push_const_int ]

    VAL_INT         shift and go to state 78


state 54

    (16) array_opcional -> epsilon .

    ,               reduce using rule 16 (array_opcional -> epsilon .)
    ;               reduce using rule 16 (array_opcional -> epsilon .)


state 55

    (4) main -> MAIN np_prep_main ( ) { loop_estatuto . } np_fin_total

    }               shift and go to state 79


state 56

    (73) loop_estatuto -> estatuto . loop_estatuto
    (73) loop_estatuto -> . estatuto loop_estatuto
    (74) loop_estatuto -> . epsilon
    (43) estatuto -> . asignacion
    (44) estatuto -> . func_llamada ;
    (45) estatuto -> . read
    (46) estatuto -> . write
    (47) estatuto -> . decision
    (48) estatuto -> . repeticion
    (49) estatuto -> . func_return
    (116) epsilon -> .
    (50) asignacion -> . variable = hyper_exp ;
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (62) read -> . READ ( variable_loop ) ;
    (67) write -> . WRITE ( hyper_exp_loop ) ;
    (68) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (75) repeticion -> . condicional
    (76) repeticion -> . no_condicional
    (61) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (77) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (81) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 116 (epsilon -> .)
    ID              shift and go to state 66
    READ            shift and go to state 67
    WRITE           shift and go to state 68
    IF              shift and go to state 69
    RETURN          shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74

    estatuto                       shift and go to state 56
    loop_estatuto                  shift and go to state 80
    epsilon                        shift and go to state 57
    asignacion                     shift and go to state 58
    func_llamada                   shift and go to state 59
    read                           shift and go to state 60
    write                          shift and go to state 61
    decision                       shift and go to state 62
    repeticion                     shift and go to state 63
    func_return                    shift and go to state 64
    variable                       shift and go to state 65
    condicional                    shift and go to state 70
    no_condicional                 shift and go to state 71

state 57

    (74) loop_estatuto -> epsilon .

    }               reduce using rule 74 (loop_estatuto -> epsilon .)


state 58

    (43) estatuto -> asignacion .

    ID              reduce using rule 43 (estatuto -> asignacion .)
    READ            reduce using rule 43 (estatuto -> asignacion .)
    WRITE           reduce using rule 43 (estatuto -> asignacion .)
    IF              reduce using rule 43 (estatuto -> asignacion .)
    RETURN          reduce using rule 43 (estatuto -> asignacion .)
    WHILE           reduce using rule 43 (estatuto -> asignacion .)
    FOR             reduce using rule 43 (estatuto -> asignacion .)
    }               reduce using rule 43 (estatuto -> asignacion .)


state 59

    (44) estatuto -> func_llamada . ;

    ;               shift and go to state 81


state 60

    (45) estatuto -> read .

    ID              reduce using rule 45 (estatuto -> read .)
    READ            reduce using rule 45 (estatuto -> read .)
    WRITE           reduce using rule 45 (estatuto -> read .)
    IF              reduce using rule 45 (estatuto -> read .)
    RETURN          reduce using rule 45 (estatuto -> read .)
    WHILE           reduce using rule 45 (estatuto -> read .)
    FOR             reduce using rule 45 (estatuto -> read .)
    }               reduce using rule 45 (estatuto -> read .)


state 61

    (46) estatuto -> write .

    ID              reduce using rule 46 (estatuto -> write .)
    READ            reduce using rule 46 (estatuto -> write .)
    WRITE           reduce using rule 46 (estatuto -> write .)
    IF              reduce using rule 46 (estatuto -> write .)
    RETURN          reduce using rule 46 (estatuto -> write .)
    WHILE           reduce using rule 46 (estatuto -> write .)
    FOR             reduce using rule 46 (estatuto -> write .)
    }               reduce using rule 46 (estatuto -> write .)


state 62

    (47) estatuto -> decision .

    ID              reduce using rule 47 (estatuto -> decision .)
    READ            reduce using rule 47 (estatuto -> decision .)
    WRITE           reduce using rule 47 (estatuto -> decision .)
    IF              reduce using rule 47 (estatuto -> decision .)
    RETURN          reduce using rule 47 (estatuto -> decision .)
    WHILE           reduce using rule 47 (estatuto -> decision .)
    FOR             reduce using rule 47 (estatuto -> decision .)
    }               reduce using rule 47 (estatuto -> decision .)


state 63

    (48) estatuto -> repeticion .

    ID              reduce using rule 48 (estatuto -> repeticion .)
    READ            reduce using rule 48 (estatuto -> repeticion .)
    WRITE           reduce using rule 48 (estatuto -> repeticion .)
    IF              reduce using rule 48 (estatuto -> repeticion .)
    RETURN          reduce using rule 48 (estatuto -> repeticion .)
    WHILE           reduce using rule 48 (estatuto -> repeticion .)
    FOR             reduce using rule 48 (estatuto -> repeticion .)
    }               reduce using rule 48 (estatuto -> repeticion .)


state 64

    (49) estatuto -> func_return .

    ID              reduce using rule 49 (estatuto -> func_return .)
    READ            reduce using rule 49 (estatuto -> func_return .)
    WRITE           reduce using rule 49 (estatuto -> func_return .)
    IF              reduce using rule 49 (estatuto -> func_return .)
    RETURN          reduce using rule 49 (estatuto -> func_return .)
    WHILE           reduce using rule 49 (estatuto -> func_return .)
    FOR             reduce using rule 49 (estatuto -> func_return .)
    }               reduce using rule 49 (estatuto -> func_return .)


state 65

    (50) asignacion -> variable . = hyper_exp ;

    =               shift and go to state 82


state 66

    (51) func_llamada -> ID . np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (9) variable -> ID . np_single_var_process
    (52) np_fc_1 -> . epsilon
    (115) np_single_var_process -> . epsilon
    (116) epsilon -> .

    (               reduce using rule 116 (epsilon -> .)
    =               reduce using rule 116 (epsilon -> .)

    np_fc_1                        shift and go to state 83
    np_single_var_process          shift and go to state 84
    epsilon                        shift and go to state 85

state 67

    (62) read -> READ . ( variable_loop ) ;

    (               shift and go to state 86


state 68

    (67) write -> WRITE . ( hyper_exp_loop ) ;

    (               shift and go to state 87


state 69

    (68) decision -> IF . ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else

    (               shift and go to state 88


state 70

    (75) repeticion -> condicional .

    ID              reduce using rule 75 (repeticion -> condicional .)
    READ            reduce using rule 75 (repeticion -> condicional .)
    WRITE           reduce using rule 75 (repeticion -> condicional .)
    IF              reduce using rule 75 (repeticion -> condicional .)
    RETURN          reduce using rule 75 (repeticion -> condicional .)
    WHILE           reduce using rule 75 (repeticion -> condicional .)
    FOR             reduce using rule 75 (repeticion -> condicional .)
    }               reduce using rule 75 (repeticion -> condicional .)


state 71

    (76) repeticion -> no_condicional .

    ID              reduce using rule 76 (repeticion -> no_condicional .)
    READ            reduce using rule 76 (repeticion -> no_condicional .)
    WRITE           reduce using rule 76 (repeticion -> no_condicional .)
    IF              reduce using rule 76 (repeticion -> no_condicional .)
    RETURN          reduce using rule 76 (repeticion -> no_condicional .)
    WHILE           reduce using rule 76 (repeticion -> no_condicional .)
    FOR             reduce using rule 76 (repeticion -> no_condicional .)
    }               reduce using rule 76 (repeticion -> no_condicional .)


state 72

    (61) func_return -> RETURN . ( hyper_exp ) ;

    (               shift and go to state 89


state 73

    (77) condicional -> WHILE . np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (78) np_cond_1 -> . epsilon
    (116) epsilon -> .

    (               reduce using rule 116 (epsilon -> .)

    np_cond_1                      shift and go to state 90
    epsilon                        shift and go to state 91

state 74

    (81) no_condicional -> FOR . variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }
    (9) variable -> . ID np_single_var_process

    ID              shift and go to state 93

    variable                       shift and go to state 92

state 75

    (24) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( . np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (32) np_prep_func_params -> . epsilon
    (116) epsilon -> .

    INT             reduce using rule 116 (epsilon -> .)
    FLOAT           reduce using rule 116 (epsilon -> .)
    CHAR            reduce using rule 116 (epsilon -> .)
    BOOL            reduce using rule 116 (epsilon -> .)
    )               reduce using rule 116 (epsilon -> .)

    np_prep_func_params            shift and go to state 94
    epsilon                        shift and go to state 95

state 76

    (14) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable . loop_var_decl_mismo_tipo ;
    (17) loop_var_decl_mismo_tipo -> . , ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo
    (18) loop_var_decl_mismo_tipo -> . epsilon
    (116) epsilon -> .

    ,               shift and go to state 97
    ;               reduce using rule 116 (epsilon -> .)

    loop_var_decl_mismo_tipo       shift and go to state 96
    epsilon                        shift and go to state 98

state 77

    (21) np_add_var_to_varstable -> epsilon .

    ,               reduce using rule 21 (np_add_var_to_varstable -> epsilon .)
    ;               reduce using rule 21 (np_add_var_to_varstable -> epsilon .)


state 78

    (15) array_opcional -> [ VAL_INT . np_push_const_int ]
    (112) np_push_const_int -> . epsilon
    (116) epsilon -> .

    ]               reduce using rule 116 (epsilon -> .)

    np_push_const_int              shift and go to state 99
    epsilon                        shift and go to state 100

state 79

    (4) main -> MAIN np_prep_main ( ) { loop_estatuto } . np_fin_total
    (6) np_fin_total -> . epsilon
    (116) epsilon -> .

    $end            reduce using rule 116 (epsilon -> .)

    np_fin_total                   shift and go to state 101
    epsilon                        shift and go to state 102

state 80

    (73) loop_estatuto -> estatuto loop_estatuto .

    }               reduce using rule 73 (loop_estatuto -> estatuto loop_estatuto .)


state 81

    (44) estatuto -> func_llamada ; .

    ID              reduce using rule 44 (estatuto -> func_llamada ; .)
    READ            reduce using rule 44 (estatuto -> func_llamada ; .)
    WRITE           reduce using rule 44 (estatuto -> func_llamada ; .)
    IF              reduce using rule 44 (estatuto -> func_llamada ; .)
    RETURN          reduce using rule 44 (estatuto -> func_llamada ; .)
    WHILE           reduce using rule 44 (estatuto -> func_llamada ; .)
    FOR             reduce using rule 44 (estatuto -> func_llamada ; .)
    }               reduce using rule 44 (estatuto -> func_llamada ; .)


state 82

    (50) asignacion -> variable = . hyper_exp ;
    (85) hyper_exp -> . super_exp hyper_exp_1
    (89) super_exp -> . exp super_exp_1
    (95) exp -> . term exp_1
    (99) term -> . factor term_1
    (105) factor -> . constant
    (106) factor -> . variable
    (107) factor -> . ( hyper_exp )
    (108) factor -> . func_llamada
    (109) constant -> . VAL_INT np_push_const_int
    (110) constant -> . VAL_FLOAT np_push_const_float
    (111) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 110
    VAL_INT         shift and go to state 112
    VAL_FLOAT       shift and go to state 113
    VAL_CHAR        shift and go to state 114
    ID              shift and go to state 115

    variable                       shift and go to state 103
    hyper_exp                      shift and go to state 104
    super_exp                      shift and go to state 105
    exp                            shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    constant                       shift and go to state 109
    func_llamada                   shift and go to state 111

state 83

    (51) func_llamada -> ID np_fc_1 . ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 116


state 84

    (9) variable -> ID np_single_var_process .

    =               reduce using rule 9 (variable -> ID np_single_var_process .)
    *               reduce using rule 9 (variable -> ID np_single_var_process .)
    /               reduce using rule 9 (variable -> ID np_single_var_process .)
    +               reduce using rule 9 (variable -> ID np_single_var_process .)
    -               reduce using rule 9 (variable -> ID np_single_var_process .)
    <               reduce using rule 9 (variable -> ID np_single_var_process .)
    >               reduce using rule 9 (variable -> ID np_single_var_process .)
    EQUAL_TO        reduce using rule 9 (variable -> ID np_single_var_process .)
    NOT_EQUAL_TO    reduce using rule 9 (variable -> ID np_single_var_process .)
    &               reduce using rule 9 (variable -> ID np_single_var_process .)
    |               reduce using rule 9 (variable -> ID np_single_var_process .)
    ;               reduce using rule 9 (variable -> ID np_single_var_process .)
    ,               reduce using rule 9 (variable -> ID np_single_var_process .)
    )               reduce using rule 9 (variable -> ID np_single_var_process .)
    TO              reduce using rule 9 (variable -> ID np_single_var_process .)
    DO              reduce using rule 9 (variable -> ID np_single_var_process .)


state 85

    (52) np_fc_1 -> epsilon .
    (115) np_single_var_process -> epsilon .

    (               reduce using rule 52 (np_fc_1 -> epsilon .)
    =               reduce using rule 115 (np_single_var_process -> epsilon .)


state 86

    (62) read -> READ ( . variable_loop ) ;
    (63) variable_loop -> . variable np_add_to_input_counter variable_loop_1
    (9) variable -> . ID np_single_var_process

    ID              shift and go to state 93

    variable_loop                  shift and go to state 117
    variable                       shift and go to state 118

state 87

    (67) write -> WRITE ( . hyper_exp_loop ) ;
    (57) hyper_exp_loop -> . hyper_exp np_add_to_input_counter hyper_exp_loop_1
    (85) hyper_exp -> . super_exp hyper_exp_1
    (89) super_exp -> . exp super_exp_1
    (95) exp -> . term exp_1
    (99) term -> . factor term_1
    (105) factor -> . constant
    (106) factor -> . variable
    (107) factor -> . ( hyper_exp )
    (108) factor -> . func_llamada
    (109) constant -> . VAL_INT np_push_const_int
    (110) constant -> . VAL_FLOAT np_push_const_float
    (111) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 110
    VAL_INT         shift and go to state 112
    VAL_FLOAT       shift and go to state 113
    VAL_CHAR        shift and go to state 114
    ID              shift and go to state 115

    hyper_exp_loop                 shift and go to state 119
    hyper_exp                      shift and go to state 120
    super_exp                      shift and go to state 105
    exp                            shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    constant                       shift and go to state 109
    variable                       shift and go to state 103
    func_llamada                   shift and go to state 111

state 88

    (68) decision -> IF ( . hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (85) hyper_exp -> . super_exp hyper_exp_1
    (89) super_exp -> . exp super_exp_1
    (95) exp -> . term exp_1
    (99) term -> . factor term_1
    (105) factor -> . constant
    (106) factor -> . variable
    (107) factor -> . ( hyper_exp )
    (108) factor -> . func_llamada
    (109) constant -> . VAL_INT np_push_const_int
    (110) constant -> . VAL_FLOAT np_push_const_float
    (111) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 110
    VAL_INT         shift and go to state 112
    VAL_FLOAT       shift and go to state 113
    VAL_CHAR        shift and go to state 114
    ID              shift and go to state 115

    hyper_exp                      shift and go to state 121
    super_exp                      shift and go to state 105
    exp                            shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    constant                       shift and go to state 109
    variable                       shift and go to state 103
    func_llamada                   shift and go to state 111

state 89

    (61) func_return -> RETURN ( . hyper_exp ) ;
    (85) hyper_exp -> . super_exp hyper_exp_1
    (89) super_exp -> . exp super_exp_1
    (95) exp -> . term exp_1
    (99) term -> . factor term_1
    (105) factor -> . constant
    (106) factor -> . variable
    (107) factor -> . ( hyper_exp )
    (108) factor -> . func_llamada
    (109) constant -> . VAL_INT np_push_const_int
    (110) constant -> . VAL_FLOAT np_push_const_float
    (111) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 110
    VAL_INT         shift and go to state 112
    VAL_FLOAT       shift and go to state 113
    VAL_CHAR        shift and go to state 114
    ID              shift and go to state 115

    hyper_exp                      shift and go to state 122
    super_exp                      shift and go to state 105
    exp                            shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    constant                       shift and go to state 109
    variable                       shift and go to state 103
    func_llamada                   shift and go to state 111

state 90

    (77) condicional -> WHILE np_cond_1 . ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3

    (               shift and go to state 123


state 91

    (78) np_cond_1 -> epsilon .

    (               reduce using rule 78 (np_cond_1 -> epsilon .)


state 92

    (81) no_condicional -> FOR variable . = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    =               shift and go to state 124


state 93

    (9) variable -> ID . np_single_var_process
    (115) np_single_var_process -> . epsilon
    (116) epsilon -> .

    =               reduce using rule 116 (epsilon -> .)
    ,               reduce using rule 116 (epsilon -> .)
    )               reduce using rule 116 (epsilon -> .)

    np_single_var_process          shift and go to state 84
    epsilon                        shift and go to state 125

state 94

    (24) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params . func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (33) func_parametro -> . parametro
    (34) func_parametro -> . epsilon
    (35) parametro -> . tipo ID np_add_param loop_parametro
    (116) epsilon -> .
    (39) tipo -> . INT
    (40) tipo -> . FLOAT
    (41) tipo -> . CHAR
    (42) tipo -> . BOOL

    )               reduce using rule 116 (epsilon -> .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOL            shift and go to state 28

    func_parametro                 shift and go to state 126
    parametro                      shift and go to state 127
    epsilon                        shift and go to state 128
    tipo                           shift and go to state 129

state 95

    (32) np_prep_func_params -> epsilon .

    INT             reduce using rule 32 (np_prep_func_params -> epsilon .)
    FLOAT           reduce using rule 32 (np_prep_func_params -> epsilon .)
    CHAR            reduce using rule 32 (np_prep_func_params -> epsilon .)
    BOOL            reduce using rule 32 (np_prep_func_params -> epsilon .)
    )               reduce using rule 32 (np_prep_func_params -> epsilon .)


state 96

    (14) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo . ;

    ;               shift and go to state 130


state 97

    (17) loop_var_decl_mismo_tipo -> , . ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo

    ID              shift and go to state 131


state 98

    (18) loop_var_decl_mismo_tipo -> epsilon .

    ;               reduce using rule 18 (loop_var_decl_mismo_tipo -> epsilon .)


state 99

    (15) array_opcional -> [ VAL_INT np_push_const_int . ]

    ]               shift and go to state 132


state 100

    (112) np_push_const_int -> epsilon .

    ]               reduce using rule 112 (np_push_const_int -> epsilon .)
    *               reduce using rule 112 (np_push_const_int -> epsilon .)
    /               reduce using rule 112 (np_push_const_int -> epsilon .)
    +               reduce using rule 112 (np_push_const_int -> epsilon .)
    -               reduce using rule 112 (np_push_const_int -> epsilon .)
    <               reduce using rule 112 (np_push_const_int -> epsilon .)
    >               reduce using rule 112 (np_push_const_int -> epsilon .)
    EQUAL_TO        reduce using rule 112 (np_push_const_int -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 112 (np_push_const_int -> epsilon .)
    &               reduce using rule 112 (np_push_const_int -> epsilon .)
    |               reduce using rule 112 (np_push_const_int -> epsilon .)
    ;               reduce using rule 112 (np_push_const_int -> epsilon .)
    ,               reduce using rule 112 (np_push_const_int -> epsilon .)
    )               reduce using rule 112 (np_push_const_int -> epsilon .)
    TO              reduce using rule 112 (np_push_const_int -> epsilon .)
    DO              reduce using rule 112 (np_push_const_int -> epsilon .)


state 101

    (4) main -> MAIN np_prep_main ( ) { loop_estatuto } np_fin_total .

    $end            reduce using rule 4 (main -> MAIN np_prep_main ( ) { loop_estatuto } np_fin_total .)


state 102

    (6) np_fin_total -> epsilon .

    $end            reduce using rule 6 (np_fin_total -> epsilon .)


state 103

    (106) factor -> variable .

    *               reduce using rule 106 (factor -> variable .)
    /               reduce using rule 106 (factor -> variable .)
    +               reduce using rule 106 (factor -> variable .)
    -               reduce using rule 106 (factor -> variable .)
    <               reduce using rule 106 (factor -> variable .)
    >               reduce using rule 106 (factor -> variable .)
    EQUAL_TO        reduce using rule 106 (factor -> variable .)
    NOT_EQUAL_TO    reduce using rule 106 (factor -> variable .)
    &               reduce using rule 106 (factor -> variable .)
    |               reduce using rule 106 (factor -> variable .)
    ;               reduce using rule 106 (factor -> variable .)
    ,               reduce using rule 106 (factor -> variable .)
    )               reduce using rule 106 (factor -> variable .)
    TO              reduce using rule 106 (factor -> variable .)
    DO              reduce using rule 106 (factor -> variable .)


state 104

    (50) asignacion -> variable = hyper_exp . ;

    ;               shift and go to state 133


state 105

    (85) hyper_exp -> super_exp . hyper_exp_1
    (86) hyper_exp_1 -> . & np_push_operator_stack super_exp
    (87) hyper_exp_1 -> . | np_push_operator_stack super_exp
    (88) hyper_exp_1 -> . epsilon
    (116) epsilon -> .

    &               shift and go to state 135
    |               shift and go to state 136
    ;               reduce using rule 116 (epsilon -> .)
    ,               reduce using rule 116 (epsilon -> .)
    )               reduce using rule 116 (epsilon -> .)
    TO              reduce using rule 116 (epsilon -> .)
    DO              reduce using rule 116 (epsilon -> .)

    hyper_exp_1                    shift and go to state 134
    epsilon                        shift and go to state 137

state 106

    (89) super_exp -> exp . super_exp_1
    (90) super_exp_1 -> . < np_push_operator_stack exp
    (91) super_exp_1 -> . > np_push_operator_stack exp
    (92) super_exp_1 -> . EQUAL_TO np_push_operator_stack exp
    (93) super_exp_1 -> . NOT_EQUAL_TO np_push_operator_stack exp
    (94) super_exp_1 -> . epsilon
    (116) epsilon -> .

    <               shift and go to state 139
    >               shift and go to state 140
    EQUAL_TO        shift and go to state 141
    NOT_EQUAL_TO    shift and go to state 142
    &               reduce using rule 116 (epsilon -> .)
    |               reduce using rule 116 (epsilon -> .)
    ;               reduce using rule 116 (epsilon -> .)
    ,               reduce using rule 116 (epsilon -> .)
    )               reduce using rule 116 (epsilon -> .)
    TO              reduce using rule 116 (epsilon -> .)
    DO              reduce using rule 116 (epsilon -> .)

    super_exp_1                    shift and go to state 138
    epsilon                        shift and go to state 143

state 107

    (95) exp -> term . exp_1
    (96) exp_1 -> . + np_push_operator_stack term
    (97) exp_1 -> . - np_push_operator_stack term
    (98) exp_1 -> . epsilon
    (116) epsilon -> .

    +               shift and go to state 145
    -               shift and go to state 146
    <               reduce using rule 116 (epsilon -> .)
    >               reduce using rule 116 (epsilon -> .)
    EQUAL_TO        reduce using rule 116 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 116 (epsilon -> .)
    &               reduce using rule 116 (epsilon -> .)
    |               reduce using rule 116 (epsilon -> .)
    ;               reduce using rule 116 (epsilon -> .)
    ,               reduce using rule 116 (epsilon -> .)
    )               reduce using rule 116 (epsilon -> .)
    TO              reduce using rule 116 (epsilon -> .)
    DO              reduce using rule 116 (epsilon -> .)

    exp_1                          shift and go to state 144
    epsilon                        shift and go to state 147

state 108

    (99) term -> factor . term_1
    (100) term_1 -> . * np_push_operator_stack factor
    (101) term_1 -> . / np_push_operator_stack factor
    (102) term_1 -> . epsilon
    (116) epsilon -> .

    *               shift and go to state 149
    /               shift and go to state 150
    +               reduce using rule 116 (epsilon -> .)
    -               reduce using rule 116 (epsilon -> .)
    <               reduce using rule 116 (epsilon -> .)
    >               reduce using rule 116 (epsilon -> .)
    EQUAL_TO        reduce using rule 116 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 116 (epsilon -> .)
    &               reduce using rule 116 (epsilon -> .)
    |               reduce using rule 116 (epsilon -> .)
    ;               reduce using rule 116 (epsilon -> .)
    ,               reduce using rule 116 (epsilon -> .)
    )               reduce using rule 116 (epsilon -> .)
    TO              reduce using rule 116 (epsilon -> .)
    DO              reduce using rule 116 (epsilon -> .)

    term_1                         shift and go to state 148
    epsilon                        shift and go to state 151

state 109

    (105) factor -> constant .

    *               reduce using rule 105 (factor -> constant .)
    /               reduce using rule 105 (factor -> constant .)
    +               reduce using rule 105 (factor -> constant .)
    -               reduce using rule 105 (factor -> constant .)
    <               reduce using rule 105 (factor -> constant .)
    >               reduce using rule 105 (factor -> constant .)
    EQUAL_TO        reduce using rule 105 (factor -> constant .)
    NOT_EQUAL_TO    reduce using rule 105 (factor -> constant .)
    &               reduce using rule 105 (factor -> constant .)
    |               reduce using rule 105 (factor -> constant .)
    ;               reduce using rule 105 (factor -> constant .)
    ,               reduce using rule 105 (factor -> constant .)
    )               reduce using rule 105 (factor -> constant .)
    TO              reduce using rule 105 (factor -> constant .)
    DO              reduce using rule 105 (factor -> constant .)


state 110

    (107) factor -> ( . hyper_exp )
    (85) hyper_exp -> . super_exp hyper_exp_1
    (89) super_exp -> . exp super_exp_1
    (95) exp -> . term exp_1
    (99) term -> . factor term_1
    (105) factor -> . constant
    (106) factor -> . variable
    (107) factor -> . ( hyper_exp )
    (108) factor -> . func_llamada
    (109) constant -> . VAL_INT np_push_const_int
    (110) constant -> . VAL_FLOAT np_push_const_float
    (111) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 110
    VAL_INT         shift and go to state 112
    VAL_FLOAT       shift and go to state 113
    VAL_CHAR        shift and go to state 114
    ID              shift and go to state 115

    hyper_exp                      shift and go to state 152
    super_exp                      shift and go to state 105
    exp                            shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    constant                       shift and go to state 109
    variable                       shift and go to state 103
    func_llamada                   shift and go to state 111

state 111

    (108) factor -> func_llamada .

    *               reduce using rule 108 (factor -> func_llamada .)
    /               reduce using rule 108 (factor -> func_llamada .)
    +               reduce using rule 108 (factor -> func_llamada .)
    -               reduce using rule 108 (factor -> func_llamada .)
    <               reduce using rule 108 (factor -> func_llamada .)
    >               reduce using rule 108 (factor -> func_llamada .)
    EQUAL_TO        reduce using rule 108 (factor -> func_llamada .)
    NOT_EQUAL_TO    reduce using rule 108 (factor -> func_llamada .)
    &               reduce using rule 108 (factor -> func_llamada .)
    |               reduce using rule 108 (factor -> func_llamada .)
    ;               reduce using rule 108 (factor -> func_llamada .)
    ,               reduce using rule 108 (factor -> func_llamada .)
    )               reduce using rule 108 (factor -> func_llamada .)
    TO              reduce using rule 108 (factor -> func_llamada .)
    DO              reduce using rule 108 (factor -> func_llamada .)


state 112

    (109) constant -> VAL_INT . np_push_const_int
    (112) np_push_const_int -> . epsilon
    (116) epsilon -> .

    *               reduce using rule 116 (epsilon -> .)
    /               reduce using rule 116 (epsilon -> .)
    +               reduce using rule 116 (epsilon -> .)
    -               reduce using rule 116 (epsilon -> .)
    <               reduce using rule 116 (epsilon -> .)
    >               reduce using rule 116 (epsilon -> .)
    EQUAL_TO        reduce using rule 116 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 116 (epsilon -> .)
    &               reduce using rule 116 (epsilon -> .)
    |               reduce using rule 116 (epsilon -> .)
    ;               reduce using rule 116 (epsilon -> .)
    ,               reduce using rule 116 (epsilon -> .)
    )               reduce using rule 116 (epsilon -> .)
    TO              reduce using rule 116 (epsilon -> .)
    DO              reduce using rule 116 (epsilon -> .)

    np_push_const_int              shift and go to state 153
    epsilon                        shift and go to state 100

state 113

    (110) constant -> VAL_FLOAT . np_push_const_float
    (113) np_push_const_float -> . epsilon
    (116) epsilon -> .

    *               reduce using rule 116 (epsilon -> .)
    /               reduce using rule 116 (epsilon -> .)
    +               reduce using rule 116 (epsilon -> .)
    -               reduce using rule 116 (epsilon -> .)
    <               reduce using rule 116 (epsilon -> .)
    >               reduce using rule 116 (epsilon -> .)
    EQUAL_TO        reduce using rule 116 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 116 (epsilon -> .)
    &               reduce using rule 116 (epsilon -> .)
    |               reduce using rule 116 (epsilon -> .)
    ;               reduce using rule 116 (epsilon -> .)
    ,               reduce using rule 116 (epsilon -> .)
    )               reduce using rule 116 (epsilon -> .)
    TO              reduce using rule 116 (epsilon -> .)
    DO              reduce using rule 116 (epsilon -> .)

    np_push_const_float            shift and go to state 154
    epsilon                        shift and go to state 155

state 114

    (111) constant -> VAL_CHAR . np_push_const_char
    (114) np_push_const_char -> . epsilon
    (116) epsilon -> .

    *               reduce using rule 116 (epsilon -> .)
    /               reduce using rule 116 (epsilon -> .)
    +               reduce using rule 116 (epsilon -> .)
    -               reduce using rule 116 (epsilon -> .)
    <               reduce using rule 116 (epsilon -> .)
    >               reduce using rule 116 (epsilon -> .)
    EQUAL_TO        reduce using rule 116 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 116 (epsilon -> .)
    &               reduce using rule 116 (epsilon -> .)
    |               reduce using rule 116 (epsilon -> .)
    ;               reduce using rule 116 (epsilon -> .)
    ,               reduce using rule 116 (epsilon -> .)
    )               reduce using rule 116 (epsilon -> .)
    TO              reduce using rule 116 (epsilon -> .)
    DO              reduce using rule 116 (epsilon -> .)

    np_push_const_char             shift and go to state 156
    epsilon                        shift and go to state 157

state 115

    (9) variable -> ID . np_single_var_process
    (51) func_llamada -> ID . np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (115) np_single_var_process -> . epsilon
    (52) np_fc_1 -> . epsilon
    (116) epsilon -> .

    *               reduce using rule 116 (epsilon -> .)
    /               reduce using rule 116 (epsilon -> .)
    +               reduce using rule 116 (epsilon -> .)
    -               reduce using rule 116 (epsilon -> .)
    <               reduce using rule 116 (epsilon -> .)
    >               reduce using rule 116 (epsilon -> .)
    EQUAL_TO        reduce using rule 116 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 116 (epsilon -> .)
    &               reduce using rule 116 (epsilon -> .)
    |               reduce using rule 116 (epsilon -> .)
    ;               reduce using rule 116 (epsilon -> .)
    ,               reduce using rule 116 (epsilon -> .)
    )               reduce using rule 116 (epsilon -> .)
    TO              reduce using rule 116 (epsilon -> .)
    DO              reduce using rule 116 (epsilon -> .)
    (               reduce using rule 116 (epsilon -> .)

    np_single_var_process          shift and go to state 84
    np_fc_1                        shift and go to state 83
    epsilon                        shift and go to state 158

state 116

    (51) func_llamada -> ID np_fc_1 ( . np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (103) np_push_operator_stack -> . epsilon
    (116) epsilon -> .

    (               reduce using rule 116 (epsilon -> .)
    VAL_INT         reduce using rule 116 (epsilon -> .)
    VAL_FLOAT       reduce using rule 116 (epsilon -> .)
    VAL_CHAR        reduce using rule 116 (epsilon -> .)
    ID              reduce using rule 116 (epsilon -> .)
    )               reduce using rule 116 (epsilon -> .)

    np_push_operator_stack         shift and go to state 159
    epsilon                        shift and go to state 160

state 117

    (62) read -> READ ( variable_loop . ) ;

    )               shift and go to state 161


state 118

    (63) variable_loop -> variable . np_add_to_input_counter variable_loop_1
    (66) np_add_to_input_counter -> . epsilon
    (116) epsilon -> .

    ,               reduce using rule 116 (epsilon -> .)
    )               reduce using rule 116 (epsilon -> .)

    np_add_to_input_counter        shift and go to state 162
    epsilon                        shift and go to state 163

state 119

    (67) write -> WRITE ( hyper_exp_loop . ) ;

    )               shift and go to state 164


state 120

    (57) hyper_exp_loop -> hyper_exp . np_add_to_input_counter hyper_exp_loop_1
    (66) np_add_to_input_counter -> . epsilon
    (116) epsilon -> .

    ,               reduce using rule 116 (epsilon -> .)
    )               reduce using rule 116 (epsilon -> .)

    np_add_to_input_counter        shift and go to state 165
    epsilon                        shift and go to state 163

state 121

    (68) decision -> IF ( hyper_exp . ) np_decision_1 THEN { loop_estatuto } decision_else

    )               shift and go to state 166


state 122

    (61) func_return -> RETURN ( hyper_exp . ) ;

    )               shift and go to state 167


state 123

    (77) condicional -> WHILE np_cond_1 ( . hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (85) hyper_exp -> . super_exp hyper_exp_1
    (89) super_exp -> . exp super_exp_1
    (95) exp -> . term exp_1
    (99) term -> . factor term_1
    (105) factor -> . constant
    (106) factor -> . variable
    (107) factor -> . ( hyper_exp )
    (108) factor -> . func_llamada
    (109) constant -> . VAL_INT np_push_const_int
    (110) constant -> . VAL_FLOAT np_push_const_float
    (111) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 110
    VAL_INT         shift and go to state 112
    VAL_FLOAT       shift and go to state 113
    VAL_CHAR        shift and go to state 114
    ID              shift and go to state 115

    hyper_exp                      shift and go to state 168
    super_exp                      shift and go to state 105
    exp                            shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    constant                       shift and go to state 109
    variable                       shift and go to state 103
    func_llamada                   shift and go to state 111

state 124

    (81) no_condicional -> FOR variable = . hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }
    (85) hyper_exp -> . super_exp hyper_exp_1
    (89) super_exp -> . exp super_exp_1
    (95) exp -> . term exp_1
    (99) term -> . factor term_1
    (105) factor -> . constant
    (106) factor -> . variable
    (107) factor -> . ( hyper_exp )
    (108) factor -> . func_llamada
    (109) constant -> . VAL_INT np_push_const_int
    (110) constant -> . VAL_FLOAT np_push_const_float
    (111) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 110
    VAL_INT         shift and go to state 112
    VAL_FLOAT       shift and go to state 113
    VAL_CHAR        shift and go to state 114
    ID              shift and go to state 115

    variable                       shift and go to state 103
    hyper_exp                      shift and go to state 169
    super_exp                      shift and go to state 105
    exp                            shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    constant                       shift and go to state 109
    func_llamada                   shift and go to state 111

state 125

    (115) np_single_var_process -> epsilon .

    =               reduce using rule 115 (np_single_var_process -> epsilon .)
    ,               reduce using rule 115 (np_single_var_process -> epsilon .)
    )               reduce using rule 115 (np_single_var_process -> epsilon .)


state 126

    (24) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro . ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func

    )               shift and go to state 170


state 127

    (33) func_parametro -> parametro .

    )               reduce using rule 33 (func_parametro -> parametro .)


state 128

    (34) func_parametro -> epsilon .

    )               reduce using rule 34 (func_parametro -> epsilon .)


state 129

    (35) parametro -> tipo . ID np_add_param loop_parametro

    ID              shift and go to state 171


state 130

    (14) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ; .

    INT             reduce using rule 14 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    FLOAT           reduce using rule 14 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    CHAR            reduce using rule 14 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    BOOL            reduce using rule 14 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    FUNCTION        reduce using rule 14 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    MAIN            reduce using rule 14 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    {               reduce using rule 14 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)


state 131

    (17) loop_var_decl_mismo_tipo -> , ID . np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo
    (20) np_set_curr_var_name -> . epsilon
    (116) epsilon -> .

    [               reduce using rule 116 (epsilon -> .)
    ,               reduce using rule 116 (epsilon -> .)
    ;               reduce using rule 116 (epsilon -> .)

    np_set_curr_var_name           shift and go to state 172
    epsilon                        shift and go to state 48

state 132

    (15) array_opcional -> [ VAL_INT np_push_const_int ] .

    ,               reduce using rule 15 (array_opcional -> [ VAL_INT np_push_const_int ] .)
    ;               reduce using rule 15 (array_opcional -> [ VAL_INT np_push_const_int ] .)


state 133

    (50) asignacion -> variable = hyper_exp ; .

    ID              reduce using rule 50 (asignacion -> variable = hyper_exp ; .)
    READ            reduce using rule 50 (asignacion -> variable = hyper_exp ; .)
    WRITE           reduce using rule 50 (asignacion -> variable = hyper_exp ; .)
    IF              reduce using rule 50 (asignacion -> variable = hyper_exp ; .)
    RETURN          reduce using rule 50 (asignacion -> variable = hyper_exp ; .)
    WHILE           reduce using rule 50 (asignacion -> variable = hyper_exp ; .)
    FOR             reduce using rule 50 (asignacion -> variable = hyper_exp ; .)
    }               reduce using rule 50 (asignacion -> variable = hyper_exp ; .)


state 134

    (85) hyper_exp -> super_exp hyper_exp_1 .

    ;               reduce using rule 85 (hyper_exp -> super_exp hyper_exp_1 .)
    ,               reduce using rule 85 (hyper_exp -> super_exp hyper_exp_1 .)
    )               reduce using rule 85 (hyper_exp -> super_exp hyper_exp_1 .)
    TO              reduce using rule 85 (hyper_exp -> super_exp hyper_exp_1 .)
    DO              reduce using rule 85 (hyper_exp -> super_exp hyper_exp_1 .)


state 135

    (86) hyper_exp_1 -> & . np_push_operator_stack super_exp
    (103) np_push_operator_stack -> . epsilon
    (116) epsilon -> .

    (               reduce using rule 116 (epsilon -> .)
    VAL_INT         reduce using rule 116 (epsilon -> .)
    VAL_FLOAT       reduce using rule 116 (epsilon -> .)
    VAL_CHAR        reduce using rule 116 (epsilon -> .)
    ID              reduce using rule 116 (epsilon -> .)

    np_push_operator_stack         shift and go to state 173
    epsilon                        shift and go to state 160

state 136

    (87) hyper_exp_1 -> | . np_push_operator_stack super_exp
    (103) np_push_operator_stack -> . epsilon
    (116) epsilon -> .

    (               reduce using rule 116 (epsilon -> .)
    VAL_INT         reduce using rule 116 (epsilon -> .)
    VAL_FLOAT       reduce using rule 116 (epsilon -> .)
    VAL_CHAR        reduce using rule 116 (epsilon -> .)
    ID              reduce using rule 116 (epsilon -> .)

    np_push_operator_stack         shift and go to state 174
    epsilon                        shift and go to state 160

state 137

    (88) hyper_exp_1 -> epsilon .

    ;               reduce using rule 88 (hyper_exp_1 -> epsilon .)
    ,               reduce using rule 88 (hyper_exp_1 -> epsilon .)
    )               reduce using rule 88 (hyper_exp_1 -> epsilon .)
    TO              reduce using rule 88 (hyper_exp_1 -> epsilon .)
    DO              reduce using rule 88 (hyper_exp_1 -> epsilon .)


state 138

    (89) super_exp -> exp super_exp_1 .

    &               reduce using rule 89 (super_exp -> exp super_exp_1 .)
    |               reduce using rule 89 (super_exp -> exp super_exp_1 .)
    ;               reduce using rule 89 (super_exp -> exp super_exp_1 .)
    ,               reduce using rule 89 (super_exp -> exp super_exp_1 .)
    )               reduce using rule 89 (super_exp -> exp super_exp_1 .)
    TO              reduce using rule 89 (super_exp -> exp super_exp_1 .)
    DO              reduce using rule 89 (super_exp -> exp super_exp_1 .)


state 139

    (90) super_exp_1 -> < . np_push_operator_stack exp
    (103) np_push_operator_stack -> . epsilon
    (116) epsilon -> .

    (               reduce using rule 116 (epsilon -> .)
    VAL_INT         reduce using rule 116 (epsilon -> .)
    VAL_FLOAT       reduce using rule 116 (epsilon -> .)
    VAL_CHAR        reduce using rule 116 (epsilon -> .)
    ID              reduce using rule 116 (epsilon -> .)

    np_push_operator_stack         shift and go to state 175
    epsilon                        shift and go to state 160

state 140

    (91) super_exp_1 -> > . np_push_operator_stack exp
    (103) np_push_operator_stack -> . epsilon
    (116) epsilon -> .

    (               reduce using rule 116 (epsilon -> .)
    VAL_INT         reduce using rule 116 (epsilon -> .)
    VAL_FLOAT       reduce using rule 116 (epsilon -> .)
    VAL_CHAR        reduce using rule 116 (epsilon -> .)
    ID              reduce using rule 116 (epsilon -> .)

    np_push_operator_stack         shift and go to state 176
    epsilon                        shift and go to state 160

state 141

    (92) super_exp_1 -> EQUAL_TO . np_push_operator_stack exp
    (103) np_push_operator_stack -> . epsilon
    (116) epsilon -> .

    (               reduce using rule 116 (epsilon -> .)
    VAL_INT         reduce using rule 116 (epsilon -> .)
    VAL_FLOAT       reduce using rule 116 (epsilon -> .)
    VAL_CHAR        reduce using rule 116 (epsilon -> .)
    ID              reduce using rule 116 (epsilon -> .)

    np_push_operator_stack         shift and go to state 177
    epsilon                        shift and go to state 160

state 142

    (93) super_exp_1 -> NOT_EQUAL_TO . np_push_operator_stack exp
    (103) np_push_operator_stack -> . epsilon
    (116) epsilon -> .

    (               reduce using rule 116 (epsilon -> .)
    VAL_INT         reduce using rule 116 (epsilon -> .)
    VAL_FLOAT       reduce using rule 116 (epsilon -> .)
    VAL_CHAR        reduce using rule 116 (epsilon -> .)
    ID              reduce using rule 116 (epsilon -> .)

    np_push_operator_stack         shift and go to state 178
    epsilon                        shift and go to state 160

state 143

    (94) super_exp_1 -> epsilon .

    &               reduce using rule 94 (super_exp_1 -> epsilon .)
    |               reduce using rule 94 (super_exp_1 -> epsilon .)
    ;               reduce using rule 94 (super_exp_1 -> epsilon .)
    ,               reduce using rule 94 (super_exp_1 -> epsilon .)
    )               reduce using rule 94 (super_exp_1 -> epsilon .)
    TO              reduce using rule 94 (super_exp_1 -> epsilon .)
    DO              reduce using rule 94 (super_exp_1 -> epsilon .)


state 144

    (95) exp -> term exp_1 .

    <               reduce using rule 95 (exp -> term exp_1 .)
    >               reduce using rule 95 (exp -> term exp_1 .)
    EQUAL_TO        reduce using rule 95 (exp -> term exp_1 .)
    NOT_EQUAL_TO    reduce using rule 95 (exp -> term exp_1 .)
    &               reduce using rule 95 (exp -> term exp_1 .)
    |               reduce using rule 95 (exp -> term exp_1 .)
    ;               reduce using rule 95 (exp -> term exp_1 .)
    ,               reduce using rule 95 (exp -> term exp_1 .)
    )               reduce using rule 95 (exp -> term exp_1 .)
    TO              reduce using rule 95 (exp -> term exp_1 .)
    DO              reduce using rule 95 (exp -> term exp_1 .)


state 145

    (96) exp_1 -> + . np_push_operator_stack term
    (103) np_push_operator_stack -> . epsilon
    (116) epsilon -> .

    (               reduce using rule 116 (epsilon -> .)
    VAL_INT         reduce using rule 116 (epsilon -> .)
    VAL_FLOAT       reduce using rule 116 (epsilon -> .)
    VAL_CHAR        reduce using rule 116 (epsilon -> .)
    ID              reduce using rule 116 (epsilon -> .)

    np_push_operator_stack         shift and go to state 179
    epsilon                        shift and go to state 160

state 146

    (97) exp_1 -> - . np_push_operator_stack term
    (103) np_push_operator_stack -> . epsilon
    (116) epsilon -> .

    (               reduce using rule 116 (epsilon -> .)
    VAL_INT         reduce using rule 116 (epsilon -> .)
    VAL_FLOAT       reduce using rule 116 (epsilon -> .)
    VAL_CHAR        reduce using rule 116 (epsilon -> .)
    ID              reduce using rule 116 (epsilon -> .)

    np_push_operator_stack         shift and go to state 180
    epsilon                        shift and go to state 160

state 147

    (98) exp_1 -> epsilon .

    <               reduce using rule 98 (exp_1 -> epsilon .)
    >               reduce using rule 98 (exp_1 -> epsilon .)
    EQUAL_TO        reduce using rule 98 (exp_1 -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 98 (exp_1 -> epsilon .)
    &               reduce using rule 98 (exp_1 -> epsilon .)
    |               reduce using rule 98 (exp_1 -> epsilon .)
    ;               reduce using rule 98 (exp_1 -> epsilon .)
    ,               reduce using rule 98 (exp_1 -> epsilon .)
    )               reduce using rule 98 (exp_1 -> epsilon .)
    TO              reduce using rule 98 (exp_1 -> epsilon .)
    DO              reduce using rule 98 (exp_1 -> epsilon .)


state 148

    (99) term -> factor term_1 .

    +               reduce using rule 99 (term -> factor term_1 .)
    -               reduce using rule 99 (term -> factor term_1 .)
    <               reduce using rule 99 (term -> factor term_1 .)
    >               reduce using rule 99 (term -> factor term_1 .)
    EQUAL_TO        reduce using rule 99 (term -> factor term_1 .)
    NOT_EQUAL_TO    reduce using rule 99 (term -> factor term_1 .)
    &               reduce using rule 99 (term -> factor term_1 .)
    |               reduce using rule 99 (term -> factor term_1 .)
    ;               reduce using rule 99 (term -> factor term_1 .)
    ,               reduce using rule 99 (term -> factor term_1 .)
    )               reduce using rule 99 (term -> factor term_1 .)
    TO              reduce using rule 99 (term -> factor term_1 .)
    DO              reduce using rule 99 (term -> factor term_1 .)


state 149

    (100) term_1 -> * . np_push_operator_stack factor
    (103) np_push_operator_stack -> . epsilon
    (116) epsilon -> .

    (               reduce using rule 116 (epsilon -> .)
    VAL_INT         reduce using rule 116 (epsilon -> .)
    VAL_FLOAT       reduce using rule 116 (epsilon -> .)
    VAL_CHAR        reduce using rule 116 (epsilon -> .)
    ID              reduce using rule 116 (epsilon -> .)

    np_push_operator_stack         shift and go to state 181
    epsilon                        shift and go to state 160

state 150

    (101) term_1 -> / . np_push_operator_stack factor
    (103) np_push_operator_stack -> . epsilon
    (116) epsilon -> .

    (               reduce using rule 116 (epsilon -> .)
    VAL_INT         reduce using rule 116 (epsilon -> .)
    VAL_FLOAT       reduce using rule 116 (epsilon -> .)
    VAL_CHAR        reduce using rule 116 (epsilon -> .)
    ID              reduce using rule 116 (epsilon -> .)

    np_push_operator_stack         shift and go to state 182
    epsilon                        shift and go to state 160

state 151

    (102) term_1 -> epsilon .

    +               reduce using rule 102 (term_1 -> epsilon .)
    -               reduce using rule 102 (term_1 -> epsilon .)
    <               reduce using rule 102 (term_1 -> epsilon .)
    >               reduce using rule 102 (term_1 -> epsilon .)
    EQUAL_TO        reduce using rule 102 (term_1 -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 102 (term_1 -> epsilon .)
    &               reduce using rule 102 (term_1 -> epsilon .)
    |               reduce using rule 102 (term_1 -> epsilon .)
    ;               reduce using rule 102 (term_1 -> epsilon .)
    ,               reduce using rule 102 (term_1 -> epsilon .)
    )               reduce using rule 102 (term_1 -> epsilon .)
    TO              reduce using rule 102 (term_1 -> epsilon .)
    DO              reduce using rule 102 (term_1 -> epsilon .)


state 152

    (107) factor -> ( hyper_exp . )

    )               shift and go to state 183


state 153

    (109) constant -> VAL_INT np_push_const_int .

    *               reduce using rule 109 (constant -> VAL_INT np_push_const_int .)
    /               reduce using rule 109 (constant -> VAL_INT np_push_const_int .)
    +               reduce using rule 109 (constant -> VAL_INT np_push_const_int .)
    -               reduce using rule 109 (constant -> VAL_INT np_push_const_int .)
    <               reduce using rule 109 (constant -> VAL_INT np_push_const_int .)
    >               reduce using rule 109 (constant -> VAL_INT np_push_const_int .)
    EQUAL_TO        reduce using rule 109 (constant -> VAL_INT np_push_const_int .)
    NOT_EQUAL_TO    reduce using rule 109 (constant -> VAL_INT np_push_const_int .)
    &               reduce using rule 109 (constant -> VAL_INT np_push_const_int .)
    |               reduce using rule 109 (constant -> VAL_INT np_push_const_int .)
    ;               reduce using rule 109 (constant -> VAL_INT np_push_const_int .)
    ,               reduce using rule 109 (constant -> VAL_INT np_push_const_int .)
    )               reduce using rule 109 (constant -> VAL_INT np_push_const_int .)
    TO              reduce using rule 109 (constant -> VAL_INT np_push_const_int .)
    DO              reduce using rule 109 (constant -> VAL_INT np_push_const_int .)


state 154

    (110) constant -> VAL_FLOAT np_push_const_float .

    *               reduce using rule 110 (constant -> VAL_FLOAT np_push_const_float .)
    /               reduce using rule 110 (constant -> VAL_FLOAT np_push_const_float .)
    +               reduce using rule 110 (constant -> VAL_FLOAT np_push_const_float .)
    -               reduce using rule 110 (constant -> VAL_FLOAT np_push_const_float .)
    <               reduce using rule 110 (constant -> VAL_FLOAT np_push_const_float .)
    >               reduce using rule 110 (constant -> VAL_FLOAT np_push_const_float .)
    EQUAL_TO        reduce using rule 110 (constant -> VAL_FLOAT np_push_const_float .)
    NOT_EQUAL_TO    reduce using rule 110 (constant -> VAL_FLOAT np_push_const_float .)
    &               reduce using rule 110 (constant -> VAL_FLOAT np_push_const_float .)
    |               reduce using rule 110 (constant -> VAL_FLOAT np_push_const_float .)
    ;               reduce using rule 110 (constant -> VAL_FLOAT np_push_const_float .)
    ,               reduce using rule 110 (constant -> VAL_FLOAT np_push_const_float .)
    )               reduce using rule 110 (constant -> VAL_FLOAT np_push_const_float .)
    TO              reduce using rule 110 (constant -> VAL_FLOAT np_push_const_float .)
    DO              reduce using rule 110 (constant -> VAL_FLOAT np_push_const_float .)


state 155

    (113) np_push_const_float -> epsilon .

    *               reduce using rule 113 (np_push_const_float -> epsilon .)
    /               reduce using rule 113 (np_push_const_float -> epsilon .)
    +               reduce using rule 113 (np_push_const_float -> epsilon .)
    -               reduce using rule 113 (np_push_const_float -> epsilon .)
    <               reduce using rule 113 (np_push_const_float -> epsilon .)
    >               reduce using rule 113 (np_push_const_float -> epsilon .)
    EQUAL_TO        reduce using rule 113 (np_push_const_float -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 113 (np_push_const_float -> epsilon .)
    &               reduce using rule 113 (np_push_const_float -> epsilon .)
    |               reduce using rule 113 (np_push_const_float -> epsilon .)
    ;               reduce using rule 113 (np_push_const_float -> epsilon .)
    ,               reduce using rule 113 (np_push_const_float -> epsilon .)
    )               reduce using rule 113 (np_push_const_float -> epsilon .)
    TO              reduce using rule 113 (np_push_const_float -> epsilon .)
    DO              reduce using rule 113 (np_push_const_float -> epsilon .)


state 156

    (111) constant -> VAL_CHAR np_push_const_char .

    *               reduce using rule 111 (constant -> VAL_CHAR np_push_const_char .)
    /               reduce using rule 111 (constant -> VAL_CHAR np_push_const_char .)
    +               reduce using rule 111 (constant -> VAL_CHAR np_push_const_char .)
    -               reduce using rule 111 (constant -> VAL_CHAR np_push_const_char .)
    <               reduce using rule 111 (constant -> VAL_CHAR np_push_const_char .)
    >               reduce using rule 111 (constant -> VAL_CHAR np_push_const_char .)
    EQUAL_TO        reduce using rule 111 (constant -> VAL_CHAR np_push_const_char .)
    NOT_EQUAL_TO    reduce using rule 111 (constant -> VAL_CHAR np_push_const_char .)
    &               reduce using rule 111 (constant -> VAL_CHAR np_push_const_char .)
    |               reduce using rule 111 (constant -> VAL_CHAR np_push_const_char .)
    ;               reduce using rule 111 (constant -> VAL_CHAR np_push_const_char .)
    ,               reduce using rule 111 (constant -> VAL_CHAR np_push_const_char .)
    )               reduce using rule 111 (constant -> VAL_CHAR np_push_const_char .)
    TO              reduce using rule 111 (constant -> VAL_CHAR np_push_const_char .)
    DO              reduce using rule 111 (constant -> VAL_CHAR np_push_const_char .)


state 157

    (114) np_push_const_char -> epsilon .

    *               reduce using rule 114 (np_push_const_char -> epsilon .)
    /               reduce using rule 114 (np_push_const_char -> epsilon .)
    +               reduce using rule 114 (np_push_const_char -> epsilon .)
    -               reduce using rule 114 (np_push_const_char -> epsilon .)
    <               reduce using rule 114 (np_push_const_char -> epsilon .)
    >               reduce using rule 114 (np_push_const_char -> epsilon .)
    EQUAL_TO        reduce using rule 114 (np_push_const_char -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 114 (np_push_const_char -> epsilon .)
    &               reduce using rule 114 (np_push_const_char -> epsilon .)
    |               reduce using rule 114 (np_push_const_char -> epsilon .)
    ;               reduce using rule 114 (np_push_const_char -> epsilon .)
    ,               reduce using rule 114 (np_push_const_char -> epsilon .)
    )               reduce using rule 114 (np_push_const_char -> epsilon .)
    TO              reduce using rule 114 (np_push_const_char -> epsilon .)
    DO              reduce using rule 114 (np_push_const_char -> epsilon .)


state 158

    (115) np_single_var_process -> epsilon .
    (52) np_fc_1 -> epsilon .

    *               reduce using rule 115 (np_single_var_process -> epsilon .)
    /               reduce using rule 115 (np_single_var_process -> epsilon .)
    +               reduce using rule 115 (np_single_var_process -> epsilon .)
    -               reduce using rule 115 (np_single_var_process -> epsilon .)
    <               reduce using rule 115 (np_single_var_process -> epsilon .)
    >               reduce using rule 115 (np_single_var_process -> epsilon .)
    EQUAL_TO        reduce using rule 115 (np_single_var_process -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 115 (np_single_var_process -> epsilon .)
    &               reduce using rule 115 (np_single_var_process -> epsilon .)
    |               reduce using rule 115 (np_single_var_process -> epsilon .)
    ;               reduce using rule 115 (np_single_var_process -> epsilon .)
    ,               reduce using rule 115 (np_single_var_process -> epsilon .)
    )               reduce using rule 115 (np_single_var_process -> epsilon .)
    TO              reduce using rule 115 (np_single_var_process -> epsilon .)
    DO              reduce using rule 115 (np_single_var_process -> epsilon .)
    (               reduce using rule 52 (np_fc_1 -> epsilon .)


state 159

    (51) func_llamada -> ID np_fc_1 ( np_push_operator_stack . argumento_loop ) np_pop_operator_stack
    (53) argumento_loop -> . hyper_exp np_fc_2 argumento_loop_1
    (54) argumento_loop -> . epsilon
    (85) hyper_exp -> . super_exp hyper_exp_1
    (116) epsilon -> .
    (89) super_exp -> . exp super_exp_1
    (95) exp -> . term exp_1
    (99) term -> . factor term_1
    (105) factor -> . constant
    (106) factor -> . variable
    (107) factor -> . ( hyper_exp )
    (108) factor -> . func_llamada
    (109) constant -> . VAL_INT np_push_const_int
    (110) constant -> . VAL_FLOAT np_push_const_float
    (111) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    )               reduce using rule 116 (epsilon -> .)
    (               shift and go to state 110
    VAL_INT         shift and go to state 112
    VAL_FLOAT       shift and go to state 113
    VAL_CHAR        shift and go to state 114
    ID              shift and go to state 115

    argumento_loop                 shift and go to state 184
    hyper_exp                      shift and go to state 185
    epsilon                        shift and go to state 186
    super_exp                      shift and go to state 105
    exp                            shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    constant                       shift and go to state 109
    variable                       shift and go to state 103
    func_llamada                   shift and go to state 111

state 160

    (103) np_push_operator_stack -> epsilon .

    (               reduce using rule 103 (np_push_operator_stack -> epsilon .)
    VAL_INT         reduce using rule 103 (np_push_operator_stack -> epsilon .)
    VAL_FLOAT       reduce using rule 103 (np_push_operator_stack -> epsilon .)
    VAL_CHAR        reduce using rule 103 (np_push_operator_stack -> epsilon .)
    ID              reduce using rule 103 (np_push_operator_stack -> epsilon .)
    )               reduce using rule 103 (np_push_operator_stack -> epsilon .)


state 161

    (62) read -> READ ( variable_loop ) . ;

    ;               shift and go to state 187


state 162

    (63) variable_loop -> variable np_add_to_input_counter . variable_loop_1
    (64) variable_loop_1 -> . , variable np_add_to_input_counter variable_loop_1
    (65) variable_loop_1 -> . epsilon
    (116) epsilon -> .

    ,               shift and go to state 189
    )               reduce using rule 116 (epsilon -> .)

    variable_loop_1                shift and go to state 188
    epsilon                        shift and go to state 190

state 163

    (66) np_add_to_input_counter -> epsilon .

    ,               reduce using rule 66 (np_add_to_input_counter -> epsilon .)
    )               reduce using rule 66 (np_add_to_input_counter -> epsilon .)


state 164

    (67) write -> WRITE ( hyper_exp_loop ) . ;

    ;               shift and go to state 191


state 165

    (57) hyper_exp_loop -> hyper_exp np_add_to_input_counter . hyper_exp_loop_1
    (58) hyper_exp_loop_1 -> . , hyper_exp np_add_to_input_counter hyper_exp_loop_1
    (59) hyper_exp_loop_1 -> . epsilon
    (116) epsilon -> .

    ,               shift and go to state 193
    )               reduce using rule 116 (epsilon -> .)

    hyper_exp_loop_1               shift and go to state 192
    epsilon                        shift and go to state 194

state 166

    (68) decision -> IF ( hyper_exp ) . np_decision_1 THEN { loop_estatuto } decision_else
    (71) np_decision_1 -> . epsilon
    (116) epsilon -> .

    THEN            reduce using rule 116 (epsilon -> .)

    np_decision_1                  shift and go to state 195
    epsilon                        shift and go to state 196

state 167

    (61) func_return -> RETURN ( hyper_exp ) . ;

    ;               shift and go to state 197


state 168

    (77) condicional -> WHILE np_cond_1 ( hyper_exp . ) np_cond_2 DO { loop_estatuto } np_cond_3

    )               shift and go to state 198


state 169

    (81) no_condicional -> FOR variable = hyper_exp . np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }
    (82) np_for_1 -> . epsilon
    (116) epsilon -> .

    TO              reduce using rule 116 (epsilon -> .)

    np_for_1                       shift and go to state 199
    epsilon                        shift and go to state 200

state 170

    (24) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) . ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func

    ;               shift and go to state 201


state 171

    (35) parametro -> tipo ID . np_add_param loop_parametro
    (38) np_add_param -> . epsilon
    (116) epsilon -> .

    ,               reduce using rule 116 (epsilon -> .)
    )               reduce using rule 116 (epsilon -> .)

    np_add_param                   shift and go to state 202
    epsilon                        shift and go to state 203

state 172

    (17) loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name . array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo
    (15) array_opcional -> . [ VAL_INT np_push_const_int ]
    (16) array_opcional -> . epsilon
    (116) epsilon -> .

    [               shift and go to state 53
    ,               reduce using rule 116 (epsilon -> .)
    ;               reduce using rule 116 (epsilon -> .)

    array_opcional                 shift and go to state 204
    epsilon                        shift and go to state 54

state 173

    (86) hyper_exp_1 -> & np_push_operator_stack . super_exp
    (89) super_exp -> . exp super_exp_1
    (95) exp -> . term exp_1
    (99) term -> . factor term_1
    (105) factor -> . constant
    (106) factor -> . variable
    (107) factor -> . ( hyper_exp )
    (108) factor -> . func_llamada
    (109) constant -> . VAL_INT np_push_const_int
    (110) constant -> . VAL_FLOAT np_push_const_float
    (111) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 110
    VAL_INT         shift and go to state 112
    VAL_FLOAT       shift and go to state 113
    VAL_CHAR        shift and go to state 114
    ID              shift and go to state 115

    super_exp                      shift and go to state 205
    exp                            shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    constant                       shift and go to state 109
    variable                       shift and go to state 103
    func_llamada                   shift and go to state 111

state 174

    (87) hyper_exp_1 -> | np_push_operator_stack . super_exp
    (89) super_exp -> . exp super_exp_1
    (95) exp -> . term exp_1
    (99) term -> . factor term_1
    (105) factor -> . constant
    (106) factor -> . variable
    (107) factor -> . ( hyper_exp )
    (108) factor -> . func_llamada
    (109) constant -> . VAL_INT np_push_const_int
    (110) constant -> . VAL_FLOAT np_push_const_float
    (111) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 110
    VAL_INT         shift and go to state 112
    VAL_FLOAT       shift and go to state 113
    VAL_CHAR        shift and go to state 114
    ID              shift and go to state 115

    super_exp                      shift and go to state 206
    exp                            shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    constant                       shift and go to state 109
    variable                       shift and go to state 103
    func_llamada                   shift and go to state 111

state 175

    (90) super_exp_1 -> < np_push_operator_stack . exp
    (95) exp -> . term exp_1
    (99) term -> . factor term_1
    (105) factor -> . constant
    (106) factor -> . variable
    (107) factor -> . ( hyper_exp )
    (108) factor -> . func_llamada
    (109) constant -> . VAL_INT np_push_const_int
    (110) constant -> . VAL_FLOAT np_push_const_float
    (111) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 110
    VAL_INT         shift and go to state 112
    VAL_FLOAT       shift and go to state 113
    VAL_CHAR        shift and go to state 114
    ID              shift and go to state 115

    exp                            shift and go to state 207
    term                           shift and go to state 107
    factor                         shift and go to state 108
    constant                       shift and go to state 109
    variable                       shift and go to state 103
    func_llamada                   shift and go to state 111

state 176

    (91) super_exp_1 -> > np_push_operator_stack . exp
    (95) exp -> . term exp_1
    (99) term -> . factor term_1
    (105) factor -> . constant
    (106) factor -> . variable
    (107) factor -> . ( hyper_exp )
    (108) factor -> . func_llamada
    (109) constant -> . VAL_INT np_push_const_int
    (110) constant -> . VAL_FLOAT np_push_const_float
    (111) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 110
    VAL_INT         shift and go to state 112
    VAL_FLOAT       shift and go to state 113
    VAL_CHAR        shift and go to state 114
    ID              shift and go to state 115

    exp                            shift and go to state 208
    term                           shift and go to state 107
    factor                         shift and go to state 108
    constant                       shift and go to state 109
    variable                       shift and go to state 103
    func_llamada                   shift and go to state 111

state 177

    (92) super_exp_1 -> EQUAL_TO np_push_operator_stack . exp
    (95) exp -> . term exp_1
    (99) term -> . factor term_1
    (105) factor -> . constant
    (106) factor -> . variable
    (107) factor -> . ( hyper_exp )
    (108) factor -> . func_llamada
    (109) constant -> . VAL_INT np_push_const_int
    (110) constant -> . VAL_FLOAT np_push_const_float
    (111) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 110
    VAL_INT         shift and go to state 112
    VAL_FLOAT       shift and go to state 113
    VAL_CHAR        shift and go to state 114
    ID              shift and go to state 115

    exp                            shift and go to state 209
    term                           shift and go to state 107
    factor                         shift and go to state 108
    constant                       shift and go to state 109
    variable                       shift and go to state 103
    func_llamada                   shift and go to state 111

state 178

    (93) super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack . exp
    (95) exp -> . term exp_1
    (99) term -> . factor term_1
    (105) factor -> . constant
    (106) factor -> . variable
    (107) factor -> . ( hyper_exp )
    (108) factor -> . func_llamada
    (109) constant -> . VAL_INT np_push_const_int
    (110) constant -> . VAL_FLOAT np_push_const_float
    (111) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 110
    VAL_INT         shift and go to state 112
    VAL_FLOAT       shift and go to state 113
    VAL_CHAR        shift and go to state 114
    ID              shift and go to state 115

    exp                            shift and go to state 210
    term                           shift and go to state 107
    factor                         shift and go to state 108
    constant                       shift and go to state 109
    variable                       shift and go to state 103
    func_llamada                   shift and go to state 111

state 179

    (96) exp_1 -> + np_push_operator_stack . term
    (99) term -> . factor term_1
    (105) factor -> . constant
    (106) factor -> . variable
    (107) factor -> . ( hyper_exp )
    (108) factor -> . func_llamada
    (109) constant -> . VAL_INT np_push_const_int
    (110) constant -> . VAL_FLOAT np_push_const_float
    (111) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 110
    VAL_INT         shift and go to state 112
    VAL_FLOAT       shift and go to state 113
    VAL_CHAR        shift and go to state 114
    ID              shift and go to state 115

    term                           shift and go to state 211
    factor                         shift and go to state 108
    constant                       shift and go to state 109
    variable                       shift and go to state 103
    func_llamada                   shift and go to state 111

state 180

    (97) exp_1 -> - np_push_operator_stack . term
    (99) term -> . factor term_1
    (105) factor -> . constant
    (106) factor -> . variable
    (107) factor -> . ( hyper_exp )
    (108) factor -> . func_llamada
    (109) constant -> . VAL_INT np_push_const_int
    (110) constant -> . VAL_FLOAT np_push_const_float
    (111) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 110
    VAL_INT         shift and go to state 112
    VAL_FLOAT       shift and go to state 113
    VAL_CHAR        shift and go to state 114
    ID              shift and go to state 115

    term                           shift and go to state 212
    factor                         shift and go to state 108
    constant                       shift and go to state 109
    variable                       shift and go to state 103
    func_llamada                   shift and go to state 111

state 181

    (100) term_1 -> * np_push_operator_stack . factor
    (105) factor -> . constant
    (106) factor -> . variable
    (107) factor -> . ( hyper_exp )
    (108) factor -> . func_llamada
    (109) constant -> . VAL_INT np_push_const_int
    (110) constant -> . VAL_FLOAT np_push_const_float
    (111) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 110
    VAL_INT         shift and go to state 112
    VAL_FLOAT       shift and go to state 113
    VAL_CHAR        shift and go to state 114
    ID              shift and go to state 115

    factor                         shift and go to state 213
    constant                       shift and go to state 109
    variable                       shift and go to state 103
    func_llamada                   shift and go to state 111

state 182

    (101) term_1 -> / np_push_operator_stack . factor
    (105) factor -> . constant
    (106) factor -> . variable
    (107) factor -> . ( hyper_exp )
    (108) factor -> . func_llamada
    (109) constant -> . VAL_INT np_push_const_int
    (110) constant -> . VAL_FLOAT np_push_const_float
    (111) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 110
    VAL_INT         shift and go to state 112
    VAL_FLOAT       shift and go to state 113
    VAL_CHAR        shift and go to state 114
    ID              shift and go to state 115

    factor                         shift and go to state 214
    constant                       shift and go to state 109
    variable                       shift and go to state 103
    func_llamada                   shift and go to state 111

state 183

    (107) factor -> ( hyper_exp ) .

    *               reduce using rule 107 (factor -> ( hyper_exp ) .)
    /               reduce using rule 107 (factor -> ( hyper_exp ) .)
    +               reduce using rule 107 (factor -> ( hyper_exp ) .)
    -               reduce using rule 107 (factor -> ( hyper_exp ) .)
    <               reduce using rule 107 (factor -> ( hyper_exp ) .)
    >               reduce using rule 107 (factor -> ( hyper_exp ) .)
    EQUAL_TO        reduce using rule 107 (factor -> ( hyper_exp ) .)
    NOT_EQUAL_TO    reduce using rule 107 (factor -> ( hyper_exp ) .)
    &               reduce using rule 107 (factor -> ( hyper_exp ) .)
    |               reduce using rule 107 (factor -> ( hyper_exp ) .)
    ;               reduce using rule 107 (factor -> ( hyper_exp ) .)
    ,               reduce using rule 107 (factor -> ( hyper_exp ) .)
    )               reduce using rule 107 (factor -> ( hyper_exp ) .)
    TO              reduce using rule 107 (factor -> ( hyper_exp ) .)
    DO              reduce using rule 107 (factor -> ( hyper_exp ) .)


state 184

    (51) func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop . ) np_pop_operator_stack

    )               shift and go to state 215


state 185

    (53) argumento_loop -> hyper_exp . np_fc_2 argumento_loop_1
    (60) np_fc_2 -> . epsilon
    (116) epsilon -> .

    ,               reduce using rule 116 (epsilon -> .)
    )               reduce using rule 116 (epsilon -> .)

    np_fc_2                        shift and go to state 216
    epsilon                        shift and go to state 217

state 186

    (54) argumento_loop -> epsilon .

    )               reduce using rule 54 (argumento_loop -> epsilon .)


state 187

    (62) read -> READ ( variable_loop ) ; .

    ID              reduce using rule 62 (read -> READ ( variable_loop ) ; .)
    READ            reduce using rule 62 (read -> READ ( variable_loop ) ; .)
    WRITE           reduce using rule 62 (read -> READ ( variable_loop ) ; .)
    IF              reduce using rule 62 (read -> READ ( variable_loop ) ; .)
    RETURN          reduce using rule 62 (read -> READ ( variable_loop ) ; .)
    WHILE           reduce using rule 62 (read -> READ ( variable_loop ) ; .)
    FOR             reduce using rule 62 (read -> READ ( variable_loop ) ; .)
    }               reduce using rule 62 (read -> READ ( variable_loop ) ; .)


state 188

    (63) variable_loop -> variable np_add_to_input_counter variable_loop_1 .

    )               reduce using rule 63 (variable_loop -> variable np_add_to_input_counter variable_loop_1 .)


state 189

    (64) variable_loop_1 -> , . variable np_add_to_input_counter variable_loop_1
    (9) variable -> . ID np_single_var_process

    ID              shift and go to state 93

    variable                       shift and go to state 218

state 190

    (65) variable_loop_1 -> epsilon .

    )               reduce using rule 65 (variable_loop_1 -> epsilon .)


state 191

    (67) write -> WRITE ( hyper_exp_loop ) ; .

    ID              reduce using rule 67 (write -> WRITE ( hyper_exp_loop ) ; .)
    READ            reduce using rule 67 (write -> WRITE ( hyper_exp_loop ) ; .)
    WRITE           reduce using rule 67 (write -> WRITE ( hyper_exp_loop ) ; .)
    IF              reduce using rule 67 (write -> WRITE ( hyper_exp_loop ) ; .)
    RETURN          reduce using rule 67 (write -> WRITE ( hyper_exp_loop ) ; .)
    WHILE           reduce using rule 67 (write -> WRITE ( hyper_exp_loop ) ; .)
    FOR             reduce using rule 67 (write -> WRITE ( hyper_exp_loop ) ; .)
    }               reduce using rule 67 (write -> WRITE ( hyper_exp_loop ) ; .)


state 192

    (57) hyper_exp_loop -> hyper_exp np_add_to_input_counter hyper_exp_loop_1 .

    )               reduce using rule 57 (hyper_exp_loop -> hyper_exp np_add_to_input_counter hyper_exp_loop_1 .)


state 193

    (58) hyper_exp_loop_1 -> , . hyper_exp np_add_to_input_counter hyper_exp_loop_1
    (85) hyper_exp -> . super_exp hyper_exp_1
    (89) super_exp -> . exp super_exp_1
    (95) exp -> . term exp_1
    (99) term -> . factor term_1
    (105) factor -> . constant
    (106) factor -> . variable
    (107) factor -> . ( hyper_exp )
    (108) factor -> . func_llamada
    (109) constant -> . VAL_INT np_push_const_int
    (110) constant -> . VAL_FLOAT np_push_const_float
    (111) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 110
    VAL_INT         shift and go to state 112
    VAL_FLOAT       shift and go to state 113
    VAL_CHAR        shift and go to state 114
    ID              shift and go to state 115

    hyper_exp                      shift and go to state 219
    super_exp                      shift and go to state 105
    exp                            shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    constant                       shift and go to state 109
    variable                       shift and go to state 103
    func_llamada                   shift and go to state 111

state 194

    (59) hyper_exp_loop_1 -> epsilon .

    )               reduce using rule 59 (hyper_exp_loop_1 -> epsilon .)


state 195

    (68) decision -> IF ( hyper_exp ) np_decision_1 . THEN { loop_estatuto } decision_else

    THEN            shift and go to state 220


state 196

    (71) np_decision_1 -> epsilon .

    THEN            reduce using rule 71 (np_decision_1 -> epsilon .)


state 197

    (61) func_return -> RETURN ( hyper_exp ) ; .

    ID              reduce using rule 61 (func_return -> RETURN ( hyper_exp ) ; .)
    READ            reduce using rule 61 (func_return -> RETURN ( hyper_exp ) ; .)
    WRITE           reduce using rule 61 (func_return -> RETURN ( hyper_exp ) ; .)
    IF              reduce using rule 61 (func_return -> RETURN ( hyper_exp ) ; .)
    RETURN          reduce using rule 61 (func_return -> RETURN ( hyper_exp ) ; .)
    WHILE           reduce using rule 61 (func_return -> RETURN ( hyper_exp ) ; .)
    FOR             reduce using rule 61 (func_return -> RETURN ( hyper_exp ) ; .)
    }               reduce using rule 61 (func_return -> RETURN ( hyper_exp ) ; .)


state 198

    (77) condicional -> WHILE np_cond_1 ( hyper_exp ) . np_cond_2 DO { loop_estatuto } np_cond_3
    (79) np_cond_2 -> . epsilon
    (116) epsilon -> .

    DO              reduce using rule 116 (epsilon -> .)

    np_cond_2                      shift and go to state 221
    epsilon                        shift and go to state 222

state 199

    (81) no_condicional -> FOR variable = hyper_exp np_for_1 . TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    TO              shift and go to state 223


state 200

    (82) np_for_1 -> epsilon .

    TO              reduce using rule 82 (np_for_1 -> epsilon .)


state 201

    (24) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; . var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (7) var_opcional -> . var_declaracion
    (8) var_opcional -> . epsilon
    (10) var_declaracion -> . VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion
    (116) epsilon -> .

    VARS            shift and go to state 12
    {               reduce using rule 116 (epsilon -> .)

    var_opcional                   shift and go to state 224
    var_declaracion                shift and go to state 10
    epsilon                        shift and go to state 11

state 202

    (35) parametro -> tipo ID np_add_param . loop_parametro
    (36) loop_parametro -> . , tipo ID np_add_param loop_parametro
    (37) loop_parametro -> . epsilon
    (116) epsilon -> .

    ,               shift and go to state 226
    )               reduce using rule 116 (epsilon -> .)

    loop_parametro                 shift and go to state 225
    epsilon                        shift and go to state 227

state 203

    (38) np_add_param -> epsilon .

    ,               reduce using rule 38 (np_add_param -> epsilon .)
    )               reduce using rule 38 (np_add_param -> epsilon .)


state 204

    (17) loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name array_opcional . np_add_var_to_varstable loop_var_decl_mismo_tipo
    (21) np_add_var_to_varstable -> . epsilon
    (116) epsilon -> .

    ,               reduce using rule 116 (epsilon -> .)
    ;               reduce using rule 116 (epsilon -> .)

    np_add_var_to_varstable        shift and go to state 228
    epsilon                        shift and go to state 77

state 205

    (86) hyper_exp_1 -> & np_push_operator_stack super_exp .

    ;               reduce using rule 86 (hyper_exp_1 -> & np_push_operator_stack super_exp .)
    ,               reduce using rule 86 (hyper_exp_1 -> & np_push_operator_stack super_exp .)
    )               reduce using rule 86 (hyper_exp_1 -> & np_push_operator_stack super_exp .)
    TO              reduce using rule 86 (hyper_exp_1 -> & np_push_operator_stack super_exp .)
    DO              reduce using rule 86 (hyper_exp_1 -> & np_push_operator_stack super_exp .)


state 206

    (87) hyper_exp_1 -> | np_push_operator_stack super_exp .

    ;               reduce using rule 87 (hyper_exp_1 -> | np_push_operator_stack super_exp .)
    ,               reduce using rule 87 (hyper_exp_1 -> | np_push_operator_stack super_exp .)
    )               reduce using rule 87 (hyper_exp_1 -> | np_push_operator_stack super_exp .)
    TO              reduce using rule 87 (hyper_exp_1 -> | np_push_operator_stack super_exp .)
    DO              reduce using rule 87 (hyper_exp_1 -> | np_push_operator_stack super_exp .)


state 207

    (90) super_exp_1 -> < np_push_operator_stack exp .

    &               reduce using rule 90 (super_exp_1 -> < np_push_operator_stack exp .)
    |               reduce using rule 90 (super_exp_1 -> < np_push_operator_stack exp .)
    ;               reduce using rule 90 (super_exp_1 -> < np_push_operator_stack exp .)
    ,               reduce using rule 90 (super_exp_1 -> < np_push_operator_stack exp .)
    )               reduce using rule 90 (super_exp_1 -> < np_push_operator_stack exp .)
    TO              reduce using rule 90 (super_exp_1 -> < np_push_operator_stack exp .)
    DO              reduce using rule 90 (super_exp_1 -> < np_push_operator_stack exp .)


state 208

    (91) super_exp_1 -> > np_push_operator_stack exp .

    &               reduce using rule 91 (super_exp_1 -> > np_push_operator_stack exp .)
    |               reduce using rule 91 (super_exp_1 -> > np_push_operator_stack exp .)
    ;               reduce using rule 91 (super_exp_1 -> > np_push_operator_stack exp .)
    ,               reduce using rule 91 (super_exp_1 -> > np_push_operator_stack exp .)
    )               reduce using rule 91 (super_exp_1 -> > np_push_operator_stack exp .)
    TO              reduce using rule 91 (super_exp_1 -> > np_push_operator_stack exp .)
    DO              reduce using rule 91 (super_exp_1 -> > np_push_operator_stack exp .)


state 209

    (92) super_exp_1 -> EQUAL_TO np_push_operator_stack exp .

    &               reduce using rule 92 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    |               reduce using rule 92 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    ;               reduce using rule 92 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    ,               reduce using rule 92 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    )               reduce using rule 92 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    TO              reduce using rule 92 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    DO              reduce using rule 92 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)


state 210

    (93) super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .

    &               reduce using rule 93 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    |               reduce using rule 93 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    ;               reduce using rule 93 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    ,               reduce using rule 93 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    )               reduce using rule 93 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    TO              reduce using rule 93 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    DO              reduce using rule 93 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)


state 211

    (96) exp_1 -> + np_push_operator_stack term .

    <               reduce using rule 96 (exp_1 -> + np_push_operator_stack term .)
    >               reduce using rule 96 (exp_1 -> + np_push_operator_stack term .)
    EQUAL_TO        reduce using rule 96 (exp_1 -> + np_push_operator_stack term .)
    NOT_EQUAL_TO    reduce using rule 96 (exp_1 -> + np_push_operator_stack term .)
    &               reduce using rule 96 (exp_1 -> + np_push_operator_stack term .)
    |               reduce using rule 96 (exp_1 -> + np_push_operator_stack term .)
    ;               reduce using rule 96 (exp_1 -> + np_push_operator_stack term .)
    ,               reduce using rule 96 (exp_1 -> + np_push_operator_stack term .)
    )               reduce using rule 96 (exp_1 -> + np_push_operator_stack term .)
    TO              reduce using rule 96 (exp_1 -> + np_push_operator_stack term .)
    DO              reduce using rule 96 (exp_1 -> + np_push_operator_stack term .)


state 212

    (97) exp_1 -> - np_push_operator_stack term .

    <               reduce using rule 97 (exp_1 -> - np_push_operator_stack term .)
    >               reduce using rule 97 (exp_1 -> - np_push_operator_stack term .)
    EQUAL_TO        reduce using rule 97 (exp_1 -> - np_push_operator_stack term .)
    NOT_EQUAL_TO    reduce using rule 97 (exp_1 -> - np_push_operator_stack term .)
    &               reduce using rule 97 (exp_1 -> - np_push_operator_stack term .)
    |               reduce using rule 97 (exp_1 -> - np_push_operator_stack term .)
    ;               reduce using rule 97 (exp_1 -> - np_push_operator_stack term .)
    ,               reduce using rule 97 (exp_1 -> - np_push_operator_stack term .)
    )               reduce using rule 97 (exp_1 -> - np_push_operator_stack term .)
    TO              reduce using rule 97 (exp_1 -> - np_push_operator_stack term .)
    DO              reduce using rule 97 (exp_1 -> - np_push_operator_stack term .)


state 213

    (100) term_1 -> * np_push_operator_stack factor .

    +               reduce using rule 100 (term_1 -> * np_push_operator_stack factor .)
    -               reduce using rule 100 (term_1 -> * np_push_operator_stack factor .)
    <               reduce using rule 100 (term_1 -> * np_push_operator_stack factor .)
    >               reduce using rule 100 (term_1 -> * np_push_operator_stack factor .)
    EQUAL_TO        reduce using rule 100 (term_1 -> * np_push_operator_stack factor .)
    NOT_EQUAL_TO    reduce using rule 100 (term_1 -> * np_push_operator_stack factor .)
    &               reduce using rule 100 (term_1 -> * np_push_operator_stack factor .)
    |               reduce using rule 100 (term_1 -> * np_push_operator_stack factor .)
    ;               reduce using rule 100 (term_1 -> * np_push_operator_stack factor .)
    ,               reduce using rule 100 (term_1 -> * np_push_operator_stack factor .)
    )               reduce using rule 100 (term_1 -> * np_push_operator_stack factor .)
    TO              reduce using rule 100 (term_1 -> * np_push_operator_stack factor .)
    DO              reduce using rule 100 (term_1 -> * np_push_operator_stack factor .)


state 214

    (101) term_1 -> / np_push_operator_stack factor .

    +               reduce using rule 101 (term_1 -> / np_push_operator_stack factor .)
    -               reduce using rule 101 (term_1 -> / np_push_operator_stack factor .)
    <               reduce using rule 101 (term_1 -> / np_push_operator_stack factor .)
    >               reduce using rule 101 (term_1 -> / np_push_operator_stack factor .)
    EQUAL_TO        reduce using rule 101 (term_1 -> / np_push_operator_stack factor .)
    NOT_EQUAL_TO    reduce using rule 101 (term_1 -> / np_push_operator_stack factor .)
    &               reduce using rule 101 (term_1 -> / np_push_operator_stack factor .)
    |               reduce using rule 101 (term_1 -> / np_push_operator_stack factor .)
    ;               reduce using rule 101 (term_1 -> / np_push_operator_stack factor .)
    ,               reduce using rule 101 (term_1 -> / np_push_operator_stack factor .)
    )               reduce using rule 101 (term_1 -> / np_push_operator_stack factor .)
    TO              reduce using rule 101 (term_1 -> / np_push_operator_stack factor .)
    DO              reduce using rule 101 (term_1 -> / np_push_operator_stack factor .)


state 215

    (51) func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) . np_pop_operator_stack
    (104) np_pop_operator_stack -> . epsilon
    (116) epsilon -> .

    ;               reduce using rule 116 (epsilon -> .)
    *               reduce using rule 116 (epsilon -> .)
    /               reduce using rule 116 (epsilon -> .)
    +               reduce using rule 116 (epsilon -> .)
    -               reduce using rule 116 (epsilon -> .)
    <               reduce using rule 116 (epsilon -> .)
    >               reduce using rule 116 (epsilon -> .)
    EQUAL_TO        reduce using rule 116 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 116 (epsilon -> .)
    &               reduce using rule 116 (epsilon -> .)
    |               reduce using rule 116 (epsilon -> .)
    ,               reduce using rule 116 (epsilon -> .)
    )               reduce using rule 116 (epsilon -> .)
    TO              reduce using rule 116 (epsilon -> .)
    DO              reduce using rule 116 (epsilon -> .)

    np_pop_operator_stack          shift and go to state 229
    epsilon                        shift and go to state 230

state 216

    (53) argumento_loop -> hyper_exp np_fc_2 . argumento_loop_1
    (55) argumento_loop_1 -> . , hyper_exp np_fc_2 argumento_loop_1
    (56) argumento_loop_1 -> . epsilon
    (116) epsilon -> .

    ,               shift and go to state 232
    )               reduce using rule 116 (epsilon -> .)

    argumento_loop_1               shift and go to state 231
    epsilon                        shift and go to state 233

state 217

    (60) np_fc_2 -> epsilon .

    ,               reduce using rule 60 (np_fc_2 -> epsilon .)
    )               reduce using rule 60 (np_fc_2 -> epsilon .)


state 218

    (64) variable_loop_1 -> , variable . np_add_to_input_counter variable_loop_1
    (66) np_add_to_input_counter -> . epsilon
    (116) epsilon -> .

    ,               reduce using rule 116 (epsilon -> .)
    )               reduce using rule 116 (epsilon -> .)

    np_add_to_input_counter        shift and go to state 234
    epsilon                        shift and go to state 163

state 219

    (58) hyper_exp_loop_1 -> , hyper_exp . np_add_to_input_counter hyper_exp_loop_1
    (66) np_add_to_input_counter -> . epsilon
    (116) epsilon -> .

    ,               reduce using rule 116 (epsilon -> .)
    )               reduce using rule 116 (epsilon -> .)

    np_add_to_input_counter        shift and go to state 235
    epsilon                        shift and go to state 163

state 220

    (68) decision -> IF ( hyper_exp ) np_decision_1 THEN . { loop_estatuto } decision_else

    {               shift and go to state 236


state 221

    (77) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 . DO { loop_estatuto } np_cond_3

    DO              shift and go to state 237


state 222

    (79) np_cond_2 -> epsilon .

    DO              reduce using rule 79 (np_cond_2 -> epsilon .)


state 223

    (81) no_condicional -> FOR variable = hyper_exp np_for_1 TO . hyper_exp np_for_2 DO np_for_3 { loop_estatuto }
    (85) hyper_exp -> . super_exp hyper_exp_1
    (89) super_exp -> . exp super_exp_1
    (95) exp -> . term exp_1
    (99) term -> . factor term_1
    (105) factor -> . constant
    (106) factor -> . variable
    (107) factor -> . ( hyper_exp )
    (108) factor -> . func_llamada
    (109) constant -> . VAL_INT np_push_const_int
    (110) constant -> . VAL_FLOAT np_push_const_float
    (111) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 110
    VAL_INT         shift and go to state 112
    VAL_FLOAT       shift and go to state 113
    VAL_CHAR        shift and go to state 114
    ID              shift and go to state 115

    variable                       shift and go to state 103
    hyper_exp                      shift and go to state 238
    super_exp                      shift and go to state 105
    exp                            shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    constant                       shift and go to state 109
    func_llamada                   shift and go to state 111

state 224

    (24) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional . np_save_curr_func_quad { loop_estatuto } np_kill_func
    (30) np_save_curr_func_quad -> . epsilon
    (116) epsilon -> .

    {               reduce using rule 116 (epsilon -> .)

    np_save_curr_func_quad         shift and go to state 239
    epsilon                        shift and go to state 240

state 225

    (35) parametro -> tipo ID np_add_param loop_parametro .

    )               reduce using rule 35 (parametro -> tipo ID np_add_param loop_parametro .)


state 226

    (36) loop_parametro -> , . tipo ID np_add_param loop_parametro
    (39) tipo -> . INT
    (40) tipo -> . FLOAT
    (41) tipo -> . CHAR
    (42) tipo -> . BOOL

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOL            shift and go to state 28

    tipo                           shift and go to state 241

state 227

    (37) loop_parametro -> epsilon .

    )               reduce using rule 37 (loop_parametro -> epsilon .)


state 228

    (17) loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name array_opcional np_add_var_to_varstable . loop_var_decl_mismo_tipo
    (17) loop_var_decl_mismo_tipo -> . , ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo
    (18) loop_var_decl_mismo_tipo -> . epsilon
    (116) epsilon -> .

    ,               shift and go to state 97
    ;               reduce using rule 116 (epsilon -> .)

    loop_var_decl_mismo_tipo       shift and go to state 242
    epsilon                        shift and go to state 98

state 229

    (51) func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .

    ;               reduce using rule 51 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    *               reduce using rule 51 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    /               reduce using rule 51 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    +               reduce using rule 51 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    -               reduce using rule 51 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    <               reduce using rule 51 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    >               reduce using rule 51 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    EQUAL_TO        reduce using rule 51 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    NOT_EQUAL_TO    reduce using rule 51 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    &               reduce using rule 51 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    |               reduce using rule 51 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    ,               reduce using rule 51 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    )               reduce using rule 51 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    TO              reduce using rule 51 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    DO              reduce using rule 51 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)


state 230

    (104) np_pop_operator_stack -> epsilon .

    ;               reduce using rule 104 (np_pop_operator_stack -> epsilon .)
    *               reduce using rule 104 (np_pop_operator_stack -> epsilon .)
    /               reduce using rule 104 (np_pop_operator_stack -> epsilon .)
    +               reduce using rule 104 (np_pop_operator_stack -> epsilon .)
    -               reduce using rule 104 (np_pop_operator_stack -> epsilon .)
    <               reduce using rule 104 (np_pop_operator_stack -> epsilon .)
    >               reduce using rule 104 (np_pop_operator_stack -> epsilon .)
    EQUAL_TO        reduce using rule 104 (np_pop_operator_stack -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 104 (np_pop_operator_stack -> epsilon .)
    &               reduce using rule 104 (np_pop_operator_stack -> epsilon .)
    |               reduce using rule 104 (np_pop_operator_stack -> epsilon .)
    ,               reduce using rule 104 (np_pop_operator_stack -> epsilon .)
    )               reduce using rule 104 (np_pop_operator_stack -> epsilon .)
    TO              reduce using rule 104 (np_pop_operator_stack -> epsilon .)
    DO              reduce using rule 104 (np_pop_operator_stack -> epsilon .)


state 231

    (53) argumento_loop -> hyper_exp np_fc_2 argumento_loop_1 .

    )               reduce using rule 53 (argumento_loop -> hyper_exp np_fc_2 argumento_loop_1 .)


state 232

    (55) argumento_loop_1 -> , . hyper_exp np_fc_2 argumento_loop_1
    (85) hyper_exp -> . super_exp hyper_exp_1
    (89) super_exp -> . exp super_exp_1
    (95) exp -> . term exp_1
    (99) term -> . factor term_1
    (105) factor -> . constant
    (106) factor -> . variable
    (107) factor -> . ( hyper_exp )
    (108) factor -> . func_llamada
    (109) constant -> . VAL_INT np_push_const_int
    (110) constant -> . VAL_FLOAT np_push_const_float
    (111) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 110
    VAL_INT         shift and go to state 112
    VAL_FLOAT       shift and go to state 113
    VAL_CHAR        shift and go to state 114
    ID              shift and go to state 115

    hyper_exp                      shift and go to state 243
    super_exp                      shift and go to state 105
    exp                            shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    constant                       shift and go to state 109
    variable                       shift and go to state 103
    func_llamada                   shift and go to state 111

state 233

    (56) argumento_loop_1 -> epsilon .

    )               reduce using rule 56 (argumento_loop_1 -> epsilon .)


state 234

    (64) variable_loop_1 -> , variable np_add_to_input_counter . variable_loop_1
    (64) variable_loop_1 -> . , variable np_add_to_input_counter variable_loop_1
    (65) variable_loop_1 -> . epsilon
    (116) epsilon -> .

    ,               shift and go to state 189
    )               reduce using rule 116 (epsilon -> .)

    variable_loop_1                shift and go to state 244
    epsilon                        shift and go to state 190

state 235

    (58) hyper_exp_loop_1 -> , hyper_exp np_add_to_input_counter . hyper_exp_loop_1
    (58) hyper_exp_loop_1 -> . , hyper_exp np_add_to_input_counter hyper_exp_loop_1
    (59) hyper_exp_loop_1 -> . epsilon
    (116) epsilon -> .

    ,               shift and go to state 193
    )               reduce using rule 116 (epsilon -> .)

    hyper_exp_loop_1               shift and go to state 245
    epsilon                        shift and go to state 194

state 236

    (68) decision -> IF ( hyper_exp ) np_decision_1 THEN { . loop_estatuto } decision_else
    (73) loop_estatuto -> . estatuto loop_estatuto
    (74) loop_estatuto -> . epsilon
    (43) estatuto -> . asignacion
    (44) estatuto -> . func_llamada ;
    (45) estatuto -> . read
    (46) estatuto -> . write
    (47) estatuto -> . decision
    (48) estatuto -> . repeticion
    (49) estatuto -> . func_return
    (116) epsilon -> .
    (50) asignacion -> . variable = hyper_exp ;
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (62) read -> . READ ( variable_loop ) ;
    (67) write -> . WRITE ( hyper_exp_loop ) ;
    (68) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (75) repeticion -> . condicional
    (76) repeticion -> . no_condicional
    (61) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (77) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (81) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 116 (epsilon -> .)
    ID              shift and go to state 66
    READ            shift and go to state 67
    WRITE           shift and go to state 68
    IF              shift and go to state 69
    RETURN          shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74

    loop_estatuto                  shift and go to state 246
    estatuto                       shift and go to state 56
    epsilon                        shift and go to state 57
    asignacion                     shift and go to state 58
    func_llamada                   shift and go to state 59
    read                           shift and go to state 60
    write                          shift and go to state 61
    decision                       shift and go to state 62
    repeticion                     shift and go to state 63
    func_return                    shift and go to state 64
    variable                       shift and go to state 65
    condicional                    shift and go to state 70
    no_condicional                 shift and go to state 71

state 237

    (77) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO . { loop_estatuto } np_cond_3

    {               shift and go to state 247


state 238

    (81) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp . np_for_2 DO np_for_3 { loop_estatuto }
    (83) np_for_2 -> . epsilon
    (116) epsilon -> .

    DO              reduce using rule 116 (epsilon -> .)

    np_for_2                       shift and go to state 248
    epsilon                        shift and go to state 249

state 239

    (24) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad . { loop_estatuto } np_kill_func

    {               shift and go to state 250


state 240

    (30) np_save_curr_func_quad -> epsilon .

    {               reduce using rule 30 (np_save_curr_func_quad -> epsilon .)


state 241

    (36) loop_parametro -> , tipo . ID np_add_param loop_parametro

    ID              shift and go to state 251


state 242

    (17) loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo .

    ;               reduce using rule 17 (loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo .)


state 243

    (55) argumento_loop_1 -> , hyper_exp . np_fc_2 argumento_loop_1
    (60) np_fc_2 -> . epsilon
    (116) epsilon -> .

    ,               reduce using rule 116 (epsilon -> .)
    )               reduce using rule 116 (epsilon -> .)

    np_fc_2                        shift and go to state 252
    epsilon                        shift and go to state 217

state 244

    (64) variable_loop_1 -> , variable np_add_to_input_counter variable_loop_1 .

    )               reduce using rule 64 (variable_loop_1 -> , variable np_add_to_input_counter variable_loop_1 .)


state 245

    (58) hyper_exp_loop_1 -> , hyper_exp np_add_to_input_counter hyper_exp_loop_1 .

    )               reduce using rule 58 (hyper_exp_loop_1 -> , hyper_exp np_add_to_input_counter hyper_exp_loop_1 .)


state 246

    (68) decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto . } decision_else

    }               shift and go to state 253


state 247

    (77) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { . loop_estatuto } np_cond_3
    (73) loop_estatuto -> . estatuto loop_estatuto
    (74) loop_estatuto -> . epsilon
    (43) estatuto -> . asignacion
    (44) estatuto -> . func_llamada ;
    (45) estatuto -> . read
    (46) estatuto -> . write
    (47) estatuto -> . decision
    (48) estatuto -> . repeticion
    (49) estatuto -> . func_return
    (116) epsilon -> .
    (50) asignacion -> . variable = hyper_exp ;
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (62) read -> . READ ( variable_loop ) ;
    (67) write -> . WRITE ( hyper_exp_loop ) ;
    (68) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (75) repeticion -> . condicional
    (76) repeticion -> . no_condicional
    (61) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (77) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (81) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 116 (epsilon -> .)
    ID              shift and go to state 66
    READ            shift and go to state 67
    WRITE           shift and go to state 68
    IF              shift and go to state 69
    RETURN          shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74

    loop_estatuto                  shift and go to state 254
    estatuto                       shift and go to state 56
    epsilon                        shift and go to state 57
    asignacion                     shift and go to state 58
    func_llamada                   shift and go to state 59
    read                           shift and go to state 60
    write                          shift and go to state 61
    decision                       shift and go to state 62
    repeticion                     shift and go to state 63
    func_return                    shift and go to state 64
    variable                       shift and go to state 65
    condicional                    shift and go to state 70
    no_condicional                 shift and go to state 71

state 248

    (81) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 . DO np_for_3 { loop_estatuto }

    DO              shift and go to state 255


state 249

    (83) np_for_2 -> epsilon .

    DO              reduce using rule 83 (np_for_2 -> epsilon .)


state 250

    (24) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { . loop_estatuto } np_kill_func
    (73) loop_estatuto -> . estatuto loop_estatuto
    (74) loop_estatuto -> . epsilon
    (43) estatuto -> . asignacion
    (44) estatuto -> . func_llamada ;
    (45) estatuto -> . read
    (46) estatuto -> . write
    (47) estatuto -> . decision
    (48) estatuto -> . repeticion
    (49) estatuto -> . func_return
    (116) epsilon -> .
    (50) asignacion -> . variable = hyper_exp ;
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (62) read -> . READ ( variable_loop ) ;
    (67) write -> . WRITE ( hyper_exp_loop ) ;
    (68) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (75) repeticion -> . condicional
    (76) repeticion -> . no_condicional
    (61) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (77) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (81) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 116 (epsilon -> .)
    ID              shift and go to state 66
    READ            shift and go to state 67
    WRITE           shift and go to state 68
    IF              shift and go to state 69
    RETURN          shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74

    loop_estatuto                  shift and go to state 256
    estatuto                       shift and go to state 56
    epsilon                        shift and go to state 57
    asignacion                     shift and go to state 58
    func_llamada                   shift and go to state 59
    read                           shift and go to state 60
    write                          shift and go to state 61
    decision                       shift and go to state 62
    repeticion                     shift and go to state 63
    func_return                    shift and go to state 64
    variable                       shift and go to state 65
    condicional                    shift and go to state 70
    no_condicional                 shift and go to state 71

state 251

    (36) loop_parametro -> , tipo ID . np_add_param loop_parametro
    (38) np_add_param -> . epsilon
    (116) epsilon -> .

    ,               reduce using rule 116 (epsilon -> .)
    )               reduce using rule 116 (epsilon -> .)

    np_add_param                   shift and go to state 257
    epsilon                        shift and go to state 203

state 252

    (55) argumento_loop_1 -> , hyper_exp np_fc_2 . argumento_loop_1
    (55) argumento_loop_1 -> . , hyper_exp np_fc_2 argumento_loop_1
    (56) argumento_loop_1 -> . epsilon
    (116) epsilon -> .

    ,               shift and go to state 232
    )               reduce using rule 116 (epsilon -> .)

    argumento_loop_1               shift and go to state 258
    epsilon                        shift and go to state 233

state 253

    (68) decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } . decision_else
    (69) decision_else -> . ELSE np_decision_2 { loop_estatuto }
    (70) decision_else -> . epsilon
    (116) epsilon -> .

    ELSE            shift and go to state 260
    ID              reduce using rule 116 (epsilon -> .)
    READ            reduce using rule 116 (epsilon -> .)
    WRITE           reduce using rule 116 (epsilon -> .)
    IF              reduce using rule 116 (epsilon -> .)
    RETURN          reduce using rule 116 (epsilon -> .)
    WHILE           reduce using rule 116 (epsilon -> .)
    FOR             reduce using rule 116 (epsilon -> .)
    }               reduce using rule 116 (epsilon -> .)

    decision_else                  shift and go to state 259
    epsilon                        shift and go to state 261

state 254

    (77) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto . } np_cond_3

    }               shift and go to state 262


state 255

    (81) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO . np_for_3 { loop_estatuto }
    (84) np_for_3 -> . epsilon
    (116) epsilon -> .

    {               reduce using rule 116 (epsilon -> .)

    np_for_3                       shift and go to state 263
    epsilon                        shift and go to state 264

state 256

    (24) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto . } np_kill_func

    }               shift and go to state 265


state 257

    (36) loop_parametro -> , tipo ID np_add_param . loop_parametro
    (36) loop_parametro -> . , tipo ID np_add_param loop_parametro
    (37) loop_parametro -> . epsilon
    (116) epsilon -> .

    ,               shift and go to state 226
    )               reduce using rule 116 (epsilon -> .)

    loop_parametro                 shift and go to state 266
    epsilon                        shift and go to state 227

state 258

    (55) argumento_loop_1 -> , hyper_exp np_fc_2 argumento_loop_1 .

    )               reduce using rule 55 (argumento_loop_1 -> , hyper_exp np_fc_2 argumento_loop_1 .)


state 259

    (68) decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .

    ID              reduce using rule 68 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    READ            reduce using rule 68 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    WRITE           reduce using rule 68 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    IF              reduce using rule 68 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    RETURN          reduce using rule 68 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    WHILE           reduce using rule 68 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    FOR             reduce using rule 68 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    }               reduce using rule 68 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)


state 260

    (69) decision_else -> ELSE . np_decision_2 { loop_estatuto }
    (72) np_decision_2 -> . epsilon
    (116) epsilon -> .

    {               reduce using rule 116 (epsilon -> .)

    np_decision_2                  shift and go to state 267
    epsilon                        shift and go to state 268

state 261

    (70) decision_else -> epsilon .

    ID              reduce using rule 70 (decision_else -> epsilon .)
    READ            reduce using rule 70 (decision_else -> epsilon .)
    WRITE           reduce using rule 70 (decision_else -> epsilon .)
    IF              reduce using rule 70 (decision_else -> epsilon .)
    RETURN          reduce using rule 70 (decision_else -> epsilon .)
    WHILE           reduce using rule 70 (decision_else -> epsilon .)
    FOR             reduce using rule 70 (decision_else -> epsilon .)
    }               reduce using rule 70 (decision_else -> epsilon .)


state 262

    (77) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } . np_cond_3
    (80) np_cond_3 -> . epsilon
    (116) epsilon -> .

    ID              reduce using rule 116 (epsilon -> .)
    READ            reduce using rule 116 (epsilon -> .)
    WRITE           reduce using rule 116 (epsilon -> .)
    IF              reduce using rule 116 (epsilon -> .)
    RETURN          reduce using rule 116 (epsilon -> .)
    WHILE           reduce using rule 116 (epsilon -> .)
    FOR             reduce using rule 116 (epsilon -> .)
    }               reduce using rule 116 (epsilon -> .)

    np_cond_3                      shift and go to state 269
    epsilon                        shift and go to state 270

state 263

    (81) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 . { loop_estatuto }

    {               shift and go to state 271


state 264

    (84) np_for_3 -> epsilon .

    {               reduce using rule 84 (np_for_3 -> epsilon .)


state 265

    (24) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } . np_kill_func
    (31) np_kill_func -> . epsilon
    (116) epsilon -> .

    FUNCTION        reduce using rule 116 (epsilon -> .)
    MAIN            reduce using rule 116 (epsilon -> .)

    np_kill_func                   shift and go to state 272
    epsilon                        shift and go to state 273

state 266

    (36) loop_parametro -> , tipo ID np_add_param loop_parametro .

    )               reduce using rule 36 (loop_parametro -> , tipo ID np_add_param loop_parametro .)


state 267

    (69) decision_else -> ELSE np_decision_2 . { loop_estatuto }

    {               shift and go to state 274


state 268

    (72) np_decision_2 -> epsilon .

    {               reduce using rule 72 (np_decision_2 -> epsilon .)


state 269

    (77) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .

    ID              reduce using rule 77 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    READ            reduce using rule 77 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    WRITE           reduce using rule 77 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    IF              reduce using rule 77 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    RETURN          reduce using rule 77 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    WHILE           reduce using rule 77 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    FOR             reduce using rule 77 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    }               reduce using rule 77 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)


state 270

    (80) np_cond_3 -> epsilon .

    ID              reduce using rule 80 (np_cond_3 -> epsilon .)
    READ            reduce using rule 80 (np_cond_3 -> epsilon .)
    WRITE           reduce using rule 80 (np_cond_3 -> epsilon .)
    IF              reduce using rule 80 (np_cond_3 -> epsilon .)
    RETURN          reduce using rule 80 (np_cond_3 -> epsilon .)
    WHILE           reduce using rule 80 (np_cond_3 -> epsilon .)
    FOR             reduce using rule 80 (np_cond_3 -> epsilon .)
    }               reduce using rule 80 (np_cond_3 -> epsilon .)


state 271

    (81) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { . loop_estatuto }
    (73) loop_estatuto -> . estatuto loop_estatuto
    (74) loop_estatuto -> . epsilon
    (43) estatuto -> . asignacion
    (44) estatuto -> . func_llamada ;
    (45) estatuto -> . read
    (46) estatuto -> . write
    (47) estatuto -> . decision
    (48) estatuto -> . repeticion
    (49) estatuto -> . func_return
    (116) epsilon -> .
    (50) asignacion -> . variable = hyper_exp ;
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (62) read -> . READ ( variable_loop ) ;
    (67) write -> . WRITE ( hyper_exp_loop ) ;
    (68) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (75) repeticion -> . condicional
    (76) repeticion -> . no_condicional
    (61) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (77) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (81) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 116 (epsilon -> .)
    ID              shift and go to state 66
    READ            shift and go to state 67
    WRITE           shift and go to state 68
    IF              shift and go to state 69
    RETURN          shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74

    variable                       shift and go to state 65
    loop_estatuto                  shift and go to state 275
    estatuto                       shift and go to state 56
    epsilon                        shift and go to state 57
    asignacion                     shift and go to state 58
    func_llamada                   shift and go to state 59
    read                           shift and go to state 60
    write                          shift and go to state 61
    decision                       shift and go to state 62
    repeticion                     shift and go to state 63
    func_return                    shift and go to state 64
    condicional                    shift and go to state 70
    no_condicional                 shift and go to state 71

state 272

    (24) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func .

    FUNCTION        reduce using rule 24 (func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func .)
    MAIN            reduce using rule 24 (func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func .)


state 273

    (31) np_kill_func -> epsilon .

    FUNCTION        reduce using rule 31 (np_kill_func -> epsilon .)
    MAIN            reduce using rule 31 (np_kill_func -> epsilon .)


state 274

    (69) decision_else -> ELSE np_decision_2 { . loop_estatuto }
    (73) loop_estatuto -> . estatuto loop_estatuto
    (74) loop_estatuto -> . epsilon
    (43) estatuto -> . asignacion
    (44) estatuto -> . func_llamada ;
    (45) estatuto -> . read
    (46) estatuto -> . write
    (47) estatuto -> . decision
    (48) estatuto -> . repeticion
    (49) estatuto -> . func_return
    (116) epsilon -> .
    (50) asignacion -> . variable = hyper_exp ;
    (51) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (62) read -> . READ ( variable_loop ) ;
    (67) write -> . WRITE ( hyper_exp_loop ) ;
    (68) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (75) repeticion -> . condicional
    (76) repeticion -> . no_condicional
    (61) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (77) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (81) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 116 (epsilon -> .)
    ID              shift and go to state 66
    READ            shift and go to state 67
    WRITE           shift and go to state 68
    IF              shift and go to state 69
    RETURN          shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74

    loop_estatuto                  shift and go to state 276
    estatuto                       shift and go to state 56
    epsilon                        shift and go to state 57
    asignacion                     shift and go to state 58
    func_llamada                   shift and go to state 59
    read                           shift and go to state 60
    write                          shift and go to state 61
    decision                       shift and go to state 62
    repeticion                     shift and go to state 63
    func_return                    shift and go to state 64
    variable                       shift and go to state 65
    condicional                    shift and go to state 70
    no_condicional                 shift and go to state 71

state 275

    (81) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto . }

    }               shift and go to state 277


state 276

    (69) decision_else -> ELSE np_decision_2 { loop_estatuto . }

    }               shift and go to state 278


state 277

    (81) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .

    ID              reduce using rule 81 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    READ            reduce using rule 81 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    WRITE           reduce using rule 81 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    IF              reduce using rule 81 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    RETURN          reduce using rule 81 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    WHILE           reduce using rule 81 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    FOR             reduce using rule 81 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    }               reduce using rule 81 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)


state 278

    (69) decision_else -> ELSE np_decision_2 { loop_estatuto } .

    ID              reduce using rule 69 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    READ            reduce using rule 69 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    WRITE           reduce using rule 69 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    IF              reduce using rule 69 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    RETURN          reduce using rule 69 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    WHILE           reduce using rule 69 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    FOR             reduce using rule 69 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    }               reduce using rule 69 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)

