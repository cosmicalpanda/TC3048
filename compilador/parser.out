Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    PRINT
    STRING
    VAL_STRING

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main
Rule 2     np_program_start -> epsilon
Rule 3     np_start_dirfunc -> epsilon
Rule 4     main -> MAIN ( ) { loop_estatuto } np_fin_total
Rule 5     np_fin_total -> epsilon
Rule 6     var_opcional -> var_declaracion
Rule 7     var_opcional -> epsilon
Rule 8     variable -> ID np_single_var_process
Rule 9     var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion
Rule 10    np_var_prep -> epsilon
Rule 11    loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion
Rule 12    loop_var_declaracion -> epsilon
Rule 13    var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ;
Rule 14    loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo
Rule 15    loop_var_decl_mismo_tipo -> epsilon
Rule 16    np_set_curr_var_type -> epsilon
Rule 17    np_set_curr_var_name -> epsilon
Rule 18    np_add_var_to_varstable -> epsilon
Rule 19    func_programa_loop -> func_definicion func_programa_loop
Rule 20    func_programa_loop -> epsilon
Rule 21    func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } np_kill_func
Rule 22    func_tipo_retorno -> tipo
Rule 23    func_tipo_retorno -> VOID
Rule 24    np_func_tipo_retorno -> epsilon
Rule 25    np_func_id -> epsilon
Rule 26    np_add_to_func_dir -> epsilon
Rule 27    np_kill_func -> epsilon
Rule 28    np_prep_func_params -> epsilon
Rule 29    func_parametro -> parametro
Rule 30    func_parametro -> epsilon
Rule 31    parametro -> tipo ID loop_parametro
Rule 32    loop_parametro -> , tipo ID loop_parametro
Rule 33    loop_parametro -> epsilon
Rule 34    tipo -> INT
Rule 35    tipo -> FLOAT
Rule 36    tipo -> CHAR
Rule 37    tipo -> BOOL
Rule 38    estatuto -> asignacion
Rule 39    estatuto -> func_llamada ;
Rule 40    estatuto -> read
Rule 41    estatuto -> write
Rule 42    estatuto -> decision
Rule 43    estatuto -> repeticion
Rule 44    estatuto -> func_return
Rule 45    asignacion -> variable = hyper_exp ;
Rule 46    func_llamada -> ID ( )
Rule 47    func_llamada -> ID ( hyper_exp_loop )
Rule 48    hyper_exp_loop -> hyper_exp np_add_to_input_counter hyper_exp_loop_1
Rule 49    hyper_exp_loop_1 -> , hyper_exp np_add_to_input_counter hyper_exp_loop_1
Rule 50    hyper_exp_loop_1 -> epsilon
Rule 51    func_return -> RETURN ( hyper_exp ) ;
Rule 52    read -> READ ( variable_loop ) ;
Rule 53    variable_loop -> variable np_add_to_input_counter variable_loop_1
Rule 54    variable_loop_1 -> , variable np_add_to_input_counter variable_loop_1
Rule 55    variable_loop_1 -> epsilon
Rule 56    np_add_to_input_counter -> epsilon
Rule 57    write -> WRITE ( hyper_exp_loop ) ;
Rule 58    decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
Rule 59    decision_else -> ELSE np_decision_2 { loop_estatuto }
Rule 60    decision_else -> epsilon
Rule 61    np_decision_1 -> epsilon
Rule 62    np_decision_2 -> epsilon
Rule 63    loop_estatuto -> estatuto loop_estatuto
Rule 64    loop_estatuto -> epsilon
Rule 65    repeticion -> condicional
Rule 66    repeticion -> no_condicional
Rule 67    condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
Rule 68    np_cond_1 -> epsilon
Rule 69    np_cond_2 -> epsilon
Rule 70    np_cond_3 -> epsilon
Rule 71    no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }
Rule 72    np_for_1 -> epsilon
Rule 73    np_for_2 -> epsilon
Rule 74    np_for_3 -> epsilon
Rule 75    hyper_exp -> super_exp hyper_exp_1
Rule 76    hyper_exp_1 -> & np_push_operator_stack super_exp
Rule 77    hyper_exp_1 -> | np_push_operator_stack super_exp
Rule 78    hyper_exp_1 -> epsilon
Rule 79    super_exp -> exp super_exp_1
Rule 80    super_exp_1 -> < np_push_operator_stack exp
Rule 81    super_exp_1 -> > np_push_operator_stack exp
Rule 82    super_exp_1 -> EQUAL_TO np_push_operator_stack exp
Rule 83    super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp
Rule 84    super_exp_1 -> epsilon
Rule 85    exp -> term exp_1
Rule 86    exp_1 -> + np_push_operator_stack term
Rule 87    exp_1 -> - np_push_operator_stack term
Rule 88    exp_1 -> epsilon
Rule 89    term -> factor term_1
Rule 90    term_1 -> * np_push_operator_stack factor
Rule 91    term_1 -> / np_push_operator_stack factor
Rule 92    term_1 -> epsilon
Rule 93    np_push_operator_stack -> epsilon
Rule 94    factor -> constant
Rule 95    factor -> variable
Rule 96    factor -> ( hyper_exp )
Rule 97    constant -> VAL_INT np_push_const_int
Rule 98    constant -> VAL_FLOAT np_push_const_float
Rule 99    constant -> VAL_CHAR np_push_const_char
Rule 100   np_push_const_int -> epsilon
Rule 101   np_push_const_float -> epsilon
Rule 102   np_push_const_char -> epsilon
Rule 103   np_single_var_process -> epsilon
Rule 104   epsilon -> <empty>

Terminals, with rules where they appear

&                    : 76
(                    : 4 21 46 47 51 52 57 58 67 96
)                    : 4 21 46 47 51 52 57 58 67 96
*                    : 90
+                    : 86
,                    : 14 32 49 54
-                    : 87
/                    : 91
;                    : 1 13 21 39 45 51 52 57
<                    : 80
=                    : 45 71
>                    : 81
BOOL                 : 37
CHAR                 : 36
DO                   : 67 71
ELSE                 : 59
EQUAL_TO             : 82
FLOAT                : 35
FOR                  : 71
FUNCTION             : 21
ID                   : 1 8 13 14 21 31 32 46 47
IF                   : 58
INT                  : 34
MAIN                 : 4
NOT_EQUAL_TO         : 83
PRINT                : 
PROGRAM              : 1
READ                 : 52
RETURN               : 51
STRING               : 
THEN                 : 58
TO                   : 71
VAL_CHAR             : 99
VAL_FLOAT            : 98
VAL_INT              : 97
VAL_STRING           : 
VARS                 : 9
VOID                 : 23
WHILE                : 67
WRITE                : 57
error                : 
{                    : 4 21 58 59 67 71
|                    : 77
}                    : 4 21 58 59 67 71

Nonterminals, with rules where they appear

asignacion           : 38
condicional          : 65
constant             : 94
decision             : 42
decision_else        : 58
epsilon              : 2 3 5 7 10 12 15 16 17 18 20 24 25 26 27 28 30 33 50 55 56 60 61 62 64 68 69 70 72 73 74 78 84 88 92 93 100 101 102 103
estatuto             : 63
exp                  : 79 80 81 82 83
exp_1                : 85
factor               : 89 90 91
func_definicion      : 19
func_llamada         : 39
func_parametro       : 21
func_programa_loop   : 1 19
func_return          : 44
func_tipo_retorno    : 21
hyper_exp            : 45 48 49 51 58 67 71 71 96
hyper_exp_1          : 75
hyper_exp_loop       : 47 57
hyper_exp_loop_1     : 48 49
loop_estatuto        : 4 21 58 59 63 67 71
loop_parametro       : 31 32
loop_var_decl_mismo_tipo : 13 14
loop_var_declaracion : 9 11
main                 : 1
no_condicional       : 66
np_add_to_func_dir   : 21
np_add_to_input_counter : 48 49 53 54
np_add_var_to_varstable : 13 14
np_cond_1            : 67
np_cond_2            : 67
np_cond_3            : 67
np_decision_1        : 58
np_decision_2        : 59
np_fin_total         : 4
np_for_1             : 71
np_for_2             : 71
np_for_3             : 71
np_func_id           : 21
np_func_tipo_retorno : 21
np_kill_func         : 21
np_prep_func_params  : 21
np_program_start     : 1
np_push_const_char   : 99
np_push_const_float  : 98
np_push_const_int    : 97
np_push_operator_stack : 76 77 80 81 82 83 86 87 90 91
np_set_curr_var_name : 13 14
np_set_curr_var_type : 13
np_single_var_process : 8
np_start_dirfunc     : 1
np_var_prep          : 9
parametro            : 29
programa             : 0
read                 : 40
repeticion           : 43
super_exp            : 75 76 77
super_exp_1          : 79
term                 : 85 86 87
term_1               : 89
tipo                 : 13 22 31 32
var_declaracion      : 6
var_declaracion_mismo_tipo : 9 11
var_opcional         : 1 21
variable             : 45 53 54 71 95
variable_loop        : 52
variable_loop_1      : 53 54
write                : 41

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main

    PROGRAM         shift and go to state 1

    programa                       shift and go to state 2

state 1

    (1) programa -> PROGRAM . np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main
    (2) np_program_start -> . epsilon
    (104) epsilon -> .

    ID              reduce using rule 104 (epsilon -> .)

    np_program_start               shift and go to state 3
    epsilon                        shift and go to state 4

state 2

    (0) S' -> programa .



state 3

    (1) programa -> PROGRAM np_program_start . ID np_start_dirfunc ; var_opcional func_programa_loop main

    ID              shift and go to state 5


state 4

    (2) np_program_start -> epsilon .

    ID              reduce using rule 2 (np_program_start -> epsilon .)


state 5

    (1) programa -> PROGRAM np_program_start ID . np_start_dirfunc ; var_opcional func_programa_loop main
    (3) np_start_dirfunc -> . epsilon
    (104) epsilon -> .

    ;               reduce using rule 104 (epsilon -> .)

    np_start_dirfunc               shift and go to state 6
    epsilon                        shift and go to state 7

state 6

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc . ; var_opcional func_programa_loop main

    ;               shift and go to state 8


state 7

    (3) np_start_dirfunc -> epsilon .

    ;               reduce using rule 3 (np_start_dirfunc -> epsilon .)


state 8

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc ; . var_opcional func_programa_loop main
    (6) var_opcional -> . var_declaracion
    (7) var_opcional -> . epsilon
    (9) var_declaracion -> . VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion
    (104) epsilon -> .

    VARS            shift and go to state 9
    FUNCTION        reduce using rule 104 (epsilon -> .)
    MAIN            reduce using rule 104 (epsilon -> .)

    var_declaracion                shift and go to state 10
    epsilon                        shift and go to state 11
    var_opcional                   shift and go to state 12

state 9

    (9) var_declaracion -> VARS . np_var_prep var_declaracion_mismo_tipo loop_var_declaracion
    (10) np_var_prep -> . epsilon
    (104) epsilon -> .

    INT             reduce using rule 104 (epsilon -> .)
    FLOAT           reduce using rule 104 (epsilon -> .)
    CHAR            reduce using rule 104 (epsilon -> .)
    BOOL            reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 13
    np_var_prep                    shift and go to state 14

state 10

    (6) var_opcional -> var_declaracion .

    FUNCTION        reduce using rule 6 (var_opcional -> var_declaracion .)
    MAIN            reduce using rule 6 (var_opcional -> var_declaracion .)
    {               reduce using rule 6 (var_opcional -> var_declaracion .)


state 11

    (7) var_opcional -> epsilon .

    FUNCTION        reduce using rule 7 (var_opcional -> epsilon .)
    MAIN            reduce using rule 7 (var_opcional -> epsilon .)
    {               reduce using rule 7 (var_opcional -> epsilon .)


state 12

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional . func_programa_loop main
    (19) func_programa_loop -> . func_definicion func_programa_loop
    (20) func_programa_loop -> . epsilon
    (21) func_definicion -> . FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } np_kill_func
    (104) epsilon -> .

    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 104 (epsilon -> .)

    func_definicion                shift and go to state 15
    epsilon                        shift and go to state 17
    func_programa_loop             shift and go to state 18

state 13

    (10) np_var_prep -> epsilon .

    INT             reduce using rule 10 (np_var_prep -> epsilon .)
    FLOAT           reduce using rule 10 (np_var_prep -> epsilon .)
    CHAR            reduce using rule 10 (np_var_prep -> epsilon .)
    BOOL            reduce using rule 10 (np_var_prep -> epsilon .)


state 14

    (9) var_declaracion -> VARS np_var_prep . var_declaracion_mismo_tipo loop_var_declaracion
    (13) var_declaracion_mismo_tipo -> . tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (34) tipo -> . INT
    (35) tipo -> . FLOAT
    (36) tipo -> . CHAR
    (37) tipo -> . BOOL

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 24

    tipo                           shift and go to state 19
    var_declaracion_mismo_tipo     shift and go to state 23

state 15

    (19) func_programa_loop -> func_definicion . func_programa_loop
    (19) func_programa_loop -> . func_definicion func_programa_loop
    (20) func_programa_loop -> . epsilon
    (21) func_definicion -> . FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } np_kill_func
    (104) epsilon -> .

    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 104 (epsilon -> .)

    func_definicion                shift and go to state 15
    epsilon                        shift and go to state 17
    func_programa_loop             shift and go to state 25

state 16

    (21) func_definicion -> FUNCTION . func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } np_kill_func
    (22) func_tipo_retorno -> . tipo
    (23) func_tipo_retorno -> . VOID
    (34) tipo -> . INT
    (35) tipo -> . FLOAT
    (36) tipo -> . CHAR
    (37) tipo -> . BOOL

    VOID            shift and go to state 26
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 24

    func_tipo_retorno              shift and go to state 28
    tipo                           shift and go to state 27

state 17

    (20) func_programa_loop -> epsilon .

    MAIN            reduce using rule 20 (func_programa_loop -> epsilon .)


state 18

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop . main
    (4) main -> . MAIN ( ) { loop_estatuto } np_fin_total

    MAIN            shift and go to state 29

    main                           shift and go to state 30

state 19

    (13) var_declaracion_mismo_tipo -> tipo . np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (16) np_set_curr_var_type -> . epsilon
    (104) epsilon -> .

    ID              reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 31
    np_set_curr_var_type           shift and go to state 32

state 20

    (34) tipo -> INT .

    ID              reduce using rule 34 (tipo -> INT .)


state 21

    (35) tipo -> FLOAT .

    ID              reduce using rule 35 (tipo -> FLOAT .)


state 22

    (36) tipo -> CHAR .

    ID              reduce using rule 36 (tipo -> CHAR .)


state 23

    (9) var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo . loop_var_declaracion
    (11) loop_var_declaracion -> . var_declaracion_mismo_tipo loop_var_declaracion
    (12) loop_var_declaracion -> . epsilon
    (13) var_declaracion_mismo_tipo -> . tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (104) epsilon -> .
    (34) tipo -> . INT
    (35) tipo -> . FLOAT
    (36) tipo -> . CHAR
    (37) tipo -> . BOOL

    FUNCTION        reduce using rule 104 (epsilon -> .)
    MAIN            reduce using rule 104 (epsilon -> .)
    {               reduce using rule 104 (epsilon -> .)
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 24

    tipo                           shift and go to state 19
    epsilon                        shift and go to state 33
    var_declaracion_mismo_tipo     shift and go to state 34
    loop_var_declaracion           shift and go to state 35

state 24

    (37) tipo -> BOOL .

    ID              reduce using rule 37 (tipo -> BOOL .)


state 25

    (19) func_programa_loop -> func_definicion func_programa_loop .

    MAIN            reduce using rule 19 (func_programa_loop -> func_definicion func_programa_loop .)


state 26

    (23) func_tipo_retorno -> VOID .

    ID              reduce using rule 23 (func_tipo_retorno -> VOID .)


state 27

    (22) func_tipo_retorno -> tipo .

    ID              reduce using rule 22 (func_tipo_retorno -> tipo .)


state 28

    (21) func_definicion -> FUNCTION func_tipo_retorno . np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } np_kill_func
    (24) np_func_tipo_retorno -> . epsilon
    (104) epsilon -> .

    ID              reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 37
    np_func_tipo_retorno           shift and go to state 36

state 29

    (4) main -> MAIN . ( ) { loop_estatuto } np_fin_total

    (               shift and go to state 38


state 30

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main .

    $end            reduce using rule 1 (programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main .)


state 31

    (16) np_set_curr_var_type -> epsilon .

    ID              reduce using rule 16 (np_set_curr_var_type -> epsilon .)


state 32

    (13) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type . ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ;

    ID              shift and go to state 39


state 33

    (12) loop_var_declaracion -> epsilon .

    FUNCTION        reduce using rule 12 (loop_var_declaracion -> epsilon .)
    MAIN            reduce using rule 12 (loop_var_declaracion -> epsilon .)
    {               reduce using rule 12 (loop_var_declaracion -> epsilon .)


state 34

    (11) loop_var_declaracion -> var_declaracion_mismo_tipo . loop_var_declaracion
    (11) loop_var_declaracion -> . var_declaracion_mismo_tipo loop_var_declaracion
    (12) loop_var_declaracion -> . epsilon
    (13) var_declaracion_mismo_tipo -> . tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (104) epsilon -> .
    (34) tipo -> . INT
    (35) tipo -> . FLOAT
    (36) tipo -> . CHAR
    (37) tipo -> . BOOL

    FUNCTION        reduce using rule 104 (epsilon -> .)
    MAIN            reduce using rule 104 (epsilon -> .)
    {               reduce using rule 104 (epsilon -> .)
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 24

    tipo                           shift and go to state 19
    epsilon                        shift and go to state 33
    var_declaracion_mismo_tipo     shift and go to state 34
    loop_var_declaracion           shift and go to state 40

state 35

    (9) var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion .

    FUNCTION        reduce using rule 9 (var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion .)
    MAIN            reduce using rule 9 (var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion .)
    {               reduce using rule 9 (var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion .)


state 36

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno . ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } np_kill_func

    ID              shift and go to state 41


state 37

    (24) np_func_tipo_retorno -> epsilon .

    ID              reduce using rule 24 (np_func_tipo_retorno -> epsilon .)


state 38

    (4) main -> MAIN ( . ) { loop_estatuto } np_fin_total

    )               shift and go to state 42


state 39

    (13) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID . np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (17) np_set_curr_var_name -> . epsilon
    (104) epsilon -> .

    ,               reduce using rule 104 (epsilon -> .)
    ;               reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 43
    np_set_curr_var_name           shift and go to state 44

state 40

    (11) loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion .

    FUNCTION        reduce using rule 11 (loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion .)
    MAIN            reduce using rule 11 (loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion .)
    {               reduce using rule 11 (loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion .)


state 41

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID . np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } np_kill_func
    (25) np_func_id -> . epsilon
    (104) epsilon -> .

    (               reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 45
    np_func_id                     shift and go to state 46

state 42

    (4) main -> MAIN ( ) . { loop_estatuto } np_fin_total

    {               shift and go to state 47


state 43

    (17) np_set_curr_var_name -> epsilon .

    ,               reduce using rule 17 (np_set_curr_var_name -> epsilon .)
    ;               reduce using rule 17 (np_set_curr_var_name -> epsilon .)


state 44

    (13) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name . np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (18) np_add_var_to_varstable -> . epsilon
    (104) epsilon -> .

    ,               reduce using rule 104 (epsilon -> .)
    ;               reduce using rule 104 (epsilon -> .)

    np_add_var_to_varstable        shift and go to state 48
    epsilon                        shift and go to state 49

state 45

    (25) np_func_id -> epsilon .

    (               reduce using rule 25 (np_func_id -> epsilon .)


state 46

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id . np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } np_kill_func
    (26) np_add_to_func_dir -> . epsilon
    (104) epsilon -> .

    (               reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 50
    np_add_to_func_dir             shift and go to state 51

state 47

    (4) main -> MAIN ( ) { . loop_estatuto } np_fin_total
    (63) loop_estatuto -> . estatuto loop_estatuto
    (64) loop_estatuto -> . epsilon
    (38) estatuto -> . asignacion
    (39) estatuto -> . func_llamada ;
    (40) estatuto -> . read
    (41) estatuto -> . write
    (42) estatuto -> . decision
    (43) estatuto -> . repeticion
    (44) estatuto -> . func_return
    (104) epsilon -> .
    (45) asignacion -> . variable = hyper_exp ;
    (46) func_llamada -> . ID ( )
    (47) func_llamada -> . ID ( hyper_exp_loop )
    (52) read -> . READ ( variable_loop ) ;
    (57) write -> . WRITE ( hyper_exp_loop ) ;
    (58) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (65) repeticion -> . condicional
    (66) repeticion -> . no_condicional
    (51) func_return -> . RETURN ( hyper_exp ) ;
    (8) variable -> . ID np_single_var_process
    (67) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (71) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 104 (epsilon -> .)
    ID              shift and go to state 59
    READ            shift and go to state 53
    WRITE           shift and go to state 66
    IF              shift and go to state 68
    RETURN          shift and go to state 52
    WHILE           shift and go to state 54
    FOR             shift and go to state 62

    func_llamada                   shift and go to state 55
    loop_estatuto                  shift and go to state 56
    func_return                    shift and go to state 70
    decision                       shift and go to state 57
    estatuto                       shift and go to state 58
    write                          shift and go to state 60
    read                           shift and go to state 63
    epsilon                        shift and go to state 64
    condicional                    shift and go to state 65
    variable                       shift and go to state 67
    no_condicional                 shift and go to state 61
    asignacion                     shift and go to state 69
    repeticion                     shift and go to state 71

state 48

    (13) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable . loop_var_decl_mismo_tipo ;
    (14) loop_var_decl_mismo_tipo -> . , ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo
    (15) loop_var_decl_mismo_tipo -> . epsilon
    (104) epsilon -> .

    ,               shift and go to state 73
    ;               reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 72
    loop_var_decl_mismo_tipo       shift and go to state 74

state 49

    (18) np_add_var_to_varstable -> epsilon .

    ,               reduce using rule 18 (np_add_var_to_varstable -> epsilon .)
    ;               reduce using rule 18 (np_add_var_to_varstable -> epsilon .)


state 50

    (26) np_add_to_func_dir -> epsilon .

    (               reduce using rule 26 (np_add_to_func_dir -> epsilon .)


state 51

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir . ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } np_kill_func

    (               shift and go to state 75


state 52

    (51) func_return -> RETURN . ( hyper_exp ) ;

    (               shift and go to state 76


state 53

    (52) read -> READ . ( variable_loop ) ;

    (               shift and go to state 77


state 54

    (67) condicional -> WHILE . np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (68) np_cond_1 -> . epsilon
    (104) epsilon -> .

    (               reduce using rule 104 (epsilon -> .)

    np_cond_1                      shift and go to state 78
    epsilon                        shift and go to state 79

state 55

    (39) estatuto -> func_llamada . ;

    ;               shift and go to state 80


state 56

    (4) main -> MAIN ( ) { loop_estatuto . } np_fin_total

    }               shift and go to state 81


state 57

    (42) estatuto -> decision .

    ID              reduce using rule 42 (estatuto -> decision .)
    READ            reduce using rule 42 (estatuto -> decision .)
    WRITE           reduce using rule 42 (estatuto -> decision .)
    IF              reduce using rule 42 (estatuto -> decision .)
    RETURN          reduce using rule 42 (estatuto -> decision .)
    WHILE           reduce using rule 42 (estatuto -> decision .)
    FOR             reduce using rule 42 (estatuto -> decision .)
    }               reduce using rule 42 (estatuto -> decision .)


state 58

    (63) loop_estatuto -> estatuto . loop_estatuto
    (63) loop_estatuto -> . estatuto loop_estatuto
    (64) loop_estatuto -> . epsilon
    (38) estatuto -> . asignacion
    (39) estatuto -> . func_llamada ;
    (40) estatuto -> . read
    (41) estatuto -> . write
    (42) estatuto -> . decision
    (43) estatuto -> . repeticion
    (44) estatuto -> . func_return
    (104) epsilon -> .
    (45) asignacion -> . variable = hyper_exp ;
    (46) func_llamada -> . ID ( )
    (47) func_llamada -> . ID ( hyper_exp_loop )
    (52) read -> . READ ( variable_loop ) ;
    (57) write -> . WRITE ( hyper_exp_loop ) ;
    (58) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (65) repeticion -> . condicional
    (66) repeticion -> . no_condicional
    (51) func_return -> . RETURN ( hyper_exp ) ;
    (8) variable -> . ID np_single_var_process
    (67) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (71) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 104 (epsilon -> .)
    ID              shift and go to state 59
    READ            shift and go to state 53
    WRITE           shift and go to state 66
    IF              shift and go to state 68
    RETURN          shift and go to state 52
    WHILE           shift and go to state 54
    FOR             shift and go to state 62

    func_llamada                   shift and go to state 55
    loop_estatuto                  shift and go to state 82
    func_return                    shift and go to state 70
    decision                       shift and go to state 57
    estatuto                       shift and go to state 58
    write                          shift and go to state 60
    read                           shift and go to state 63
    epsilon                        shift and go to state 64
    condicional                    shift and go to state 65
    variable                       shift and go to state 67
    no_condicional                 shift and go to state 61
    asignacion                     shift and go to state 69
    repeticion                     shift and go to state 71

state 59

    (46) func_llamada -> ID . ( )
    (47) func_llamada -> ID . ( hyper_exp_loop )
    (8) variable -> ID . np_single_var_process
    (103) np_single_var_process -> . epsilon
    (104) epsilon -> .

    (               shift and go to state 83
    =               reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 85
    np_single_var_process          shift and go to state 84

state 60

    (41) estatuto -> write .

    ID              reduce using rule 41 (estatuto -> write .)
    READ            reduce using rule 41 (estatuto -> write .)
    WRITE           reduce using rule 41 (estatuto -> write .)
    IF              reduce using rule 41 (estatuto -> write .)
    RETURN          reduce using rule 41 (estatuto -> write .)
    WHILE           reduce using rule 41 (estatuto -> write .)
    FOR             reduce using rule 41 (estatuto -> write .)
    }               reduce using rule 41 (estatuto -> write .)


state 61

    (66) repeticion -> no_condicional .

    ID              reduce using rule 66 (repeticion -> no_condicional .)
    READ            reduce using rule 66 (repeticion -> no_condicional .)
    WRITE           reduce using rule 66 (repeticion -> no_condicional .)
    IF              reduce using rule 66 (repeticion -> no_condicional .)
    RETURN          reduce using rule 66 (repeticion -> no_condicional .)
    WHILE           reduce using rule 66 (repeticion -> no_condicional .)
    FOR             reduce using rule 66 (repeticion -> no_condicional .)
    }               reduce using rule 66 (repeticion -> no_condicional .)


state 62

    (71) no_condicional -> FOR . variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }
    (8) variable -> . ID np_single_var_process

    ID              shift and go to state 87

    variable                       shift and go to state 86

state 63

    (40) estatuto -> read .

    ID              reduce using rule 40 (estatuto -> read .)
    READ            reduce using rule 40 (estatuto -> read .)
    WRITE           reduce using rule 40 (estatuto -> read .)
    IF              reduce using rule 40 (estatuto -> read .)
    RETURN          reduce using rule 40 (estatuto -> read .)
    WHILE           reduce using rule 40 (estatuto -> read .)
    FOR             reduce using rule 40 (estatuto -> read .)
    }               reduce using rule 40 (estatuto -> read .)


state 64

    (64) loop_estatuto -> epsilon .

    }               reduce using rule 64 (loop_estatuto -> epsilon .)


state 65

    (65) repeticion -> condicional .

    ID              reduce using rule 65 (repeticion -> condicional .)
    READ            reduce using rule 65 (repeticion -> condicional .)
    WRITE           reduce using rule 65 (repeticion -> condicional .)
    IF              reduce using rule 65 (repeticion -> condicional .)
    RETURN          reduce using rule 65 (repeticion -> condicional .)
    WHILE           reduce using rule 65 (repeticion -> condicional .)
    FOR             reduce using rule 65 (repeticion -> condicional .)
    }               reduce using rule 65 (repeticion -> condicional .)


state 66

    (57) write -> WRITE . ( hyper_exp_loop ) ;

    (               shift and go to state 88


state 67

    (45) asignacion -> variable . = hyper_exp ;

    =               shift and go to state 89


state 68

    (58) decision -> IF . ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else

    (               shift and go to state 90


state 69

    (38) estatuto -> asignacion .

    ID              reduce using rule 38 (estatuto -> asignacion .)
    READ            reduce using rule 38 (estatuto -> asignacion .)
    WRITE           reduce using rule 38 (estatuto -> asignacion .)
    IF              reduce using rule 38 (estatuto -> asignacion .)
    RETURN          reduce using rule 38 (estatuto -> asignacion .)
    WHILE           reduce using rule 38 (estatuto -> asignacion .)
    FOR             reduce using rule 38 (estatuto -> asignacion .)
    }               reduce using rule 38 (estatuto -> asignacion .)


state 70

    (44) estatuto -> func_return .

    ID              reduce using rule 44 (estatuto -> func_return .)
    READ            reduce using rule 44 (estatuto -> func_return .)
    WRITE           reduce using rule 44 (estatuto -> func_return .)
    IF              reduce using rule 44 (estatuto -> func_return .)
    RETURN          reduce using rule 44 (estatuto -> func_return .)
    WHILE           reduce using rule 44 (estatuto -> func_return .)
    FOR             reduce using rule 44 (estatuto -> func_return .)
    }               reduce using rule 44 (estatuto -> func_return .)


state 71

    (43) estatuto -> repeticion .

    ID              reduce using rule 43 (estatuto -> repeticion .)
    READ            reduce using rule 43 (estatuto -> repeticion .)
    WRITE           reduce using rule 43 (estatuto -> repeticion .)
    IF              reduce using rule 43 (estatuto -> repeticion .)
    RETURN          reduce using rule 43 (estatuto -> repeticion .)
    WHILE           reduce using rule 43 (estatuto -> repeticion .)
    FOR             reduce using rule 43 (estatuto -> repeticion .)
    }               reduce using rule 43 (estatuto -> repeticion .)


state 72

    (15) loop_var_decl_mismo_tipo -> epsilon .

    ;               reduce using rule 15 (loop_var_decl_mismo_tipo -> epsilon .)


state 73

    (14) loop_var_decl_mismo_tipo -> , . ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo

    ID              shift and go to state 91


state 74

    (13) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo . ;

    ;               shift and go to state 92


state 75

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( . np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } np_kill_func
    (28) np_prep_func_params -> . epsilon
    (104) epsilon -> .

    INT             reduce using rule 104 (epsilon -> .)
    FLOAT           reduce using rule 104 (epsilon -> .)
    CHAR            reduce using rule 104 (epsilon -> .)
    BOOL            reduce using rule 104 (epsilon -> .)
    )               reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 94
    np_prep_func_params            shift and go to state 93

state 76

    (51) func_return -> RETURN ( . hyper_exp ) ;
    (75) hyper_exp -> . super_exp hyper_exp_1
    (79) super_exp -> . exp super_exp_1
    (85) exp -> . term exp_1
    (89) term -> . factor term_1
    (94) factor -> . constant
    (95) factor -> . variable
    (96) factor -> . ( hyper_exp )
    (97) constant -> . VAL_INT np_push_const_int
    (98) constant -> . VAL_FLOAT np_push_const_float
    (99) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 97
    VAL_INT         shift and go to state 105
    VAL_FLOAT       shift and go to state 101
    VAL_CHAR        shift and go to state 102
    ID              shift and go to state 87

    super_exp                      shift and go to state 96
    term                           shift and go to state 104
    hyper_exp                      shift and go to state 99
    constant                       shift and go to state 95
    exp                            shift and go to state 100
    factor                         shift and go to state 98
    variable                       shift and go to state 103

state 77

    (52) read -> READ ( . variable_loop ) ;
    (53) variable_loop -> . variable np_add_to_input_counter variable_loop_1
    (8) variable -> . ID np_single_var_process

    ID              shift and go to state 87

    variable                       shift and go to state 106
    variable_loop                  shift and go to state 107

state 78

    (67) condicional -> WHILE np_cond_1 . ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3

    (               shift and go to state 108


state 79

    (68) np_cond_1 -> epsilon .

    (               reduce using rule 68 (np_cond_1 -> epsilon .)


state 80

    (39) estatuto -> func_llamada ; .

    ID              reduce using rule 39 (estatuto -> func_llamada ; .)
    READ            reduce using rule 39 (estatuto -> func_llamada ; .)
    WRITE           reduce using rule 39 (estatuto -> func_llamada ; .)
    IF              reduce using rule 39 (estatuto -> func_llamada ; .)
    RETURN          reduce using rule 39 (estatuto -> func_llamada ; .)
    WHILE           reduce using rule 39 (estatuto -> func_llamada ; .)
    FOR             reduce using rule 39 (estatuto -> func_llamada ; .)
    }               reduce using rule 39 (estatuto -> func_llamada ; .)


state 81

    (4) main -> MAIN ( ) { loop_estatuto } . np_fin_total
    (5) np_fin_total -> . epsilon
    (104) epsilon -> .

    $end            reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 109
    np_fin_total                   shift and go to state 110

state 82

    (63) loop_estatuto -> estatuto loop_estatuto .

    }               reduce using rule 63 (loop_estatuto -> estatuto loop_estatuto .)


state 83

    (46) func_llamada -> ID ( . )
    (47) func_llamada -> ID ( . hyper_exp_loop )
    (48) hyper_exp_loop -> . hyper_exp np_add_to_input_counter hyper_exp_loop_1
    (75) hyper_exp -> . super_exp hyper_exp_1
    (79) super_exp -> . exp super_exp_1
    (85) exp -> . term exp_1
    (89) term -> . factor term_1
    (94) factor -> . constant
    (95) factor -> . variable
    (96) factor -> . ( hyper_exp )
    (97) constant -> . VAL_INT np_push_const_int
    (98) constant -> . VAL_FLOAT np_push_const_float
    (99) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    )               shift and go to state 112
    (               shift and go to state 97
    VAL_INT         shift and go to state 105
    VAL_FLOAT       shift and go to state 101
    VAL_CHAR        shift and go to state 102
    ID              shift and go to state 87

    super_exp                      shift and go to state 96
    term                           shift and go to state 104
    hyper_exp                      shift and go to state 113
    constant                       shift and go to state 95
    hyper_exp_loop                 shift and go to state 111
    exp                            shift and go to state 100
    factor                         shift and go to state 98
    variable                       shift and go to state 103

state 84

    (8) variable -> ID np_single_var_process .

    *               reduce using rule 8 (variable -> ID np_single_var_process .)
    /               reduce using rule 8 (variable -> ID np_single_var_process .)
    +               reduce using rule 8 (variable -> ID np_single_var_process .)
    -               reduce using rule 8 (variable -> ID np_single_var_process .)
    <               reduce using rule 8 (variable -> ID np_single_var_process .)
    >               reduce using rule 8 (variable -> ID np_single_var_process .)
    EQUAL_TO        reduce using rule 8 (variable -> ID np_single_var_process .)
    NOT_EQUAL_TO    reduce using rule 8 (variable -> ID np_single_var_process .)
    &               reduce using rule 8 (variable -> ID np_single_var_process .)
    |               reduce using rule 8 (variable -> ID np_single_var_process .)
    )               reduce using rule 8 (variable -> ID np_single_var_process .)
    ,               reduce using rule 8 (variable -> ID np_single_var_process .)
    ;               reduce using rule 8 (variable -> ID np_single_var_process .)
    TO              reduce using rule 8 (variable -> ID np_single_var_process .)
    DO              reduce using rule 8 (variable -> ID np_single_var_process .)
    =               reduce using rule 8 (variable -> ID np_single_var_process .)


state 85

    (103) np_single_var_process -> epsilon .

    =               reduce using rule 103 (np_single_var_process -> epsilon .)
    *               reduce using rule 103 (np_single_var_process -> epsilon .)
    /               reduce using rule 103 (np_single_var_process -> epsilon .)
    +               reduce using rule 103 (np_single_var_process -> epsilon .)
    -               reduce using rule 103 (np_single_var_process -> epsilon .)
    <               reduce using rule 103 (np_single_var_process -> epsilon .)
    >               reduce using rule 103 (np_single_var_process -> epsilon .)
    EQUAL_TO        reduce using rule 103 (np_single_var_process -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 103 (np_single_var_process -> epsilon .)
    &               reduce using rule 103 (np_single_var_process -> epsilon .)
    |               reduce using rule 103 (np_single_var_process -> epsilon .)
    )               reduce using rule 103 (np_single_var_process -> epsilon .)
    ,               reduce using rule 103 (np_single_var_process -> epsilon .)
    ;               reduce using rule 103 (np_single_var_process -> epsilon .)
    TO              reduce using rule 103 (np_single_var_process -> epsilon .)
    DO              reduce using rule 103 (np_single_var_process -> epsilon .)


state 86

    (71) no_condicional -> FOR variable . = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    =               shift and go to state 114


state 87

    (8) variable -> ID . np_single_var_process
    (103) np_single_var_process -> . epsilon
    (104) epsilon -> .

    =               reduce using rule 104 (epsilon -> .)
    *               reduce using rule 104 (epsilon -> .)
    /               reduce using rule 104 (epsilon -> .)
    +               reduce using rule 104 (epsilon -> .)
    -               reduce using rule 104 (epsilon -> .)
    <               reduce using rule 104 (epsilon -> .)
    >               reduce using rule 104 (epsilon -> .)
    EQUAL_TO        reduce using rule 104 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 104 (epsilon -> .)
    &               reduce using rule 104 (epsilon -> .)
    |               reduce using rule 104 (epsilon -> .)
    )               reduce using rule 104 (epsilon -> .)
    ,               reduce using rule 104 (epsilon -> .)
    ;               reduce using rule 104 (epsilon -> .)
    TO              reduce using rule 104 (epsilon -> .)
    DO              reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 85
    np_single_var_process          shift and go to state 84

state 88

    (57) write -> WRITE ( . hyper_exp_loop ) ;
    (48) hyper_exp_loop -> . hyper_exp np_add_to_input_counter hyper_exp_loop_1
    (75) hyper_exp -> . super_exp hyper_exp_1
    (79) super_exp -> . exp super_exp_1
    (85) exp -> . term exp_1
    (89) term -> . factor term_1
    (94) factor -> . constant
    (95) factor -> . variable
    (96) factor -> . ( hyper_exp )
    (97) constant -> . VAL_INT np_push_const_int
    (98) constant -> . VAL_FLOAT np_push_const_float
    (99) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 97
    VAL_INT         shift and go to state 105
    VAL_FLOAT       shift and go to state 101
    VAL_CHAR        shift and go to state 102
    ID              shift and go to state 87

    super_exp                      shift and go to state 96
    term                           shift and go to state 104
    hyper_exp                      shift and go to state 113
    constant                       shift and go to state 95
    hyper_exp_loop                 shift and go to state 115
    exp                            shift and go to state 100
    factor                         shift and go to state 98
    variable                       shift and go to state 103

state 89

    (45) asignacion -> variable = . hyper_exp ;
    (75) hyper_exp -> . super_exp hyper_exp_1
    (79) super_exp -> . exp super_exp_1
    (85) exp -> . term exp_1
    (89) term -> . factor term_1
    (94) factor -> . constant
    (95) factor -> . variable
    (96) factor -> . ( hyper_exp )
    (97) constant -> . VAL_INT np_push_const_int
    (98) constant -> . VAL_FLOAT np_push_const_float
    (99) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 97
    VAL_INT         shift and go to state 105
    VAL_FLOAT       shift and go to state 101
    VAL_CHAR        shift and go to state 102
    ID              shift and go to state 87

    super_exp                      shift and go to state 96
    term                           shift and go to state 104
    hyper_exp                      shift and go to state 116
    constant                       shift and go to state 95
    exp                            shift and go to state 100
    factor                         shift and go to state 98
    variable                       shift and go to state 103

state 90

    (58) decision -> IF ( . hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (75) hyper_exp -> . super_exp hyper_exp_1
    (79) super_exp -> . exp super_exp_1
    (85) exp -> . term exp_1
    (89) term -> . factor term_1
    (94) factor -> . constant
    (95) factor -> . variable
    (96) factor -> . ( hyper_exp )
    (97) constant -> . VAL_INT np_push_const_int
    (98) constant -> . VAL_FLOAT np_push_const_float
    (99) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 97
    VAL_INT         shift and go to state 105
    VAL_FLOAT       shift and go to state 101
    VAL_CHAR        shift and go to state 102
    ID              shift and go to state 87

    super_exp                      shift and go to state 96
    term                           shift and go to state 104
    hyper_exp                      shift and go to state 117
    constant                       shift and go to state 95
    exp                            shift and go to state 100
    factor                         shift and go to state 98
    variable                       shift and go to state 103

state 91

    (14) loop_var_decl_mismo_tipo -> , ID . np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo
    (17) np_set_curr_var_name -> . epsilon
    (104) epsilon -> .

    ,               reduce using rule 104 (epsilon -> .)
    ;               reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 43
    np_set_curr_var_name           shift and go to state 118

state 92

    (13) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ; .

    INT             reduce using rule 13 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    FLOAT           reduce using rule 13 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    CHAR            reduce using rule 13 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    BOOL            reduce using rule 13 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    FUNCTION        reduce using rule 13 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    MAIN            reduce using rule 13 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    {               reduce using rule 13 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)


state 93

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params . func_parametro ) ; var_opcional { loop_estatuto } np_kill_func
    (29) func_parametro -> . parametro
    (30) func_parametro -> . epsilon
    (31) parametro -> . tipo ID loop_parametro
    (104) epsilon -> .
    (34) tipo -> . INT
    (35) tipo -> . FLOAT
    (36) tipo -> . CHAR
    (37) tipo -> . BOOL

    )               reduce using rule 104 (epsilon -> .)
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 24

    tipo                           shift and go to state 120
    parametro                      shift and go to state 121
    epsilon                        shift and go to state 122
    func_parametro                 shift and go to state 119

state 94

    (28) np_prep_func_params -> epsilon .

    INT             reduce using rule 28 (np_prep_func_params -> epsilon .)
    FLOAT           reduce using rule 28 (np_prep_func_params -> epsilon .)
    CHAR            reduce using rule 28 (np_prep_func_params -> epsilon .)
    BOOL            reduce using rule 28 (np_prep_func_params -> epsilon .)
    )               reduce using rule 28 (np_prep_func_params -> epsilon .)


state 95

    (94) factor -> constant .

    *               reduce using rule 94 (factor -> constant .)
    /               reduce using rule 94 (factor -> constant .)
    +               reduce using rule 94 (factor -> constant .)
    -               reduce using rule 94 (factor -> constant .)
    <               reduce using rule 94 (factor -> constant .)
    >               reduce using rule 94 (factor -> constant .)
    EQUAL_TO        reduce using rule 94 (factor -> constant .)
    NOT_EQUAL_TO    reduce using rule 94 (factor -> constant .)
    &               reduce using rule 94 (factor -> constant .)
    |               reduce using rule 94 (factor -> constant .)
    ,               reduce using rule 94 (factor -> constant .)
    )               reduce using rule 94 (factor -> constant .)
    ;               reduce using rule 94 (factor -> constant .)
    TO              reduce using rule 94 (factor -> constant .)
    DO              reduce using rule 94 (factor -> constant .)


state 96

    (75) hyper_exp -> super_exp . hyper_exp_1
    (76) hyper_exp_1 -> . & np_push_operator_stack super_exp
    (77) hyper_exp_1 -> . | np_push_operator_stack super_exp
    (78) hyper_exp_1 -> . epsilon
    (104) epsilon -> .

    &               shift and go to state 123
    |               shift and go to state 126
    )               reduce using rule 104 (epsilon -> .)
    ,               reduce using rule 104 (epsilon -> .)
    ;               reduce using rule 104 (epsilon -> .)
    TO              reduce using rule 104 (epsilon -> .)
    DO              reduce using rule 104 (epsilon -> .)

    hyper_exp_1                    shift and go to state 125
    epsilon                        shift and go to state 124

state 97

    (96) factor -> ( . hyper_exp )
    (75) hyper_exp -> . super_exp hyper_exp_1
    (79) super_exp -> . exp super_exp_1
    (85) exp -> . term exp_1
    (89) term -> . factor term_1
    (94) factor -> . constant
    (95) factor -> . variable
    (96) factor -> . ( hyper_exp )
    (97) constant -> . VAL_INT np_push_const_int
    (98) constant -> . VAL_FLOAT np_push_const_float
    (99) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 97
    VAL_INT         shift and go to state 105
    VAL_FLOAT       shift and go to state 101
    VAL_CHAR        shift and go to state 102
    ID              shift and go to state 87

    super_exp                      shift and go to state 96
    term                           shift and go to state 104
    hyper_exp                      shift and go to state 127
    constant                       shift and go to state 95
    exp                            shift and go to state 100
    factor                         shift and go to state 98
    variable                       shift and go to state 103

state 98

    (89) term -> factor . term_1
    (90) term_1 -> . * np_push_operator_stack factor
    (91) term_1 -> . / np_push_operator_stack factor
    (92) term_1 -> . epsilon
    (104) epsilon -> .

    *               shift and go to state 129
    /               shift and go to state 130
    +               reduce using rule 104 (epsilon -> .)
    -               reduce using rule 104 (epsilon -> .)
    <               reduce using rule 104 (epsilon -> .)
    >               reduce using rule 104 (epsilon -> .)
    EQUAL_TO        reduce using rule 104 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 104 (epsilon -> .)
    &               reduce using rule 104 (epsilon -> .)
    |               reduce using rule 104 (epsilon -> .)
    )               reduce using rule 104 (epsilon -> .)
    ,               reduce using rule 104 (epsilon -> .)
    ;               reduce using rule 104 (epsilon -> .)
    TO              reduce using rule 104 (epsilon -> .)
    DO              reduce using rule 104 (epsilon -> .)

    term_1                         shift and go to state 131
    epsilon                        shift and go to state 128

state 99

    (51) func_return -> RETURN ( hyper_exp . ) ;

    )               shift and go to state 132


state 100

    (79) super_exp -> exp . super_exp_1
    (80) super_exp_1 -> . < np_push_operator_stack exp
    (81) super_exp_1 -> . > np_push_operator_stack exp
    (82) super_exp_1 -> . EQUAL_TO np_push_operator_stack exp
    (83) super_exp_1 -> . NOT_EQUAL_TO np_push_operator_stack exp
    (84) super_exp_1 -> . epsilon
    (104) epsilon -> .

    <               shift and go to state 137
    >               shift and go to state 138
    EQUAL_TO        shift and go to state 133
    NOT_EQUAL_TO    shift and go to state 134
    &               reduce using rule 104 (epsilon -> .)
    |               reduce using rule 104 (epsilon -> .)
    )               reduce using rule 104 (epsilon -> .)
    ,               reduce using rule 104 (epsilon -> .)
    ;               reduce using rule 104 (epsilon -> .)
    TO              reduce using rule 104 (epsilon -> .)
    DO              reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 135
    super_exp_1                    shift and go to state 136

state 101

    (98) constant -> VAL_FLOAT . np_push_const_float
    (101) np_push_const_float -> . epsilon
    (104) epsilon -> .

    *               reduce using rule 104 (epsilon -> .)
    /               reduce using rule 104 (epsilon -> .)
    +               reduce using rule 104 (epsilon -> .)
    -               reduce using rule 104 (epsilon -> .)
    <               reduce using rule 104 (epsilon -> .)
    >               reduce using rule 104 (epsilon -> .)
    EQUAL_TO        reduce using rule 104 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 104 (epsilon -> .)
    &               reduce using rule 104 (epsilon -> .)
    |               reduce using rule 104 (epsilon -> .)
    )               reduce using rule 104 (epsilon -> .)
    ,               reduce using rule 104 (epsilon -> .)
    ;               reduce using rule 104 (epsilon -> .)
    TO              reduce using rule 104 (epsilon -> .)
    DO              reduce using rule 104 (epsilon -> .)

    np_push_const_float            shift and go to state 139
    epsilon                        shift and go to state 140

state 102

    (99) constant -> VAL_CHAR . np_push_const_char
    (102) np_push_const_char -> . epsilon
    (104) epsilon -> .

    *               reduce using rule 104 (epsilon -> .)
    /               reduce using rule 104 (epsilon -> .)
    +               reduce using rule 104 (epsilon -> .)
    -               reduce using rule 104 (epsilon -> .)
    <               reduce using rule 104 (epsilon -> .)
    >               reduce using rule 104 (epsilon -> .)
    EQUAL_TO        reduce using rule 104 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 104 (epsilon -> .)
    &               reduce using rule 104 (epsilon -> .)
    |               reduce using rule 104 (epsilon -> .)
    )               reduce using rule 104 (epsilon -> .)
    ,               reduce using rule 104 (epsilon -> .)
    ;               reduce using rule 104 (epsilon -> .)
    TO              reduce using rule 104 (epsilon -> .)
    DO              reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 141
    np_push_const_char             shift and go to state 142

state 103

    (95) factor -> variable .

    *               reduce using rule 95 (factor -> variable .)
    /               reduce using rule 95 (factor -> variable .)
    +               reduce using rule 95 (factor -> variable .)
    -               reduce using rule 95 (factor -> variable .)
    <               reduce using rule 95 (factor -> variable .)
    >               reduce using rule 95 (factor -> variable .)
    EQUAL_TO        reduce using rule 95 (factor -> variable .)
    NOT_EQUAL_TO    reduce using rule 95 (factor -> variable .)
    &               reduce using rule 95 (factor -> variable .)
    |               reduce using rule 95 (factor -> variable .)
    ,               reduce using rule 95 (factor -> variable .)
    )               reduce using rule 95 (factor -> variable .)
    ;               reduce using rule 95 (factor -> variable .)
    TO              reduce using rule 95 (factor -> variable .)
    DO              reduce using rule 95 (factor -> variable .)


state 104

    (85) exp -> term . exp_1
    (86) exp_1 -> . + np_push_operator_stack term
    (87) exp_1 -> . - np_push_operator_stack term
    (88) exp_1 -> . epsilon
    (104) epsilon -> .

    +               shift and go to state 144
    -               shift and go to state 145
    <               reduce using rule 104 (epsilon -> .)
    >               reduce using rule 104 (epsilon -> .)
    EQUAL_TO        reduce using rule 104 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 104 (epsilon -> .)
    &               reduce using rule 104 (epsilon -> .)
    |               reduce using rule 104 (epsilon -> .)
    )               reduce using rule 104 (epsilon -> .)
    ,               reduce using rule 104 (epsilon -> .)
    ;               reduce using rule 104 (epsilon -> .)
    TO              reduce using rule 104 (epsilon -> .)
    DO              reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 143
    exp_1                          shift and go to state 146

state 105

    (97) constant -> VAL_INT . np_push_const_int
    (100) np_push_const_int -> . epsilon
    (104) epsilon -> .

    *               reduce using rule 104 (epsilon -> .)
    /               reduce using rule 104 (epsilon -> .)
    +               reduce using rule 104 (epsilon -> .)
    -               reduce using rule 104 (epsilon -> .)
    <               reduce using rule 104 (epsilon -> .)
    >               reduce using rule 104 (epsilon -> .)
    EQUAL_TO        reduce using rule 104 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 104 (epsilon -> .)
    &               reduce using rule 104 (epsilon -> .)
    |               reduce using rule 104 (epsilon -> .)
    )               reduce using rule 104 (epsilon -> .)
    ,               reduce using rule 104 (epsilon -> .)
    ;               reduce using rule 104 (epsilon -> .)
    TO              reduce using rule 104 (epsilon -> .)
    DO              reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 147
    np_push_const_int              shift and go to state 148

state 106

    (53) variable_loop -> variable . np_add_to_input_counter variable_loop_1
    (56) np_add_to_input_counter -> . epsilon
    (104) epsilon -> .

    ,               reduce using rule 104 (epsilon -> .)
    )               reduce using rule 104 (epsilon -> .)

    np_add_to_input_counter        shift and go to state 149
    epsilon                        shift and go to state 150

state 107

    (52) read -> READ ( variable_loop . ) ;

    )               shift and go to state 151


state 108

    (67) condicional -> WHILE np_cond_1 ( . hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (75) hyper_exp -> . super_exp hyper_exp_1
    (79) super_exp -> . exp super_exp_1
    (85) exp -> . term exp_1
    (89) term -> . factor term_1
    (94) factor -> . constant
    (95) factor -> . variable
    (96) factor -> . ( hyper_exp )
    (97) constant -> . VAL_INT np_push_const_int
    (98) constant -> . VAL_FLOAT np_push_const_float
    (99) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 97
    VAL_INT         shift and go to state 105
    VAL_FLOAT       shift and go to state 101
    VAL_CHAR        shift and go to state 102
    ID              shift and go to state 87

    super_exp                      shift and go to state 96
    hyper_exp                      shift and go to state 152
    constant                       shift and go to state 95
    term                           shift and go to state 104
    exp                            shift and go to state 100
    factor                         shift and go to state 98
    variable                       shift and go to state 103

state 109

    (5) np_fin_total -> epsilon .

    $end            reduce using rule 5 (np_fin_total -> epsilon .)


state 110

    (4) main -> MAIN ( ) { loop_estatuto } np_fin_total .

    $end            reduce using rule 4 (main -> MAIN ( ) { loop_estatuto } np_fin_total .)


state 111

    (47) func_llamada -> ID ( hyper_exp_loop . )

    )               shift and go to state 153


state 112

    (46) func_llamada -> ID ( ) .

    ;               reduce using rule 46 (func_llamada -> ID ( ) .)


state 113

    (48) hyper_exp_loop -> hyper_exp . np_add_to_input_counter hyper_exp_loop_1
    (56) np_add_to_input_counter -> . epsilon
    (104) epsilon -> .

    ,               reduce using rule 104 (epsilon -> .)
    )               reduce using rule 104 (epsilon -> .)

    np_add_to_input_counter        shift and go to state 154
    epsilon                        shift and go to state 150

state 114

    (71) no_condicional -> FOR variable = . hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }
    (75) hyper_exp -> . super_exp hyper_exp_1
    (79) super_exp -> . exp super_exp_1
    (85) exp -> . term exp_1
    (89) term -> . factor term_1
    (94) factor -> . constant
    (95) factor -> . variable
    (96) factor -> . ( hyper_exp )
    (97) constant -> . VAL_INT np_push_const_int
    (98) constant -> . VAL_FLOAT np_push_const_float
    (99) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 97
    VAL_INT         shift and go to state 105
    VAL_FLOAT       shift and go to state 101
    VAL_CHAR        shift and go to state 102
    ID              shift and go to state 87

    super_exp                      shift and go to state 96
    term                           shift and go to state 104
    hyper_exp                      shift and go to state 155
    constant                       shift and go to state 95
    exp                            shift and go to state 100
    factor                         shift and go to state 98
    variable                       shift and go to state 103

state 115

    (57) write -> WRITE ( hyper_exp_loop . ) ;

    )               shift and go to state 156


state 116

    (45) asignacion -> variable = hyper_exp . ;

    ;               shift and go to state 157


state 117

    (58) decision -> IF ( hyper_exp . ) np_decision_1 THEN { loop_estatuto } decision_else

    )               shift and go to state 158


state 118

    (14) loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name . np_add_var_to_varstable loop_var_decl_mismo_tipo
    (18) np_add_var_to_varstable -> . epsilon
    (104) epsilon -> .

    ,               reduce using rule 104 (epsilon -> .)
    ;               reduce using rule 104 (epsilon -> .)

    np_add_var_to_varstable        shift and go to state 159
    epsilon                        shift and go to state 49

state 119

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro . ) ; var_opcional { loop_estatuto } np_kill_func

    )               shift and go to state 160


state 120

    (31) parametro -> tipo . ID loop_parametro

    ID              shift and go to state 161


state 121

    (29) func_parametro -> parametro .

    )               reduce using rule 29 (func_parametro -> parametro .)


state 122

    (30) func_parametro -> epsilon .

    )               reduce using rule 30 (func_parametro -> epsilon .)


state 123

    (76) hyper_exp_1 -> & . np_push_operator_stack super_exp
    (93) np_push_operator_stack -> . epsilon
    (104) epsilon -> .

    (               reduce using rule 104 (epsilon -> .)
    VAL_INT         reduce using rule 104 (epsilon -> .)
    VAL_FLOAT       reduce using rule 104 (epsilon -> .)
    VAL_CHAR        reduce using rule 104 (epsilon -> .)
    ID              reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 162
    np_push_operator_stack         shift and go to state 163

state 124

    (78) hyper_exp_1 -> epsilon .

    )               reduce using rule 78 (hyper_exp_1 -> epsilon .)
    ,               reduce using rule 78 (hyper_exp_1 -> epsilon .)
    ;               reduce using rule 78 (hyper_exp_1 -> epsilon .)
    TO              reduce using rule 78 (hyper_exp_1 -> epsilon .)
    DO              reduce using rule 78 (hyper_exp_1 -> epsilon .)


state 125

    (75) hyper_exp -> super_exp hyper_exp_1 .

    ;               reduce using rule 75 (hyper_exp -> super_exp hyper_exp_1 .)
    )               reduce using rule 75 (hyper_exp -> super_exp hyper_exp_1 .)
    DO              reduce using rule 75 (hyper_exp -> super_exp hyper_exp_1 .)
    ,               reduce using rule 75 (hyper_exp -> super_exp hyper_exp_1 .)
    TO              reduce using rule 75 (hyper_exp -> super_exp hyper_exp_1 .)


state 126

    (77) hyper_exp_1 -> | . np_push_operator_stack super_exp
    (93) np_push_operator_stack -> . epsilon
    (104) epsilon -> .

    (               reduce using rule 104 (epsilon -> .)
    VAL_INT         reduce using rule 104 (epsilon -> .)
    VAL_FLOAT       reduce using rule 104 (epsilon -> .)
    VAL_CHAR        reduce using rule 104 (epsilon -> .)
    ID              reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 162
    np_push_operator_stack         shift and go to state 164

state 127

    (96) factor -> ( hyper_exp . )

    )               shift and go to state 165


state 128

    (92) term_1 -> epsilon .

    +               reduce using rule 92 (term_1 -> epsilon .)
    -               reduce using rule 92 (term_1 -> epsilon .)
    <               reduce using rule 92 (term_1 -> epsilon .)
    >               reduce using rule 92 (term_1 -> epsilon .)
    EQUAL_TO        reduce using rule 92 (term_1 -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 92 (term_1 -> epsilon .)
    &               reduce using rule 92 (term_1 -> epsilon .)
    |               reduce using rule 92 (term_1 -> epsilon .)
    )               reduce using rule 92 (term_1 -> epsilon .)
    ,               reduce using rule 92 (term_1 -> epsilon .)
    ;               reduce using rule 92 (term_1 -> epsilon .)
    TO              reduce using rule 92 (term_1 -> epsilon .)
    DO              reduce using rule 92 (term_1 -> epsilon .)


state 129

    (90) term_1 -> * . np_push_operator_stack factor
    (93) np_push_operator_stack -> . epsilon
    (104) epsilon -> .

    (               reduce using rule 104 (epsilon -> .)
    VAL_INT         reduce using rule 104 (epsilon -> .)
    VAL_FLOAT       reduce using rule 104 (epsilon -> .)
    VAL_CHAR        reduce using rule 104 (epsilon -> .)
    ID              reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 162
    np_push_operator_stack         shift and go to state 166

state 130

    (91) term_1 -> / . np_push_operator_stack factor
    (93) np_push_operator_stack -> . epsilon
    (104) epsilon -> .

    (               reduce using rule 104 (epsilon -> .)
    VAL_INT         reduce using rule 104 (epsilon -> .)
    VAL_FLOAT       reduce using rule 104 (epsilon -> .)
    VAL_CHAR        reduce using rule 104 (epsilon -> .)
    ID              reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 162
    np_push_operator_stack         shift and go to state 167

state 131

    (89) term -> factor term_1 .

    +               reduce using rule 89 (term -> factor term_1 .)
    -               reduce using rule 89 (term -> factor term_1 .)
    <               reduce using rule 89 (term -> factor term_1 .)
    >               reduce using rule 89 (term -> factor term_1 .)
    EQUAL_TO        reduce using rule 89 (term -> factor term_1 .)
    NOT_EQUAL_TO    reduce using rule 89 (term -> factor term_1 .)
    )               reduce using rule 89 (term -> factor term_1 .)
    ,               reduce using rule 89 (term -> factor term_1 .)
    ;               reduce using rule 89 (term -> factor term_1 .)
    TO              reduce using rule 89 (term -> factor term_1 .)
    DO              reduce using rule 89 (term -> factor term_1 .)
    &               reduce using rule 89 (term -> factor term_1 .)
    |               reduce using rule 89 (term -> factor term_1 .)


state 132

    (51) func_return -> RETURN ( hyper_exp ) . ;

    ;               shift and go to state 168


state 133

    (82) super_exp_1 -> EQUAL_TO . np_push_operator_stack exp
    (93) np_push_operator_stack -> . epsilon
    (104) epsilon -> .

    (               reduce using rule 104 (epsilon -> .)
    VAL_INT         reduce using rule 104 (epsilon -> .)
    VAL_FLOAT       reduce using rule 104 (epsilon -> .)
    VAL_CHAR        reduce using rule 104 (epsilon -> .)
    ID              reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 162
    np_push_operator_stack         shift and go to state 169

state 134

    (83) super_exp_1 -> NOT_EQUAL_TO . np_push_operator_stack exp
    (93) np_push_operator_stack -> . epsilon
    (104) epsilon -> .

    (               reduce using rule 104 (epsilon -> .)
    VAL_INT         reduce using rule 104 (epsilon -> .)
    VAL_FLOAT       reduce using rule 104 (epsilon -> .)
    VAL_CHAR        reduce using rule 104 (epsilon -> .)
    ID              reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 162
    np_push_operator_stack         shift and go to state 170

state 135

    (84) super_exp_1 -> epsilon .

    &               reduce using rule 84 (super_exp_1 -> epsilon .)
    |               reduce using rule 84 (super_exp_1 -> epsilon .)
    )               reduce using rule 84 (super_exp_1 -> epsilon .)
    ,               reduce using rule 84 (super_exp_1 -> epsilon .)
    ;               reduce using rule 84 (super_exp_1 -> epsilon .)
    TO              reduce using rule 84 (super_exp_1 -> epsilon .)
    DO              reduce using rule 84 (super_exp_1 -> epsilon .)


state 136

    (79) super_exp -> exp super_exp_1 .

    &               reduce using rule 79 (super_exp -> exp super_exp_1 .)
    |               reduce using rule 79 (super_exp -> exp super_exp_1 .)
    ,               reduce using rule 79 (super_exp -> exp super_exp_1 .)
    )               reduce using rule 79 (super_exp -> exp super_exp_1 .)
    DO              reduce using rule 79 (super_exp -> exp super_exp_1 .)
    ;               reduce using rule 79 (super_exp -> exp super_exp_1 .)
    TO              reduce using rule 79 (super_exp -> exp super_exp_1 .)


state 137

    (80) super_exp_1 -> < . np_push_operator_stack exp
    (93) np_push_operator_stack -> . epsilon
    (104) epsilon -> .

    (               reduce using rule 104 (epsilon -> .)
    VAL_INT         reduce using rule 104 (epsilon -> .)
    VAL_FLOAT       reduce using rule 104 (epsilon -> .)
    VAL_CHAR        reduce using rule 104 (epsilon -> .)
    ID              reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 162
    np_push_operator_stack         shift and go to state 171

state 138

    (81) super_exp_1 -> > . np_push_operator_stack exp
    (93) np_push_operator_stack -> . epsilon
    (104) epsilon -> .

    (               reduce using rule 104 (epsilon -> .)
    VAL_INT         reduce using rule 104 (epsilon -> .)
    VAL_FLOAT       reduce using rule 104 (epsilon -> .)
    VAL_CHAR        reduce using rule 104 (epsilon -> .)
    ID              reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 162
    np_push_operator_stack         shift and go to state 172

state 139

    (98) constant -> VAL_FLOAT np_push_const_float .

    +               reduce using rule 98 (constant -> VAL_FLOAT np_push_const_float .)
    -               reduce using rule 98 (constant -> VAL_FLOAT np_push_const_float .)
    <               reduce using rule 98 (constant -> VAL_FLOAT np_push_const_float .)
    >               reduce using rule 98 (constant -> VAL_FLOAT np_push_const_float .)
    EQUAL_TO        reduce using rule 98 (constant -> VAL_FLOAT np_push_const_float .)
    NOT_EQUAL_TO    reduce using rule 98 (constant -> VAL_FLOAT np_push_const_float .)
    &               reduce using rule 98 (constant -> VAL_FLOAT np_push_const_float .)
    |               reduce using rule 98 (constant -> VAL_FLOAT np_push_const_float .)
    )               reduce using rule 98 (constant -> VAL_FLOAT np_push_const_float .)
    ,               reduce using rule 98 (constant -> VAL_FLOAT np_push_const_float .)
    ;               reduce using rule 98 (constant -> VAL_FLOAT np_push_const_float .)
    TO              reduce using rule 98 (constant -> VAL_FLOAT np_push_const_float .)
    DO              reduce using rule 98 (constant -> VAL_FLOAT np_push_const_float .)
    *               reduce using rule 98 (constant -> VAL_FLOAT np_push_const_float .)
    /               reduce using rule 98 (constant -> VAL_FLOAT np_push_const_float .)


state 140

    (101) np_push_const_float -> epsilon .

    *               reduce using rule 101 (np_push_const_float -> epsilon .)
    /               reduce using rule 101 (np_push_const_float -> epsilon .)
    +               reduce using rule 101 (np_push_const_float -> epsilon .)
    -               reduce using rule 101 (np_push_const_float -> epsilon .)
    <               reduce using rule 101 (np_push_const_float -> epsilon .)
    >               reduce using rule 101 (np_push_const_float -> epsilon .)
    EQUAL_TO        reduce using rule 101 (np_push_const_float -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 101 (np_push_const_float -> epsilon .)
    &               reduce using rule 101 (np_push_const_float -> epsilon .)
    |               reduce using rule 101 (np_push_const_float -> epsilon .)
    )               reduce using rule 101 (np_push_const_float -> epsilon .)
    ,               reduce using rule 101 (np_push_const_float -> epsilon .)
    ;               reduce using rule 101 (np_push_const_float -> epsilon .)
    TO              reduce using rule 101 (np_push_const_float -> epsilon .)
    DO              reduce using rule 101 (np_push_const_float -> epsilon .)


state 141

    (102) np_push_const_char -> epsilon .

    *               reduce using rule 102 (np_push_const_char -> epsilon .)
    /               reduce using rule 102 (np_push_const_char -> epsilon .)
    +               reduce using rule 102 (np_push_const_char -> epsilon .)
    -               reduce using rule 102 (np_push_const_char -> epsilon .)
    <               reduce using rule 102 (np_push_const_char -> epsilon .)
    >               reduce using rule 102 (np_push_const_char -> epsilon .)
    EQUAL_TO        reduce using rule 102 (np_push_const_char -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 102 (np_push_const_char -> epsilon .)
    &               reduce using rule 102 (np_push_const_char -> epsilon .)
    |               reduce using rule 102 (np_push_const_char -> epsilon .)
    )               reduce using rule 102 (np_push_const_char -> epsilon .)
    ,               reduce using rule 102 (np_push_const_char -> epsilon .)
    ;               reduce using rule 102 (np_push_const_char -> epsilon .)
    TO              reduce using rule 102 (np_push_const_char -> epsilon .)
    DO              reduce using rule 102 (np_push_const_char -> epsilon .)


state 142

    (99) constant -> VAL_CHAR np_push_const_char .

    +               reduce using rule 99 (constant -> VAL_CHAR np_push_const_char .)
    -               reduce using rule 99 (constant -> VAL_CHAR np_push_const_char .)
    <               reduce using rule 99 (constant -> VAL_CHAR np_push_const_char .)
    >               reduce using rule 99 (constant -> VAL_CHAR np_push_const_char .)
    EQUAL_TO        reduce using rule 99 (constant -> VAL_CHAR np_push_const_char .)
    NOT_EQUAL_TO    reduce using rule 99 (constant -> VAL_CHAR np_push_const_char .)
    &               reduce using rule 99 (constant -> VAL_CHAR np_push_const_char .)
    |               reduce using rule 99 (constant -> VAL_CHAR np_push_const_char .)
    )               reduce using rule 99 (constant -> VAL_CHAR np_push_const_char .)
    ,               reduce using rule 99 (constant -> VAL_CHAR np_push_const_char .)
    ;               reduce using rule 99 (constant -> VAL_CHAR np_push_const_char .)
    TO              reduce using rule 99 (constant -> VAL_CHAR np_push_const_char .)
    DO              reduce using rule 99 (constant -> VAL_CHAR np_push_const_char .)
    *               reduce using rule 99 (constant -> VAL_CHAR np_push_const_char .)
    /               reduce using rule 99 (constant -> VAL_CHAR np_push_const_char .)


state 143

    (88) exp_1 -> epsilon .

    <               reduce using rule 88 (exp_1 -> epsilon .)
    >               reduce using rule 88 (exp_1 -> epsilon .)
    EQUAL_TO        reduce using rule 88 (exp_1 -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 88 (exp_1 -> epsilon .)
    &               reduce using rule 88 (exp_1 -> epsilon .)
    |               reduce using rule 88 (exp_1 -> epsilon .)
    )               reduce using rule 88 (exp_1 -> epsilon .)
    ,               reduce using rule 88 (exp_1 -> epsilon .)
    ;               reduce using rule 88 (exp_1 -> epsilon .)
    TO              reduce using rule 88 (exp_1 -> epsilon .)
    DO              reduce using rule 88 (exp_1 -> epsilon .)


state 144

    (86) exp_1 -> + . np_push_operator_stack term
    (93) np_push_operator_stack -> . epsilon
    (104) epsilon -> .

    (               reduce using rule 104 (epsilon -> .)
    VAL_INT         reduce using rule 104 (epsilon -> .)
    VAL_FLOAT       reduce using rule 104 (epsilon -> .)
    VAL_CHAR        reduce using rule 104 (epsilon -> .)
    ID              reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 162
    np_push_operator_stack         shift and go to state 173

state 145

    (87) exp_1 -> - . np_push_operator_stack term
    (93) np_push_operator_stack -> . epsilon
    (104) epsilon -> .

    (               reduce using rule 104 (epsilon -> .)
    VAL_INT         reduce using rule 104 (epsilon -> .)
    VAL_FLOAT       reduce using rule 104 (epsilon -> .)
    VAL_CHAR        reduce using rule 104 (epsilon -> .)
    ID              reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 162
    np_push_operator_stack         shift and go to state 174

state 146

    (85) exp -> term exp_1 .

    <               reduce using rule 85 (exp -> term exp_1 .)
    >               reduce using rule 85 (exp -> term exp_1 .)
    EQUAL_TO        reduce using rule 85 (exp -> term exp_1 .)
    NOT_EQUAL_TO    reduce using rule 85 (exp -> term exp_1 .)
    &               reduce using rule 85 (exp -> term exp_1 .)
    |               reduce using rule 85 (exp -> term exp_1 .)
    ;               reduce using rule 85 (exp -> term exp_1 .)
    )               reduce using rule 85 (exp -> term exp_1 .)
    ,               reduce using rule 85 (exp -> term exp_1 .)
    TO              reduce using rule 85 (exp -> term exp_1 .)
    DO              reduce using rule 85 (exp -> term exp_1 .)


state 147

    (100) np_push_const_int -> epsilon .

    *               reduce using rule 100 (np_push_const_int -> epsilon .)
    /               reduce using rule 100 (np_push_const_int -> epsilon .)
    +               reduce using rule 100 (np_push_const_int -> epsilon .)
    -               reduce using rule 100 (np_push_const_int -> epsilon .)
    <               reduce using rule 100 (np_push_const_int -> epsilon .)
    >               reduce using rule 100 (np_push_const_int -> epsilon .)
    EQUAL_TO        reduce using rule 100 (np_push_const_int -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 100 (np_push_const_int -> epsilon .)
    &               reduce using rule 100 (np_push_const_int -> epsilon .)
    |               reduce using rule 100 (np_push_const_int -> epsilon .)
    )               reduce using rule 100 (np_push_const_int -> epsilon .)
    ,               reduce using rule 100 (np_push_const_int -> epsilon .)
    ;               reduce using rule 100 (np_push_const_int -> epsilon .)
    TO              reduce using rule 100 (np_push_const_int -> epsilon .)
    DO              reduce using rule 100 (np_push_const_int -> epsilon .)


state 148

    (97) constant -> VAL_INT np_push_const_int .

    +               reduce using rule 97 (constant -> VAL_INT np_push_const_int .)
    -               reduce using rule 97 (constant -> VAL_INT np_push_const_int .)
    <               reduce using rule 97 (constant -> VAL_INT np_push_const_int .)
    >               reduce using rule 97 (constant -> VAL_INT np_push_const_int .)
    EQUAL_TO        reduce using rule 97 (constant -> VAL_INT np_push_const_int .)
    NOT_EQUAL_TO    reduce using rule 97 (constant -> VAL_INT np_push_const_int .)
    &               reduce using rule 97 (constant -> VAL_INT np_push_const_int .)
    |               reduce using rule 97 (constant -> VAL_INT np_push_const_int .)
    )               reduce using rule 97 (constant -> VAL_INT np_push_const_int .)
    ,               reduce using rule 97 (constant -> VAL_INT np_push_const_int .)
    ;               reduce using rule 97 (constant -> VAL_INT np_push_const_int .)
    TO              reduce using rule 97 (constant -> VAL_INT np_push_const_int .)
    DO              reduce using rule 97 (constant -> VAL_INT np_push_const_int .)
    *               reduce using rule 97 (constant -> VAL_INT np_push_const_int .)
    /               reduce using rule 97 (constant -> VAL_INT np_push_const_int .)


state 149

    (53) variable_loop -> variable np_add_to_input_counter . variable_loop_1
    (54) variable_loop_1 -> . , variable np_add_to_input_counter variable_loop_1
    (55) variable_loop_1 -> . epsilon
    (104) epsilon -> .

    ,               shift and go to state 176
    )               reduce using rule 104 (epsilon -> .)

    variable_loop_1                shift and go to state 175
    epsilon                        shift and go to state 177

state 150

    (56) np_add_to_input_counter -> epsilon .

    ,               reduce using rule 56 (np_add_to_input_counter -> epsilon .)
    )               reduce using rule 56 (np_add_to_input_counter -> epsilon .)


state 151

    (52) read -> READ ( variable_loop ) . ;

    ;               shift and go to state 178


state 152

    (67) condicional -> WHILE np_cond_1 ( hyper_exp . ) np_cond_2 DO { loop_estatuto } np_cond_3

    )               shift and go to state 179


state 153

    (47) func_llamada -> ID ( hyper_exp_loop ) .

    ;               reduce using rule 47 (func_llamada -> ID ( hyper_exp_loop ) .)


state 154

    (48) hyper_exp_loop -> hyper_exp np_add_to_input_counter . hyper_exp_loop_1
    (49) hyper_exp_loop_1 -> . , hyper_exp np_add_to_input_counter hyper_exp_loop_1
    (50) hyper_exp_loop_1 -> . epsilon
    (104) epsilon -> .

    ,               shift and go to state 180
    )               reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 181
    hyper_exp_loop_1               shift and go to state 182

state 155

    (71) no_condicional -> FOR variable = hyper_exp . np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }
    (72) np_for_1 -> . epsilon
    (104) epsilon -> .

    TO              reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 184
    np_for_1                       shift and go to state 183

state 156

    (57) write -> WRITE ( hyper_exp_loop ) . ;

    ;               shift and go to state 185


state 157

    (45) asignacion -> variable = hyper_exp ; .

    ID              reduce using rule 45 (asignacion -> variable = hyper_exp ; .)
    READ            reduce using rule 45 (asignacion -> variable = hyper_exp ; .)
    WRITE           reduce using rule 45 (asignacion -> variable = hyper_exp ; .)
    IF              reduce using rule 45 (asignacion -> variable = hyper_exp ; .)
    RETURN          reduce using rule 45 (asignacion -> variable = hyper_exp ; .)
    WHILE           reduce using rule 45 (asignacion -> variable = hyper_exp ; .)
    FOR             reduce using rule 45 (asignacion -> variable = hyper_exp ; .)
    }               reduce using rule 45 (asignacion -> variable = hyper_exp ; .)


state 158

    (58) decision -> IF ( hyper_exp ) . np_decision_1 THEN { loop_estatuto } decision_else
    (61) np_decision_1 -> . epsilon
    (104) epsilon -> .

    THEN            reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 187
    np_decision_1                  shift and go to state 186

state 159

    (14) loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name np_add_var_to_varstable . loop_var_decl_mismo_tipo
    (14) loop_var_decl_mismo_tipo -> . , ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo
    (15) loop_var_decl_mismo_tipo -> . epsilon
    (104) epsilon -> .

    ,               shift and go to state 73
    ;               reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 72
    loop_var_decl_mismo_tipo       shift and go to state 188

state 160

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) . ; var_opcional { loop_estatuto } np_kill_func

    ;               shift and go to state 189


state 161

    (31) parametro -> tipo ID . loop_parametro
    (32) loop_parametro -> . , tipo ID loop_parametro
    (33) loop_parametro -> . epsilon
    (104) epsilon -> .

    ,               shift and go to state 192
    )               reduce using rule 104 (epsilon -> .)

    loop_parametro                 shift and go to state 190
    epsilon                        shift and go to state 191

state 162

    (93) np_push_operator_stack -> epsilon .

    (               reduce using rule 93 (np_push_operator_stack -> epsilon .)
    VAL_INT         reduce using rule 93 (np_push_operator_stack -> epsilon .)
    VAL_FLOAT       reduce using rule 93 (np_push_operator_stack -> epsilon .)
    VAL_CHAR        reduce using rule 93 (np_push_operator_stack -> epsilon .)
    ID              reduce using rule 93 (np_push_operator_stack -> epsilon .)


state 163

    (76) hyper_exp_1 -> & np_push_operator_stack . super_exp
    (79) super_exp -> . exp super_exp_1
    (85) exp -> . term exp_1
    (89) term -> . factor term_1
    (94) factor -> . constant
    (95) factor -> . variable
    (96) factor -> . ( hyper_exp )
    (97) constant -> . VAL_INT np_push_const_int
    (98) constant -> . VAL_FLOAT np_push_const_float
    (99) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 97
    VAL_INT         shift and go to state 105
    VAL_FLOAT       shift and go to state 101
    VAL_CHAR        shift and go to state 102
    ID              shift and go to state 87

    super_exp                      shift and go to state 193
    term                           shift and go to state 104
    constant                       shift and go to state 95
    exp                            shift and go to state 100
    factor                         shift and go to state 98
    variable                       shift and go to state 103

state 164

    (77) hyper_exp_1 -> | np_push_operator_stack . super_exp
    (79) super_exp -> . exp super_exp_1
    (85) exp -> . term exp_1
    (89) term -> . factor term_1
    (94) factor -> . constant
    (95) factor -> . variable
    (96) factor -> . ( hyper_exp )
    (97) constant -> . VAL_INT np_push_const_int
    (98) constant -> . VAL_FLOAT np_push_const_float
    (99) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 97
    VAL_INT         shift and go to state 105
    VAL_FLOAT       shift and go to state 101
    VAL_CHAR        shift and go to state 102
    ID              shift and go to state 87

    super_exp                      shift and go to state 194
    term                           shift and go to state 104
    constant                       shift and go to state 95
    exp                            shift and go to state 100
    factor                         shift and go to state 98
    variable                       shift and go to state 103

state 165

    (96) factor -> ( hyper_exp ) .

    *               reduce using rule 96 (factor -> ( hyper_exp ) .)
    /               reduce using rule 96 (factor -> ( hyper_exp ) .)
    +               reduce using rule 96 (factor -> ( hyper_exp ) .)
    -               reduce using rule 96 (factor -> ( hyper_exp ) .)
    <               reduce using rule 96 (factor -> ( hyper_exp ) .)
    >               reduce using rule 96 (factor -> ( hyper_exp ) .)
    EQUAL_TO        reduce using rule 96 (factor -> ( hyper_exp ) .)
    NOT_EQUAL_TO    reduce using rule 96 (factor -> ( hyper_exp ) .)
    &               reduce using rule 96 (factor -> ( hyper_exp ) .)
    |               reduce using rule 96 (factor -> ( hyper_exp ) .)
    ,               reduce using rule 96 (factor -> ( hyper_exp ) .)
    )               reduce using rule 96 (factor -> ( hyper_exp ) .)
    ;               reduce using rule 96 (factor -> ( hyper_exp ) .)
    TO              reduce using rule 96 (factor -> ( hyper_exp ) .)
    DO              reduce using rule 96 (factor -> ( hyper_exp ) .)


state 166

    (90) term_1 -> * np_push_operator_stack . factor
    (94) factor -> . constant
    (95) factor -> . variable
    (96) factor -> . ( hyper_exp )
    (97) constant -> . VAL_INT np_push_const_int
    (98) constant -> . VAL_FLOAT np_push_const_float
    (99) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 97
    VAL_INT         shift and go to state 105
    VAL_FLOAT       shift and go to state 101
    VAL_CHAR        shift and go to state 102
    ID              shift and go to state 87

    constant                       shift and go to state 95
    factor                         shift and go to state 195
    variable                       shift and go to state 103

state 167

    (91) term_1 -> / np_push_operator_stack . factor
    (94) factor -> . constant
    (95) factor -> . variable
    (96) factor -> . ( hyper_exp )
    (97) constant -> . VAL_INT np_push_const_int
    (98) constant -> . VAL_FLOAT np_push_const_float
    (99) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 97
    VAL_INT         shift and go to state 105
    VAL_FLOAT       shift and go to state 101
    VAL_CHAR        shift and go to state 102
    ID              shift and go to state 87

    constant                       shift and go to state 95
    factor                         shift and go to state 196
    variable                       shift and go to state 103

state 168

    (51) func_return -> RETURN ( hyper_exp ) ; .

    ID              reduce using rule 51 (func_return -> RETURN ( hyper_exp ) ; .)
    READ            reduce using rule 51 (func_return -> RETURN ( hyper_exp ) ; .)
    WRITE           reduce using rule 51 (func_return -> RETURN ( hyper_exp ) ; .)
    IF              reduce using rule 51 (func_return -> RETURN ( hyper_exp ) ; .)
    RETURN          reduce using rule 51 (func_return -> RETURN ( hyper_exp ) ; .)
    WHILE           reduce using rule 51 (func_return -> RETURN ( hyper_exp ) ; .)
    FOR             reduce using rule 51 (func_return -> RETURN ( hyper_exp ) ; .)
    }               reduce using rule 51 (func_return -> RETURN ( hyper_exp ) ; .)


state 169

    (82) super_exp_1 -> EQUAL_TO np_push_operator_stack . exp
    (85) exp -> . term exp_1
    (89) term -> . factor term_1
    (94) factor -> . constant
    (95) factor -> . variable
    (96) factor -> . ( hyper_exp )
    (97) constant -> . VAL_INT np_push_const_int
    (98) constant -> . VAL_FLOAT np_push_const_float
    (99) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 97
    VAL_INT         shift and go to state 105
    VAL_FLOAT       shift and go to state 101
    VAL_CHAR        shift and go to state 102
    ID              shift and go to state 87

    term                           shift and go to state 104
    constant                       shift and go to state 95
    exp                            shift and go to state 197
    factor                         shift and go to state 98
    variable                       shift and go to state 103

state 170

    (83) super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack . exp
    (85) exp -> . term exp_1
    (89) term -> . factor term_1
    (94) factor -> . constant
    (95) factor -> . variable
    (96) factor -> . ( hyper_exp )
    (97) constant -> . VAL_INT np_push_const_int
    (98) constant -> . VAL_FLOAT np_push_const_float
    (99) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 97
    VAL_INT         shift and go to state 105
    VAL_FLOAT       shift and go to state 101
    VAL_CHAR        shift and go to state 102
    ID              shift and go to state 87

    term                           shift and go to state 104
    constant                       shift and go to state 95
    exp                            shift and go to state 198
    factor                         shift and go to state 98
    variable                       shift and go to state 103

state 171

    (80) super_exp_1 -> < np_push_operator_stack . exp
    (85) exp -> . term exp_1
    (89) term -> . factor term_1
    (94) factor -> . constant
    (95) factor -> . variable
    (96) factor -> . ( hyper_exp )
    (97) constant -> . VAL_INT np_push_const_int
    (98) constant -> . VAL_FLOAT np_push_const_float
    (99) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 97
    VAL_INT         shift and go to state 105
    VAL_FLOAT       shift and go to state 101
    VAL_CHAR        shift and go to state 102
    ID              shift and go to state 87

    term                           shift and go to state 104
    constant                       shift and go to state 95
    exp                            shift and go to state 199
    factor                         shift and go to state 98
    variable                       shift and go to state 103

state 172

    (81) super_exp_1 -> > np_push_operator_stack . exp
    (85) exp -> . term exp_1
    (89) term -> . factor term_1
    (94) factor -> . constant
    (95) factor -> . variable
    (96) factor -> . ( hyper_exp )
    (97) constant -> . VAL_INT np_push_const_int
    (98) constant -> . VAL_FLOAT np_push_const_float
    (99) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 97
    VAL_INT         shift and go to state 105
    VAL_FLOAT       shift and go to state 101
    VAL_CHAR        shift and go to state 102
    ID              shift and go to state 87

    term                           shift and go to state 104
    constant                       shift and go to state 95
    exp                            shift and go to state 200
    factor                         shift and go to state 98
    variable                       shift and go to state 103

state 173

    (86) exp_1 -> + np_push_operator_stack . term
    (89) term -> . factor term_1
    (94) factor -> . constant
    (95) factor -> . variable
    (96) factor -> . ( hyper_exp )
    (97) constant -> . VAL_INT np_push_const_int
    (98) constant -> . VAL_FLOAT np_push_const_float
    (99) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 97
    VAL_INT         shift and go to state 105
    VAL_FLOAT       shift and go to state 101
    VAL_CHAR        shift and go to state 102
    ID              shift and go to state 87

    term                           shift and go to state 201
    constant                       shift and go to state 95
    factor                         shift and go to state 98
    variable                       shift and go to state 103

state 174

    (87) exp_1 -> - np_push_operator_stack . term
    (89) term -> . factor term_1
    (94) factor -> . constant
    (95) factor -> . variable
    (96) factor -> . ( hyper_exp )
    (97) constant -> . VAL_INT np_push_const_int
    (98) constant -> . VAL_FLOAT np_push_const_float
    (99) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 97
    VAL_INT         shift and go to state 105
    VAL_FLOAT       shift and go to state 101
    VAL_CHAR        shift and go to state 102
    ID              shift and go to state 87

    term                           shift and go to state 202
    constant                       shift and go to state 95
    factor                         shift and go to state 98
    variable                       shift and go to state 103

state 175

    (53) variable_loop -> variable np_add_to_input_counter variable_loop_1 .

    )               reduce using rule 53 (variable_loop -> variable np_add_to_input_counter variable_loop_1 .)


state 176

    (54) variable_loop_1 -> , . variable np_add_to_input_counter variable_loop_1
    (8) variable -> . ID np_single_var_process

    ID              shift and go to state 87

    variable                       shift and go to state 203

state 177

    (55) variable_loop_1 -> epsilon .

    )               reduce using rule 55 (variable_loop_1 -> epsilon .)


state 178

    (52) read -> READ ( variable_loop ) ; .

    ID              reduce using rule 52 (read -> READ ( variable_loop ) ; .)
    READ            reduce using rule 52 (read -> READ ( variable_loop ) ; .)
    WRITE           reduce using rule 52 (read -> READ ( variable_loop ) ; .)
    IF              reduce using rule 52 (read -> READ ( variable_loop ) ; .)
    RETURN          reduce using rule 52 (read -> READ ( variable_loop ) ; .)
    WHILE           reduce using rule 52 (read -> READ ( variable_loop ) ; .)
    FOR             reduce using rule 52 (read -> READ ( variable_loop ) ; .)
    }               reduce using rule 52 (read -> READ ( variable_loop ) ; .)


state 179

    (67) condicional -> WHILE np_cond_1 ( hyper_exp ) . np_cond_2 DO { loop_estatuto } np_cond_3
    (69) np_cond_2 -> . epsilon
    (104) epsilon -> .

    DO              reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 205
    np_cond_2                      shift and go to state 204

state 180

    (49) hyper_exp_loop_1 -> , . hyper_exp np_add_to_input_counter hyper_exp_loop_1
    (75) hyper_exp -> . super_exp hyper_exp_1
    (79) super_exp -> . exp super_exp_1
    (85) exp -> . term exp_1
    (89) term -> . factor term_1
    (94) factor -> . constant
    (95) factor -> . variable
    (96) factor -> . ( hyper_exp )
    (97) constant -> . VAL_INT np_push_const_int
    (98) constant -> . VAL_FLOAT np_push_const_float
    (99) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 97
    VAL_INT         shift and go to state 105
    VAL_FLOAT       shift and go to state 101
    VAL_CHAR        shift and go to state 102
    ID              shift and go to state 87

    super_exp                      shift and go to state 96
    term                           shift and go to state 104
    hyper_exp                      shift and go to state 206
    constant                       shift and go to state 95
    exp                            shift and go to state 100
    factor                         shift and go to state 98
    variable                       shift and go to state 103

state 181

    (50) hyper_exp_loop_1 -> epsilon .

    )               reduce using rule 50 (hyper_exp_loop_1 -> epsilon .)


state 182

    (48) hyper_exp_loop -> hyper_exp np_add_to_input_counter hyper_exp_loop_1 .

    )               reduce using rule 48 (hyper_exp_loop -> hyper_exp np_add_to_input_counter hyper_exp_loop_1 .)


state 183

    (71) no_condicional -> FOR variable = hyper_exp np_for_1 . TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    TO              shift and go to state 207


state 184

    (72) np_for_1 -> epsilon .

    TO              reduce using rule 72 (np_for_1 -> epsilon .)


state 185

    (57) write -> WRITE ( hyper_exp_loop ) ; .

    ID              reduce using rule 57 (write -> WRITE ( hyper_exp_loop ) ; .)
    READ            reduce using rule 57 (write -> WRITE ( hyper_exp_loop ) ; .)
    WRITE           reduce using rule 57 (write -> WRITE ( hyper_exp_loop ) ; .)
    IF              reduce using rule 57 (write -> WRITE ( hyper_exp_loop ) ; .)
    RETURN          reduce using rule 57 (write -> WRITE ( hyper_exp_loop ) ; .)
    WHILE           reduce using rule 57 (write -> WRITE ( hyper_exp_loop ) ; .)
    FOR             reduce using rule 57 (write -> WRITE ( hyper_exp_loop ) ; .)
    }               reduce using rule 57 (write -> WRITE ( hyper_exp_loop ) ; .)


state 186

    (58) decision -> IF ( hyper_exp ) np_decision_1 . THEN { loop_estatuto } decision_else

    THEN            shift and go to state 208


state 187

    (61) np_decision_1 -> epsilon .

    THEN            reduce using rule 61 (np_decision_1 -> epsilon .)


state 188

    (14) loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo .

    ;               reduce using rule 14 (loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo .)


state 189

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; . var_opcional { loop_estatuto } np_kill_func
    (6) var_opcional -> . var_declaracion
    (7) var_opcional -> . epsilon
    (9) var_declaracion -> . VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion
    (104) epsilon -> .

    VARS            shift and go to state 9
    {               reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 11
    var_declaracion                shift and go to state 10
    var_opcional                   shift and go to state 209

state 190

    (31) parametro -> tipo ID loop_parametro .

    )               reduce using rule 31 (parametro -> tipo ID loop_parametro .)


state 191

    (33) loop_parametro -> epsilon .

    )               reduce using rule 33 (loop_parametro -> epsilon .)


state 192

    (32) loop_parametro -> , . tipo ID loop_parametro
    (34) tipo -> . INT
    (35) tipo -> . FLOAT
    (36) tipo -> . CHAR
    (37) tipo -> . BOOL

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 24

    tipo                           shift and go to state 210

state 193

    (76) hyper_exp_1 -> & np_push_operator_stack super_exp .

    )               reduce using rule 76 (hyper_exp_1 -> & np_push_operator_stack super_exp .)
    ,               reduce using rule 76 (hyper_exp_1 -> & np_push_operator_stack super_exp .)
    ;               reduce using rule 76 (hyper_exp_1 -> & np_push_operator_stack super_exp .)
    TO              reduce using rule 76 (hyper_exp_1 -> & np_push_operator_stack super_exp .)
    DO              reduce using rule 76 (hyper_exp_1 -> & np_push_operator_stack super_exp .)


state 194

    (77) hyper_exp_1 -> | np_push_operator_stack super_exp .

    )               reduce using rule 77 (hyper_exp_1 -> | np_push_operator_stack super_exp .)
    ,               reduce using rule 77 (hyper_exp_1 -> | np_push_operator_stack super_exp .)
    ;               reduce using rule 77 (hyper_exp_1 -> | np_push_operator_stack super_exp .)
    TO              reduce using rule 77 (hyper_exp_1 -> | np_push_operator_stack super_exp .)
    DO              reduce using rule 77 (hyper_exp_1 -> | np_push_operator_stack super_exp .)


state 195

    (90) term_1 -> * np_push_operator_stack factor .

    +               reduce using rule 90 (term_1 -> * np_push_operator_stack factor .)
    -               reduce using rule 90 (term_1 -> * np_push_operator_stack factor .)
    <               reduce using rule 90 (term_1 -> * np_push_operator_stack factor .)
    >               reduce using rule 90 (term_1 -> * np_push_operator_stack factor .)
    EQUAL_TO        reduce using rule 90 (term_1 -> * np_push_operator_stack factor .)
    NOT_EQUAL_TO    reduce using rule 90 (term_1 -> * np_push_operator_stack factor .)
    &               reduce using rule 90 (term_1 -> * np_push_operator_stack factor .)
    |               reduce using rule 90 (term_1 -> * np_push_operator_stack factor .)
    )               reduce using rule 90 (term_1 -> * np_push_operator_stack factor .)
    ,               reduce using rule 90 (term_1 -> * np_push_operator_stack factor .)
    ;               reduce using rule 90 (term_1 -> * np_push_operator_stack factor .)
    TO              reduce using rule 90 (term_1 -> * np_push_operator_stack factor .)
    DO              reduce using rule 90 (term_1 -> * np_push_operator_stack factor .)


state 196

    (91) term_1 -> / np_push_operator_stack factor .

    +               reduce using rule 91 (term_1 -> / np_push_operator_stack factor .)
    -               reduce using rule 91 (term_1 -> / np_push_operator_stack factor .)
    <               reduce using rule 91 (term_1 -> / np_push_operator_stack factor .)
    >               reduce using rule 91 (term_1 -> / np_push_operator_stack factor .)
    EQUAL_TO        reduce using rule 91 (term_1 -> / np_push_operator_stack factor .)
    NOT_EQUAL_TO    reduce using rule 91 (term_1 -> / np_push_operator_stack factor .)
    &               reduce using rule 91 (term_1 -> / np_push_operator_stack factor .)
    |               reduce using rule 91 (term_1 -> / np_push_operator_stack factor .)
    )               reduce using rule 91 (term_1 -> / np_push_operator_stack factor .)
    ,               reduce using rule 91 (term_1 -> / np_push_operator_stack factor .)
    ;               reduce using rule 91 (term_1 -> / np_push_operator_stack factor .)
    TO              reduce using rule 91 (term_1 -> / np_push_operator_stack factor .)
    DO              reduce using rule 91 (term_1 -> / np_push_operator_stack factor .)


state 197

    (82) super_exp_1 -> EQUAL_TO np_push_operator_stack exp .

    &               reduce using rule 82 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    |               reduce using rule 82 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    )               reduce using rule 82 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    ,               reduce using rule 82 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    ;               reduce using rule 82 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    TO              reduce using rule 82 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    DO              reduce using rule 82 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)


state 198

    (83) super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .

    &               reduce using rule 83 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    |               reduce using rule 83 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    )               reduce using rule 83 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    ,               reduce using rule 83 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    ;               reduce using rule 83 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    TO              reduce using rule 83 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    DO              reduce using rule 83 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)


state 199

    (80) super_exp_1 -> < np_push_operator_stack exp .

    &               reduce using rule 80 (super_exp_1 -> < np_push_operator_stack exp .)
    |               reduce using rule 80 (super_exp_1 -> < np_push_operator_stack exp .)
    )               reduce using rule 80 (super_exp_1 -> < np_push_operator_stack exp .)
    ,               reduce using rule 80 (super_exp_1 -> < np_push_operator_stack exp .)
    ;               reduce using rule 80 (super_exp_1 -> < np_push_operator_stack exp .)
    TO              reduce using rule 80 (super_exp_1 -> < np_push_operator_stack exp .)
    DO              reduce using rule 80 (super_exp_1 -> < np_push_operator_stack exp .)


state 200

    (81) super_exp_1 -> > np_push_operator_stack exp .

    &               reduce using rule 81 (super_exp_1 -> > np_push_operator_stack exp .)
    |               reduce using rule 81 (super_exp_1 -> > np_push_operator_stack exp .)
    )               reduce using rule 81 (super_exp_1 -> > np_push_operator_stack exp .)
    ,               reduce using rule 81 (super_exp_1 -> > np_push_operator_stack exp .)
    ;               reduce using rule 81 (super_exp_1 -> > np_push_operator_stack exp .)
    TO              reduce using rule 81 (super_exp_1 -> > np_push_operator_stack exp .)
    DO              reduce using rule 81 (super_exp_1 -> > np_push_operator_stack exp .)


state 201

    (86) exp_1 -> + np_push_operator_stack term .

    <               reduce using rule 86 (exp_1 -> + np_push_operator_stack term .)
    >               reduce using rule 86 (exp_1 -> + np_push_operator_stack term .)
    EQUAL_TO        reduce using rule 86 (exp_1 -> + np_push_operator_stack term .)
    NOT_EQUAL_TO    reduce using rule 86 (exp_1 -> + np_push_operator_stack term .)
    &               reduce using rule 86 (exp_1 -> + np_push_operator_stack term .)
    |               reduce using rule 86 (exp_1 -> + np_push_operator_stack term .)
    )               reduce using rule 86 (exp_1 -> + np_push_operator_stack term .)
    ,               reduce using rule 86 (exp_1 -> + np_push_operator_stack term .)
    ;               reduce using rule 86 (exp_1 -> + np_push_operator_stack term .)
    TO              reduce using rule 86 (exp_1 -> + np_push_operator_stack term .)
    DO              reduce using rule 86 (exp_1 -> + np_push_operator_stack term .)


state 202

    (87) exp_1 -> - np_push_operator_stack term .

    <               reduce using rule 87 (exp_1 -> - np_push_operator_stack term .)
    >               reduce using rule 87 (exp_1 -> - np_push_operator_stack term .)
    EQUAL_TO        reduce using rule 87 (exp_1 -> - np_push_operator_stack term .)
    NOT_EQUAL_TO    reduce using rule 87 (exp_1 -> - np_push_operator_stack term .)
    &               reduce using rule 87 (exp_1 -> - np_push_operator_stack term .)
    |               reduce using rule 87 (exp_1 -> - np_push_operator_stack term .)
    )               reduce using rule 87 (exp_1 -> - np_push_operator_stack term .)
    ,               reduce using rule 87 (exp_1 -> - np_push_operator_stack term .)
    ;               reduce using rule 87 (exp_1 -> - np_push_operator_stack term .)
    TO              reduce using rule 87 (exp_1 -> - np_push_operator_stack term .)
    DO              reduce using rule 87 (exp_1 -> - np_push_operator_stack term .)


state 203

    (54) variable_loop_1 -> , variable . np_add_to_input_counter variable_loop_1
    (56) np_add_to_input_counter -> . epsilon
    (104) epsilon -> .

    ,               reduce using rule 104 (epsilon -> .)
    )               reduce using rule 104 (epsilon -> .)

    np_add_to_input_counter        shift and go to state 211
    epsilon                        shift and go to state 150

state 204

    (67) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 . DO { loop_estatuto } np_cond_3

    DO              shift and go to state 212


state 205

    (69) np_cond_2 -> epsilon .

    DO              reduce using rule 69 (np_cond_2 -> epsilon .)


state 206

    (49) hyper_exp_loop_1 -> , hyper_exp . np_add_to_input_counter hyper_exp_loop_1
    (56) np_add_to_input_counter -> . epsilon
    (104) epsilon -> .

    ,               reduce using rule 104 (epsilon -> .)
    )               reduce using rule 104 (epsilon -> .)

    np_add_to_input_counter        shift and go to state 213
    epsilon                        shift and go to state 150

state 207

    (71) no_condicional -> FOR variable = hyper_exp np_for_1 TO . hyper_exp np_for_2 DO np_for_3 { loop_estatuto }
    (75) hyper_exp -> . super_exp hyper_exp_1
    (79) super_exp -> . exp super_exp_1
    (85) exp -> . term exp_1
    (89) term -> . factor term_1
    (94) factor -> . constant
    (95) factor -> . variable
    (96) factor -> . ( hyper_exp )
    (97) constant -> . VAL_INT np_push_const_int
    (98) constant -> . VAL_FLOAT np_push_const_float
    (99) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 97
    VAL_INT         shift and go to state 105
    VAL_FLOAT       shift and go to state 101
    VAL_CHAR        shift and go to state 102
    ID              shift and go to state 87

    super_exp                      shift and go to state 96
    term                           shift and go to state 104
    hyper_exp                      shift and go to state 214
    constant                       shift and go to state 95
    exp                            shift and go to state 100
    factor                         shift and go to state 98
    variable                       shift and go to state 103

state 208

    (58) decision -> IF ( hyper_exp ) np_decision_1 THEN . { loop_estatuto } decision_else

    {               shift and go to state 215


state 209

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional . { loop_estatuto } np_kill_func

    {               shift and go to state 216


state 210

    (32) loop_parametro -> , tipo . ID loop_parametro

    ID              shift and go to state 217


state 211

    (54) variable_loop_1 -> , variable np_add_to_input_counter . variable_loop_1
    (54) variable_loop_1 -> . , variable np_add_to_input_counter variable_loop_1
    (55) variable_loop_1 -> . epsilon
    (104) epsilon -> .

    ,               shift and go to state 176
    )               reduce using rule 104 (epsilon -> .)

    variable_loop_1                shift and go to state 218
    epsilon                        shift and go to state 177

state 212

    (67) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO . { loop_estatuto } np_cond_3

    {               shift and go to state 219


state 213

    (49) hyper_exp_loop_1 -> , hyper_exp np_add_to_input_counter . hyper_exp_loop_1
    (49) hyper_exp_loop_1 -> . , hyper_exp np_add_to_input_counter hyper_exp_loop_1
    (50) hyper_exp_loop_1 -> . epsilon
    (104) epsilon -> .

    ,               shift and go to state 180
    )               reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 181
    hyper_exp_loop_1               shift and go to state 220

state 214

    (71) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp . np_for_2 DO np_for_3 { loop_estatuto }
    (73) np_for_2 -> . epsilon
    (104) epsilon -> .

    DO              reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 222
    np_for_2                       shift and go to state 221

state 215

    (58) decision -> IF ( hyper_exp ) np_decision_1 THEN { . loop_estatuto } decision_else
    (63) loop_estatuto -> . estatuto loop_estatuto
    (64) loop_estatuto -> . epsilon
    (38) estatuto -> . asignacion
    (39) estatuto -> . func_llamada ;
    (40) estatuto -> . read
    (41) estatuto -> . write
    (42) estatuto -> . decision
    (43) estatuto -> . repeticion
    (44) estatuto -> . func_return
    (104) epsilon -> .
    (45) asignacion -> . variable = hyper_exp ;
    (46) func_llamada -> . ID ( )
    (47) func_llamada -> . ID ( hyper_exp_loop )
    (52) read -> . READ ( variable_loop ) ;
    (57) write -> . WRITE ( hyper_exp_loop ) ;
    (58) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (65) repeticion -> . condicional
    (66) repeticion -> . no_condicional
    (51) func_return -> . RETURN ( hyper_exp ) ;
    (8) variable -> . ID np_single_var_process
    (67) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (71) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 104 (epsilon -> .)
    ID              shift and go to state 59
    READ            shift and go to state 53
    WRITE           shift and go to state 66
    IF              shift and go to state 68
    RETURN          shift and go to state 52
    WHILE           shift and go to state 54
    FOR             shift and go to state 62

    func_llamada                   shift and go to state 55
    loop_estatuto                  shift and go to state 223
    func_return                    shift and go to state 70
    decision                       shift and go to state 57
    estatuto                       shift and go to state 58
    write                          shift and go to state 60
    read                           shift and go to state 63
    epsilon                        shift and go to state 64
    condicional                    shift and go to state 65
    variable                       shift and go to state 67
    no_condicional                 shift and go to state 61
    asignacion                     shift and go to state 69
    repeticion                     shift and go to state 71

state 216

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { . loop_estatuto } np_kill_func
    (63) loop_estatuto -> . estatuto loop_estatuto
    (64) loop_estatuto -> . epsilon
    (38) estatuto -> . asignacion
    (39) estatuto -> . func_llamada ;
    (40) estatuto -> . read
    (41) estatuto -> . write
    (42) estatuto -> . decision
    (43) estatuto -> . repeticion
    (44) estatuto -> . func_return
    (104) epsilon -> .
    (45) asignacion -> . variable = hyper_exp ;
    (46) func_llamada -> . ID ( )
    (47) func_llamada -> . ID ( hyper_exp_loop )
    (52) read -> . READ ( variable_loop ) ;
    (57) write -> . WRITE ( hyper_exp_loop ) ;
    (58) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (65) repeticion -> . condicional
    (66) repeticion -> . no_condicional
    (51) func_return -> . RETURN ( hyper_exp ) ;
    (8) variable -> . ID np_single_var_process
    (67) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (71) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 104 (epsilon -> .)
    ID              shift and go to state 59
    READ            shift and go to state 53
    WRITE           shift and go to state 66
    IF              shift and go to state 68
    RETURN          shift and go to state 52
    WHILE           shift and go to state 54
    FOR             shift and go to state 62

    func_llamada                   shift and go to state 55
    loop_estatuto                  shift and go to state 224
    func_return                    shift and go to state 70
    decision                       shift and go to state 57
    estatuto                       shift and go to state 58
    write                          shift and go to state 60
    read                           shift and go to state 63
    epsilon                        shift and go to state 64
    condicional                    shift and go to state 65
    variable                       shift and go to state 67
    no_condicional                 shift and go to state 61
    asignacion                     shift and go to state 69
    repeticion                     shift and go to state 71

state 217

    (32) loop_parametro -> , tipo ID . loop_parametro
    (32) loop_parametro -> . , tipo ID loop_parametro
    (33) loop_parametro -> . epsilon
    (104) epsilon -> .

    ,               shift and go to state 192
    )               reduce using rule 104 (epsilon -> .)

    loop_parametro                 shift and go to state 225
    epsilon                        shift and go to state 191

state 218

    (54) variable_loop_1 -> , variable np_add_to_input_counter variable_loop_1 .

    )               reduce using rule 54 (variable_loop_1 -> , variable np_add_to_input_counter variable_loop_1 .)


state 219

    (67) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { . loop_estatuto } np_cond_3
    (63) loop_estatuto -> . estatuto loop_estatuto
    (64) loop_estatuto -> . epsilon
    (38) estatuto -> . asignacion
    (39) estatuto -> . func_llamada ;
    (40) estatuto -> . read
    (41) estatuto -> . write
    (42) estatuto -> . decision
    (43) estatuto -> . repeticion
    (44) estatuto -> . func_return
    (104) epsilon -> .
    (45) asignacion -> . variable = hyper_exp ;
    (46) func_llamada -> . ID ( )
    (47) func_llamada -> . ID ( hyper_exp_loop )
    (52) read -> . READ ( variable_loop ) ;
    (57) write -> . WRITE ( hyper_exp_loop ) ;
    (58) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (65) repeticion -> . condicional
    (66) repeticion -> . no_condicional
    (51) func_return -> . RETURN ( hyper_exp ) ;
    (8) variable -> . ID np_single_var_process
    (67) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (71) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 104 (epsilon -> .)
    ID              shift and go to state 59
    READ            shift and go to state 53
    WRITE           shift and go to state 66
    IF              shift and go to state 68
    RETURN          shift and go to state 52
    WHILE           shift and go to state 54
    FOR             shift and go to state 62

    func_llamada                   shift and go to state 55
    loop_estatuto                  shift and go to state 226
    func_return                    shift and go to state 70
    decision                       shift and go to state 57
    estatuto                       shift and go to state 58
    write                          shift and go to state 60
    read                           shift and go to state 63
    epsilon                        shift and go to state 64
    condicional                    shift and go to state 65
    variable                       shift and go to state 67
    no_condicional                 shift and go to state 61
    asignacion                     shift and go to state 69
    repeticion                     shift and go to state 71

state 220

    (49) hyper_exp_loop_1 -> , hyper_exp np_add_to_input_counter hyper_exp_loop_1 .

    )               reduce using rule 49 (hyper_exp_loop_1 -> , hyper_exp np_add_to_input_counter hyper_exp_loop_1 .)


state 221

    (71) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 . DO np_for_3 { loop_estatuto }

    DO              shift and go to state 227


state 222

    (73) np_for_2 -> epsilon .

    DO              reduce using rule 73 (np_for_2 -> epsilon .)


state 223

    (58) decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto . } decision_else

    }               shift and go to state 228


state 224

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto . } np_kill_func

    }               shift and go to state 229


state 225

    (32) loop_parametro -> , tipo ID loop_parametro .

    )               reduce using rule 32 (loop_parametro -> , tipo ID loop_parametro .)


state 226

    (67) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto . } np_cond_3

    }               shift and go to state 230


state 227

    (71) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO . np_for_3 { loop_estatuto }
    (74) np_for_3 -> . epsilon
    (104) epsilon -> .

    {               reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 232
    np_for_3                       shift and go to state 231

state 228

    (58) decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } . decision_else
    (59) decision_else -> . ELSE np_decision_2 { loop_estatuto }
    (60) decision_else -> . epsilon
    (104) epsilon -> .

    ELSE            shift and go to state 234
    ID              reduce using rule 104 (epsilon -> .)
    READ            reduce using rule 104 (epsilon -> .)
    WRITE           reduce using rule 104 (epsilon -> .)
    IF              reduce using rule 104 (epsilon -> .)
    RETURN          reduce using rule 104 (epsilon -> .)
    WHILE           reduce using rule 104 (epsilon -> .)
    FOR             reduce using rule 104 (epsilon -> .)
    }               reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 235
    decision_else                  shift and go to state 233

state 229

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } . np_kill_func
    (27) np_kill_func -> . epsilon
    (104) epsilon -> .

    FUNCTION        reduce using rule 104 (epsilon -> .)
    MAIN            reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 237
    np_kill_func                   shift and go to state 236

state 230

    (67) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } . np_cond_3
    (70) np_cond_3 -> . epsilon
    (104) epsilon -> .

    ID              reduce using rule 104 (epsilon -> .)
    READ            reduce using rule 104 (epsilon -> .)
    WRITE           reduce using rule 104 (epsilon -> .)
    IF              reduce using rule 104 (epsilon -> .)
    RETURN          reduce using rule 104 (epsilon -> .)
    WHILE           reduce using rule 104 (epsilon -> .)
    FOR             reduce using rule 104 (epsilon -> .)
    }               reduce using rule 104 (epsilon -> .)

    np_cond_3                      shift and go to state 238
    epsilon                        shift and go to state 239

state 231

    (71) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 . { loop_estatuto }

    {               shift and go to state 240


state 232

    (74) np_for_3 -> epsilon .

    {               reduce using rule 74 (np_for_3 -> epsilon .)


state 233

    (58) decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .

    ID              reduce using rule 58 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    READ            reduce using rule 58 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    WRITE           reduce using rule 58 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    IF              reduce using rule 58 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    RETURN          reduce using rule 58 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    WHILE           reduce using rule 58 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    FOR             reduce using rule 58 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    }               reduce using rule 58 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)


state 234

    (59) decision_else -> ELSE . np_decision_2 { loop_estatuto }
    (62) np_decision_2 -> . epsilon
    (104) epsilon -> .

    {               reduce using rule 104 (epsilon -> .)

    epsilon                        shift and go to state 241
    np_decision_2                  shift and go to state 242

state 235

    (60) decision_else -> epsilon .

    ID              reduce using rule 60 (decision_else -> epsilon .)
    READ            reduce using rule 60 (decision_else -> epsilon .)
    WRITE           reduce using rule 60 (decision_else -> epsilon .)
    IF              reduce using rule 60 (decision_else -> epsilon .)
    RETURN          reduce using rule 60 (decision_else -> epsilon .)
    WHILE           reduce using rule 60 (decision_else -> epsilon .)
    FOR             reduce using rule 60 (decision_else -> epsilon .)
    }               reduce using rule 60 (decision_else -> epsilon .)


state 236

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } np_kill_func .

    FUNCTION        reduce using rule 21 (func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } np_kill_func .)
    MAIN            reduce using rule 21 (func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } np_kill_func .)


state 237

    (27) np_kill_func -> epsilon .

    FUNCTION        reduce using rule 27 (np_kill_func -> epsilon .)
    MAIN            reduce using rule 27 (np_kill_func -> epsilon .)


state 238

    (67) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .

    ID              reduce using rule 67 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    READ            reduce using rule 67 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    WRITE           reduce using rule 67 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    IF              reduce using rule 67 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    RETURN          reduce using rule 67 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    WHILE           reduce using rule 67 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    FOR             reduce using rule 67 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    }               reduce using rule 67 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)


state 239

    (70) np_cond_3 -> epsilon .

    ID              reduce using rule 70 (np_cond_3 -> epsilon .)
    READ            reduce using rule 70 (np_cond_3 -> epsilon .)
    WRITE           reduce using rule 70 (np_cond_3 -> epsilon .)
    IF              reduce using rule 70 (np_cond_3 -> epsilon .)
    RETURN          reduce using rule 70 (np_cond_3 -> epsilon .)
    WHILE           reduce using rule 70 (np_cond_3 -> epsilon .)
    FOR             reduce using rule 70 (np_cond_3 -> epsilon .)
    }               reduce using rule 70 (np_cond_3 -> epsilon .)


state 240

    (71) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { . loop_estatuto }
    (63) loop_estatuto -> . estatuto loop_estatuto
    (64) loop_estatuto -> . epsilon
    (38) estatuto -> . asignacion
    (39) estatuto -> . func_llamada ;
    (40) estatuto -> . read
    (41) estatuto -> . write
    (42) estatuto -> . decision
    (43) estatuto -> . repeticion
    (44) estatuto -> . func_return
    (104) epsilon -> .
    (45) asignacion -> . variable = hyper_exp ;
    (46) func_llamada -> . ID ( )
    (47) func_llamada -> . ID ( hyper_exp_loop )
    (52) read -> . READ ( variable_loop ) ;
    (57) write -> . WRITE ( hyper_exp_loop ) ;
    (58) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (65) repeticion -> . condicional
    (66) repeticion -> . no_condicional
    (51) func_return -> . RETURN ( hyper_exp ) ;
    (8) variable -> . ID np_single_var_process
    (67) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (71) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 104 (epsilon -> .)
    ID              shift and go to state 59
    READ            shift and go to state 53
    WRITE           shift and go to state 66
    IF              shift and go to state 68
    RETURN          shift and go to state 52
    WHILE           shift and go to state 54
    FOR             shift and go to state 62

    func_llamada                   shift and go to state 55
    loop_estatuto                  shift and go to state 243
    func_return                    shift and go to state 70
    decision                       shift and go to state 57
    estatuto                       shift and go to state 58
    write                          shift and go to state 60
    read                           shift and go to state 63
    epsilon                        shift and go to state 64
    condicional                    shift and go to state 65
    variable                       shift and go to state 67
    no_condicional                 shift and go to state 61
    asignacion                     shift and go to state 69
    repeticion                     shift and go to state 71

state 241

    (62) np_decision_2 -> epsilon .

    {               reduce using rule 62 (np_decision_2 -> epsilon .)


state 242

    (59) decision_else -> ELSE np_decision_2 . { loop_estatuto }

    {               shift and go to state 244


state 243

    (71) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto . }

    }               shift and go to state 245


state 244

    (59) decision_else -> ELSE np_decision_2 { . loop_estatuto }
    (63) loop_estatuto -> . estatuto loop_estatuto
    (64) loop_estatuto -> . epsilon
    (38) estatuto -> . asignacion
    (39) estatuto -> . func_llamada ;
    (40) estatuto -> . read
    (41) estatuto -> . write
    (42) estatuto -> . decision
    (43) estatuto -> . repeticion
    (44) estatuto -> . func_return
    (104) epsilon -> .
    (45) asignacion -> . variable = hyper_exp ;
    (46) func_llamada -> . ID ( )
    (47) func_llamada -> . ID ( hyper_exp_loop )
    (52) read -> . READ ( variable_loop ) ;
    (57) write -> . WRITE ( hyper_exp_loop ) ;
    (58) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (65) repeticion -> . condicional
    (66) repeticion -> . no_condicional
    (51) func_return -> . RETURN ( hyper_exp ) ;
    (8) variable -> . ID np_single_var_process
    (67) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (71) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 104 (epsilon -> .)
    ID              shift and go to state 59
    READ            shift and go to state 53
    WRITE           shift and go to state 66
    IF              shift and go to state 68
    RETURN          shift and go to state 52
    WHILE           shift and go to state 54
    FOR             shift and go to state 62

    func_llamada                   shift and go to state 55
    loop_estatuto                  shift and go to state 246
    func_return                    shift and go to state 70
    decision                       shift and go to state 57
    estatuto                       shift and go to state 58
    write                          shift and go to state 60
    read                           shift and go to state 63
    epsilon                        shift and go to state 64
    condicional                    shift and go to state 65
    variable                       shift and go to state 67
    no_condicional                 shift and go to state 61
    asignacion                     shift and go to state 69
    repeticion                     shift and go to state 71

state 245

    (71) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .

    ID              reduce using rule 71 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    READ            reduce using rule 71 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    WRITE           reduce using rule 71 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    IF              reduce using rule 71 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    RETURN          reduce using rule 71 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    WHILE           reduce using rule 71 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    FOR             reduce using rule 71 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    }               reduce using rule 71 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)


state 246

    (59) decision_else -> ELSE np_decision_2 { loop_estatuto . }

    }               shift and go to state 247


state 247

    (59) decision_else -> ELSE np_decision_2 { loop_estatuto } .

    ID              reduce using rule 59 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    READ            reduce using rule 59 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    WRITE           reduce using rule 59 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    IF              reduce using rule 59 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    RETURN          reduce using rule 59 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    WHILE           reduce using rule 59 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    FOR             reduce using rule 59 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    }               reduce using rule 59 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)

