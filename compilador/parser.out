Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    RETURN
    CHAR
    PRINT
    STRING

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID ; var_opcional func_programa_loop main
Rule 2     main -> MAIN ( ) { loop_estatuto }
Rule 3     var_opcional -> var_declaracion
Rule 4     var_opcional -> epsilon
Rule 5     variable -> ID variable_1
Rule 6     variable_1 -> [ hyper_exp ]
Rule 7     variable_1 -> epsilon
Rule 8     var_declaracion -> VARS tipo lista_ids ; loop_var_decl
Rule 9     loop_var_decl -> tipo lista_ids ; loop_var_decl
Rule 10    loop_var_decl -> epsilon
Rule 11    func_programa_loop -> func_definicion func_programa_loop
Rule 12    func_programa_loop -> epsilon
Rule 13    func_definicion -> FUNCTION func_tipo_retorno ID ( func_parametro ) ; var_opcional { loop_estatuto }
Rule 14    func_tipo_retorno -> tipo
Rule 15    func_tipo_retorno -> VOID
Rule 16    func_parametro -> parametro func_parametro
Rule 17    func_parametro -> epsilon
Rule 18    parametro -> tipo ID loop_parametro
Rule 19    loop_parametro -> , tipo ID loop_parametro
Rule 20    loop_parametro -> epsilon
Rule 21    tipo -> INT
Rule 22    tipo -> FLOAT
Rule 23    lista_ids -> ID loop_lista_ids
Rule 24    lista_ids -> ID [ INT ] loop_lista_ids
Rule 25    loop_lista_ids -> , ID loop_lista_ids
Rule 26    loop_lista_ids -> , ID [ INT ] loop_lista_ids
Rule 27    loop_lista_ids -> epsilon
Rule 28    estatuto -> asignacion
Rule 29    estatuto -> func_llamada ;
Rule 30    estatuto -> read
Rule 31    estatuto -> write
Rule 32    estatuto -> decision
Rule 33    estatuto -> repeticion
Rule 34    asignacion -> variable = hyper_exp ;
Rule 35    func_llamada -> ID ( )
Rule 36    func_llamada -> ID ( hyper_exp_loop )
Rule 37    hyper_exp_loop -> hyper_exp hyper_exp_loop_1
Rule 38    hyper_exp_loop_1 -> , hyper_exp hyper_exp_loop_1
Rule 39    hyper_exp_loop_1 -> epsilon
Rule 40    read -> READ ( variable_loop ) ;
Rule 41    variable_loop -> variable variable_loop_1
Rule 42    variable_loop_1 -> , variable variable_loop_1
Rule 43    variable_loop_1 -> epsilon
Rule 44    write -> WRITE ( hyper_exp_loop ) ;
Rule 45    decision -> IF ( hyper_exp ) THEN { loop_estatuto } decision_1
Rule 46    decision_1 -> ELSE { loop_estatuto }
Rule 47    decision_1 -> epsilon
Rule 48    loop_estatuto -> estatuto loop_estatuto
Rule 49    loop_estatuto -> epsilon
Rule 50    repeticion -> condicional
Rule 51    repeticion -> no_condicional
Rule 52    condicional -> WHILE ( hyper_exp ) DO { loop_estatuto }
Rule 53    no_condicional -> FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto }
Rule 54    hyper_exp -> super_exp hyper_exp_1
Rule 55    hyper_exp_1 -> & super_exp
Rule 56    hyper_exp_1 -> | super_exp
Rule 57    hyper_exp_1 -> epsilon
Rule 58    super_exp -> exp super_exp_1
Rule 59    super_exp_1 -> < exp
Rule 60    super_exp_1 -> > exp
Rule 61    super_exp_1 -> EQUAL_TO exp
Rule 62    super_exp_1 -> NOT_EQUAL_TO exp
Rule 63    super_exp_1 -> epsilon
Rule 64    exp -> term exp_1
Rule 65    exp_1 -> + term
Rule 66    exp_1 -> - term
Rule 67    exp_1 -> epsilon
Rule 68    term -> factor term_1
Rule 69    term_1 -> * factor
Rule 70    term_1 -> / factor
Rule 71    term_1 -> epsilon
Rule 72    factor -> VAL_INT
Rule 73    factor -> VAL_FLOAT
Rule 74    factor -> VAL_STRING
Rule 75    factor -> variable
Rule 76    factor -> ( hyper_exp )
Rule 77    epsilon -> <empty>

Terminals, with rules where they appear

&                    : 55
(                    : 2 13 35 36 40 44 45 52 76
)                    : 2 13 35 36 40 44 45 52 76
*                    : 69
+                    : 65
,                    : 19 25 26 38 42
-                    : 66
/                    : 70
;                    : 1 8 9 13 29 34 40 44
<                    : 59
=                    : 34 53
>                    : 60
CHAR                 : 
DO                   : 52 53
ELSE                 : 46
EQUAL_TO             : 61
FLOAT                : 22
FOR                  : 53
FUNCTION             : 13
ID                   : 1 5 13 18 19 23 24 25 26 35 36
IF                   : 45
INT                  : 21 24 26
MAIN                 : 2
NOT_EQUAL_TO         : 62
PRINT                : 
PROGRAM              : 1
READ                 : 40
RETURN               : 
STRING               : 
THEN                 : 45
TO                   : 53
VAL_FLOAT            : 73
VAL_INT              : 72
VAL_STRING           : 74
VARS                 : 8
VOID                 : 15
WHILE                : 52
WRITE                : 44
[                    : 6 24 26
]                    : 6 24 26
error                : 
{                    : 2 13 45 46 52 53
|                    : 56
}                    : 2 13 45 46 52 53

Nonterminals, with rules where they appear

asignacion           : 28
condicional          : 50
decision             : 32
decision_1           : 45
epsilon              : 4 7 10 12 17 20 27 39 43 47 49 57 63 67 71
estatuto             : 48
exp                  : 58 59 60 61 62
exp_1                : 64
factor               : 68 69 70
func_definicion      : 11
func_llamada         : 29
func_parametro       : 13 16
func_programa_loop   : 1 11
func_tipo_retorno    : 13
hyper_exp            : 6 34 37 38 45 52 53 53 76
hyper_exp_1          : 54
hyper_exp_loop       : 36 44
hyper_exp_loop_1     : 37 38
lista_ids            : 8 9
loop_estatuto        : 2 13 45 46 48 52 53
loop_lista_ids       : 23 24 25 26
loop_parametro       : 18 19
loop_var_decl        : 8 9
main                 : 1
no_condicional       : 51
parametro            : 16
programa             : 0
read                 : 30
repeticion           : 33
super_exp            : 54 55 56
super_exp_1          : 58
term                 : 64 65 66
term_1               : 68
tipo                 : 8 9 14 18 19
var_declaracion      : 3
var_opcional         : 1 13
variable             : 34 41 42 53 75
variable_1           : 5
variable_loop        : 40
variable_loop_1      : 41 42
write                : 31

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID ; var_opcional func_programa_loop main

    PROGRAM         shift and go to state 1

    programa                       shift and go to state 2

state 1

    (1) programa -> PROGRAM . ID ; var_opcional func_programa_loop main

    ID              shift and go to state 3


state 2

    (0) S' -> programa .



state 3

    (1) programa -> PROGRAM ID . ; var_opcional func_programa_loop main

    ;               shift and go to state 4


state 4

    (1) programa -> PROGRAM ID ; . var_opcional func_programa_loop main
    (3) var_opcional -> . var_declaracion
    (4) var_opcional -> . epsilon
    (8) var_declaracion -> . VARS tipo lista_ids ; loop_var_decl
    (77) epsilon -> .

    VARS            shift and go to state 5
    FUNCTION        reduce using rule 77 (epsilon -> .)
    MAIN            reduce using rule 77 (epsilon -> .)

    epsilon                        shift and go to state 6
    var_declaracion                shift and go to state 7
    var_opcional                   shift and go to state 8

state 5

    (8) var_declaracion -> VARS . tipo lista_ids ; loop_var_decl
    (21) tipo -> . INT
    (22) tipo -> . FLOAT

    INT             shift and go to state 11
    FLOAT           shift and go to state 9

    tipo                           shift and go to state 10

state 6

    (4) var_opcional -> epsilon .

    {               reduce using rule 4 (var_opcional -> epsilon .)
    FUNCTION        reduce using rule 4 (var_opcional -> epsilon .)
    MAIN            reduce using rule 4 (var_opcional -> epsilon .)


state 7

    (3) var_opcional -> var_declaracion .

    {               reduce using rule 3 (var_opcional -> var_declaracion .)
    FUNCTION        reduce using rule 3 (var_opcional -> var_declaracion .)
    MAIN            reduce using rule 3 (var_opcional -> var_declaracion .)


state 8

    (1) programa -> PROGRAM ID ; var_opcional . func_programa_loop main
    (11) func_programa_loop -> . func_definicion func_programa_loop
    (12) func_programa_loop -> . epsilon
    (13) func_definicion -> . FUNCTION func_tipo_retorno ID ( func_parametro ) ; var_opcional { loop_estatuto }
    (77) epsilon -> .

    FUNCTION        shift and go to state 13
    MAIN            reduce using rule 77 (epsilon -> .)

    func_definicion                shift and go to state 12
    epsilon                        shift and go to state 14
    func_programa_loop             shift and go to state 15

state 9

    (22) tipo -> FLOAT .

    ID              reduce using rule 22 (tipo -> FLOAT .)


state 10

    (8) var_declaracion -> VARS tipo . lista_ids ; loop_var_decl
    (23) lista_ids -> . ID loop_lista_ids
    (24) lista_ids -> . ID [ INT ] loop_lista_ids

    ID              shift and go to state 17

    lista_ids                      shift and go to state 16

state 11

    (21) tipo -> INT .

    ID              reduce using rule 21 (tipo -> INT .)


state 12

    (11) func_programa_loop -> func_definicion . func_programa_loop
    (11) func_programa_loop -> . func_definicion func_programa_loop
    (12) func_programa_loop -> . epsilon
    (13) func_definicion -> . FUNCTION func_tipo_retorno ID ( func_parametro ) ; var_opcional { loop_estatuto }
    (77) epsilon -> .

    FUNCTION        shift and go to state 13
    MAIN            reduce using rule 77 (epsilon -> .)

    func_definicion                shift and go to state 12
    epsilon                        shift and go to state 14
    func_programa_loop             shift and go to state 18

state 13

    (13) func_definicion -> FUNCTION . func_tipo_retorno ID ( func_parametro ) ; var_opcional { loop_estatuto }
    (14) func_tipo_retorno -> . tipo
    (15) func_tipo_retorno -> . VOID
    (21) tipo -> . INT
    (22) tipo -> . FLOAT

    VOID            shift and go to state 21
    INT             shift and go to state 11
    FLOAT           shift and go to state 9

    func_tipo_retorno              shift and go to state 19
    tipo                           shift and go to state 20

state 14

    (12) func_programa_loop -> epsilon .

    MAIN            reduce using rule 12 (func_programa_loop -> epsilon .)


state 15

    (1) programa -> PROGRAM ID ; var_opcional func_programa_loop . main
    (2) main -> . MAIN ( ) { loop_estatuto }

    MAIN            shift and go to state 22

    main                           shift and go to state 23

state 16

    (8) var_declaracion -> VARS tipo lista_ids . ; loop_var_decl

    ;               shift and go to state 24


state 17

    (23) lista_ids -> ID . loop_lista_ids
    (24) lista_ids -> ID . [ INT ] loop_lista_ids
    (25) loop_lista_ids -> . , ID loop_lista_ids
    (26) loop_lista_ids -> . , ID [ INT ] loop_lista_ids
    (27) loop_lista_ids -> . epsilon
    (77) epsilon -> .

    [               shift and go to state 28
    ,               shift and go to state 26
    ;               reduce using rule 77 (epsilon -> .)

    epsilon                        shift and go to state 25
    loop_lista_ids                 shift and go to state 27

state 18

    (11) func_programa_loop -> func_definicion func_programa_loop .

    MAIN            reduce using rule 11 (func_programa_loop -> func_definicion func_programa_loop .)


state 19

    (13) func_definicion -> FUNCTION func_tipo_retorno . ID ( func_parametro ) ; var_opcional { loop_estatuto }

    ID              shift and go to state 29


state 20

    (14) func_tipo_retorno -> tipo .

    ID              reduce using rule 14 (func_tipo_retorno -> tipo .)


state 21

    (15) func_tipo_retorno -> VOID .

    ID              reduce using rule 15 (func_tipo_retorno -> VOID .)


state 22

    (2) main -> MAIN . ( ) { loop_estatuto }

    (               shift and go to state 30


state 23

    (1) programa -> PROGRAM ID ; var_opcional func_programa_loop main .

    $end            reduce using rule 1 (programa -> PROGRAM ID ; var_opcional func_programa_loop main .)


state 24

    (8) var_declaracion -> VARS tipo lista_ids ; . loop_var_decl
    (9) loop_var_decl -> . tipo lista_ids ; loop_var_decl
    (10) loop_var_decl -> . epsilon
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (77) epsilon -> .

    INT             shift and go to state 11
    FLOAT           shift and go to state 9
    FUNCTION        reduce using rule 77 (epsilon -> .)
    MAIN            reduce using rule 77 (epsilon -> .)
    {               reduce using rule 77 (epsilon -> .)

    epsilon                        shift and go to state 32
    loop_var_decl                  shift and go to state 33
    tipo                           shift and go to state 31

state 25

    (27) loop_lista_ids -> epsilon .

    ;               reduce using rule 27 (loop_lista_ids -> epsilon .)


state 26

    (25) loop_lista_ids -> , . ID loop_lista_ids
    (26) loop_lista_ids -> , . ID [ INT ] loop_lista_ids

    ID              shift and go to state 34


state 27

    (23) lista_ids -> ID loop_lista_ids .

    ;               reduce using rule 23 (lista_ids -> ID loop_lista_ids .)


state 28

    (24) lista_ids -> ID [ . INT ] loop_lista_ids

    INT             shift and go to state 35


state 29

    (13) func_definicion -> FUNCTION func_tipo_retorno ID . ( func_parametro ) ; var_opcional { loop_estatuto }

    (               shift and go to state 36


state 30

    (2) main -> MAIN ( . ) { loop_estatuto }

    )               shift and go to state 37


state 31

    (9) loop_var_decl -> tipo . lista_ids ; loop_var_decl
    (23) lista_ids -> . ID loop_lista_ids
    (24) lista_ids -> . ID [ INT ] loop_lista_ids

    ID              shift and go to state 17

    lista_ids                      shift and go to state 38

state 32

    (10) loop_var_decl -> epsilon .

    FUNCTION        reduce using rule 10 (loop_var_decl -> epsilon .)
    MAIN            reduce using rule 10 (loop_var_decl -> epsilon .)
    {               reduce using rule 10 (loop_var_decl -> epsilon .)


state 33

    (8) var_declaracion -> VARS tipo lista_ids ; loop_var_decl .

    FUNCTION        reduce using rule 8 (var_declaracion -> VARS tipo lista_ids ; loop_var_decl .)
    MAIN            reduce using rule 8 (var_declaracion -> VARS tipo lista_ids ; loop_var_decl .)
    {               reduce using rule 8 (var_declaracion -> VARS tipo lista_ids ; loop_var_decl .)


state 34

    (25) loop_lista_ids -> , ID . loop_lista_ids
    (26) loop_lista_ids -> , ID . [ INT ] loop_lista_ids
    (25) loop_lista_ids -> . , ID loop_lista_ids
    (26) loop_lista_ids -> . , ID [ INT ] loop_lista_ids
    (27) loop_lista_ids -> . epsilon
    (77) epsilon -> .

    [               shift and go to state 40
    ,               shift and go to state 26
    ;               reduce using rule 77 (epsilon -> .)

    epsilon                        shift and go to state 25
    loop_lista_ids                 shift and go to state 39

state 35

    (24) lista_ids -> ID [ INT . ] loop_lista_ids

    ]               shift and go to state 41


state 36

    (13) func_definicion -> FUNCTION func_tipo_retorno ID ( . func_parametro ) ; var_opcional { loop_estatuto }
    (16) func_parametro -> . parametro func_parametro
    (17) func_parametro -> . epsilon
    (18) parametro -> . tipo ID loop_parametro
    (77) epsilon -> .
    (21) tipo -> . INT
    (22) tipo -> . FLOAT

    )               reduce using rule 77 (epsilon -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 9

    tipo                           shift and go to state 42
    parametro                      shift and go to state 44
    epsilon                        shift and go to state 45
    func_parametro                 shift and go to state 43

state 37

    (2) main -> MAIN ( ) . { loop_estatuto }

    {               shift and go to state 46


state 38

    (9) loop_var_decl -> tipo lista_ids . ; loop_var_decl

    ;               shift and go to state 47


state 39

    (25) loop_lista_ids -> , ID loop_lista_ids .

    ;               reduce using rule 25 (loop_lista_ids -> , ID loop_lista_ids .)


state 40

    (26) loop_lista_ids -> , ID [ . INT ] loop_lista_ids

    INT             shift and go to state 48


state 41

    (24) lista_ids -> ID [ INT ] . loop_lista_ids
    (25) loop_lista_ids -> . , ID loop_lista_ids
    (26) loop_lista_ids -> . , ID [ INT ] loop_lista_ids
    (27) loop_lista_ids -> . epsilon
    (77) epsilon -> .

    ,               shift and go to state 26
    ;               reduce using rule 77 (epsilon -> .)

    epsilon                        shift and go to state 25
    loop_lista_ids                 shift and go to state 49

state 42

    (18) parametro -> tipo . ID loop_parametro

    ID              shift and go to state 50


state 43

    (13) func_definicion -> FUNCTION func_tipo_retorno ID ( func_parametro . ) ; var_opcional { loop_estatuto }

    )               shift and go to state 51


state 44

    (16) func_parametro -> parametro . func_parametro
    (16) func_parametro -> . parametro func_parametro
    (17) func_parametro -> . epsilon
    (18) parametro -> . tipo ID loop_parametro
    (77) epsilon -> .
    (21) tipo -> . INT
    (22) tipo -> . FLOAT

    )               reduce using rule 77 (epsilon -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 9

    parametro                      shift and go to state 44
    func_parametro                 shift and go to state 52
    tipo                           shift and go to state 42
    epsilon                        shift and go to state 45

state 45

    (17) func_parametro -> epsilon .

    )               reduce using rule 17 (func_parametro -> epsilon .)


state 46

    (2) main -> MAIN ( ) { . loop_estatuto }
    (48) loop_estatuto -> . estatuto loop_estatuto
    (49) loop_estatuto -> . epsilon
    (28) estatuto -> . asignacion
    (29) estatuto -> . func_llamada ;
    (30) estatuto -> . read
    (31) estatuto -> . write
    (32) estatuto -> . decision
    (33) estatuto -> . repeticion
    (77) epsilon -> .
    (34) asignacion -> . variable = hyper_exp ;
    (35) func_llamada -> . ID ( )
    (36) func_llamada -> . ID ( hyper_exp_loop )
    (40) read -> . READ ( variable_loop ) ;
    (44) write -> . WRITE ( hyper_exp_loop ) ;
    (45) decision -> . IF ( hyper_exp ) THEN { loop_estatuto } decision_1
    (50) repeticion -> . condicional
    (51) repeticion -> . no_condicional
    (5) variable -> . ID variable_1
    (52) condicional -> . WHILE ( hyper_exp ) DO { loop_estatuto }
    (53) no_condicional -> . FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto }

    }               reduce using rule 77 (epsilon -> .)
    ID              shift and go to state 59
    READ            shift and go to state 53
    WRITE           shift and go to state 66
    IF              shift and go to state 68
    WHILE           shift and go to state 54
    FOR             shift and go to state 62

    asignacion                     shift and go to state 69
    read                           shift and go to state 63
    epsilon                        shift and go to state 64
    decision                       shift and go to state 57
    estatuto                       shift and go to state 58
    write                          shift and go to state 60
    variable                       shift and go to state 67
    func_llamada                   shift and go to state 55
    repeticion                     shift and go to state 70
    loop_estatuto                  shift and go to state 56
    condicional                    shift and go to state 65
    no_condicional                 shift and go to state 61

state 47

    (9) loop_var_decl -> tipo lista_ids ; . loop_var_decl
    (9) loop_var_decl -> . tipo lista_ids ; loop_var_decl
    (10) loop_var_decl -> . epsilon
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (77) epsilon -> .

    INT             shift and go to state 11
    FLOAT           shift and go to state 9
    FUNCTION        reduce using rule 77 (epsilon -> .)
    MAIN            reduce using rule 77 (epsilon -> .)
    {               reduce using rule 77 (epsilon -> .)

    epsilon                        shift and go to state 32
    loop_var_decl                  shift and go to state 71
    tipo                           shift and go to state 31

state 48

    (26) loop_lista_ids -> , ID [ INT . ] loop_lista_ids

    ]               shift and go to state 72


state 49

    (24) lista_ids -> ID [ INT ] loop_lista_ids .

    ;               reduce using rule 24 (lista_ids -> ID [ INT ] loop_lista_ids .)


state 50

    (18) parametro -> tipo ID . loop_parametro
    (19) loop_parametro -> . , tipo ID loop_parametro
    (20) loop_parametro -> . epsilon
    (77) epsilon -> .

    ,               shift and go to state 75
    INT             reduce using rule 77 (epsilon -> .)
    FLOAT           reduce using rule 77 (epsilon -> .)
    )               reduce using rule 77 (epsilon -> .)

    loop_parametro                 shift and go to state 73
    epsilon                        shift and go to state 74

state 51

    (13) func_definicion -> FUNCTION func_tipo_retorno ID ( func_parametro ) . ; var_opcional { loop_estatuto }

    ;               shift and go to state 76


state 52

    (16) func_parametro -> parametro func_parametro .

    )               reduce using rule 16 (func_parametro -> parametro func_parametro .)


state 53

    (40) read -> READ . ( variable_loop ) ;

    (               shift and go to state 77


state 54

    (52) condicional -> WHILE . ( hyper_exp ) DO { loop_estatuto }

    (               shift and go to state 78


state 55

    (29) estatuto -> func_llamada . ;

    ;               shift and go to state 79


state 56

    (2) main -> MAIN ( ) { loop_estatuto . }

    }               shift and go to state 80


state 57

    (32) estatuto -> decision .

    ID              reduce using rule 32 (estatuto -> decision .)
    READ            reduce using rule 32 (estatuto -> decision .)
    WRITE           reduce using rule 32 (estatuto -> decision .)
    IF              reduce using rule 32 (estatuto -> decision .)
    WHILE           reduce using rule 32 (estatuto -> decision .)
    FOR             reduce using rule 32 (estatuto -> decision .)
    }               reduce using rule 32 (estatuto -> decision .)


state 58

    (48) loop_estatuto -> estatuto . loop_estatuto
    (48) loop_estatuto -> . estatuto loop_estatuto
    (49) loop_estatuto -> . epsilon
    (28) estatuto -> . asignacion
    (29) estatuto -> . func_llamada ;
    (30) estatuto -> . read
    (31) estatuto -> . write
    (32) estatuto -> . decision
    (33) estatuto -> . repeticion
    (77) epsilon -> .
    (34) asignacion -> . variable = hyper_exp ;
    (35) func_llamada -> . ID ( )
    (36) func_llamada -> . ID ( hyper_exp_loop )
    (40) read -> . READ ( variable_loop ) ;
    (44) write -> . WRITE ( hyper_exp_loop ) ;
    (45) decision -> . IF ( hyper_exp ) THEN { loop_estatuto } decision_1
    (50) repeticion -> . condicional
    (51) repeticion -> . no_condicional
    (5) variable -> . ID variable_1
    (52) condicional -> . WHILE ( hyper_exp ) DO { loop_estatuto }
    (53) no_condicional -> . FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto }

    }               reduce using rule 77 (epsilon -> .)
    ID              shift and go to state 59
    READ            shift and go to state 53
    WRITE           shift and go to state 66
    IF              shift and go to state 68
    WHILE           shift and go to state 54
    FOR             shift and go to state 62

    asignacion                     shift and go to state 69
    read                           shift and go to state 63
    epsilon                        shift and go to state 64
    decision                       shift and go to state 57
    estatuto                       shift and go to state 58
    write                          shift and go to state 60
    variable                       shift and go to state 67
    func_llamada                   shift and go to state 55
    repeticion                     shift and go to state 70
    loop_estatuto                  shift and go to state 81
    condicional                    shift and go to state 65
    no_condicional                 shift and go to state 61

state 59

    (35) func_llamada -> ID . ( )
    (36) func_llamada -> ID . ( hyper_exp_loop )
    (5) variable -> ID . variable_1
    (6) variable_1 -> . [ hyper_exp ]
    (7) variable_1 -> . epsilon
    (77) epsilon -> .

    (               shift and go to state 82
    [               shift and go to state 85
    =               reduce using rule 77 (epsilon -> .)

    epsilon                        shift and go to state 84
    variable_1                     shift and go to state 83

state 60

    (31) estatuto -> write .

    ID              reduce using rule 31 (estatuto -> write .)
    READ            reduce using rule 31 (estatuto -> write .)
    WRITE           reduce using rule 31 (estatuto -> write .)
    IF              reduce using rule 31 (estatuto -> write .)
    WHILE           reduce using rule 31 (estatuto -> write .)
    FOR             reduce using rule 31 (estatuto -> write .)
    }               reduce using rule 31 (estatuto -> write .)


state 61

    (51) repeticion -> no_condicional .

    ID              reduce using rule 51 (repeticion -> no_condicional .)
    READ            reduce using rule 51 (repeticion -> no_condicional .)
    WRITE           reduce using rule 51 (repeticion -> no_condicional .)
    IF              reduce using rule 51 (repeticion -> no_condicional .)
    WHILE           reduce using rule 51 (repeticion -> no_condicional .)
    FOR             reduce using rule 51 (repeticion -> no_condicional .)
    }               reduce using rule 51 (repeticion -> no_condicional .)


state 62

    (53) no_condicional -> FOR . variable = hyper_exp TO hyper_exp DO { loop_estatuto }
    (5) variable -> . ID variable_1

    ID              shift and go to state 87

    variable                       shift and go to state 86

state 63

    (30) estatuto -> read .

    ID              reduce using rule 30 (estatuto -> read .)
    READ            reduce using rule 30 (estatuto -> read .)
    WRITE           reduce using rule 30 (estatuto -> read .)
    IF              reduce using rule 30 (estatuto -> read .)
    WHILE           reduce using rule 30 (estatuto -> read .)
    FOR             reduce using rule 30 (estatuto -> read .)
    }               reduce using rule 30 (estatuto -> read .)


state 64

    (49) loop_estatuto -> epsilon .

    }               reduce using rule 49 (loop_estatuto -> epsilon .)


state 65

    (50) repeticion -> condicional .

    ID              reduce using rule 50 (repeticion -> condicional .)
    READ            reduce using rule 50 (repeticion -> condicional .)
    WRITE           reduce using rule 50 (repeticion -> condicional .)
    IF              reduce using rule 50 (repeticion -> condicional .)
    WHILE           reduce using rule 50 (repeticion -> condicional .)
    FOR             reduce using rule 50 (repeticion -> condicional .)
    }               reduce using rule 50 (repeticion -> condicional .)


state 66

    (44) write -> WRITE . ( hyper_exp_loop ) ;

    (               shift and go to state 88


state 67

    (34) asignacion -> variable . = hyper_exp ;

    =               shift and go to state 89


state 68

    (45) decision -> IF . ( hyper_exp ) THEN { loop_estatuto } decision_1

    (               shift and go to state 90


state 69

    (28) estatuto -> asignacion .

    ID              reduce using rule 28 (estatuto -> asignacion .)
    READ            reduce using rule 28 (estatuto -> asignacion .)
    WRITE           reduce using rule 28 (estatuto -> asignacion .)
    IF              reduce using rule 28 (estatuto -> asignacion .)
    WHILE           reduce using rule 28 (estatuto -> asignacion .)
    FOR             reduce using rule 28 (estatuto -> asignacion .)
    }               reduce using rule 28 (estatuto -> asignacion .)


state 70

    (33) estatuto -> repeticion .

    ID              reduce using rule 33 (estatuto -> repeticion .)
    READ            reduce using rule 33 (estatuto -> repeticion .)
    WRITE           reduce using rule 33 (estatuto -> repeticion .)
    IF              reduce using rule 33 (estatuto -> repeticion .)
    WHILE           reduce using rule 33 (estatuto -> repeticion .)
    FOR             reduce using rule 33 (estatuto -> repeticion .)
    }               reduce using rule 33 (estatuto -> repeticion .)


state 71

    (9) loop_var_decl -> tipo lista_ids ; loop_var_decl .

    FUNCTION        reduce using rule 9 (loop_var_decl -> tipo lista_ids ; loop_var_decl .)
    MAIN            reduce using rule 9 (loop_var_decl -> tipo lista_ids ; loop_var_decl .)
    {               reduce using rule 9 (loop_var_decl -> tipo lista_ids ; loop_var_decl .)


state 72

    (26) loop_lista_ids -> , ID [ INT ] . loop_lista_ids
    (25) loop_lista_ids -> . , ID loop_lista_ids
    (26) loop_lista_ids -> . , ID [ INT ] loop_lista_ids
    (27) loop_lista_ids -> . epsilon
    (77) epsilon -> .

    ,               shift and go to state 26
    ;               reduce using rule 77 (epsilon -> .)

    epsilon                        shift and go to state 25
    loop_lista_ids                 shift and go to state 91

state 73

    (18) parametro -> tipo ID loop_parametro .

    INT             reduce using rule 18 (parametro -> tipo ID loop_parametro .)
    FLOAT           reduce using rule 18 (parametro -> tipo ID loop_parametro .)
    )               reduce using rule 18 (parametro -> tipo ID loop_parametro .)


state 74

    (20) loop_parametro -> epsilon .

    INT             reduce using rule 20 (loop_parametro -> epsilon .)
    FLOAT           reduce using rule 20 (loop_parametro -> epsilon .)
    )               reduce using rule 20 (loop_parametro -> epsilon .)


state 75

    (19) loop_parametro -> , . tipo ID loop_parametro
    (21) tipo -> . INT
    (22) tipo -> . FLOAT

    INT             shift and go to state 11
    FLOAT           shift and go to state 9

    tipo                           shift and go to state 92

state 76

    (13) func_definicion -> FUNCTION func_tipo_retorno ID ( func_parametro ) ; . var_opcional { loop_estatuto }
    (3) var_opcional -> . var_declaracion
    (4) var_opcional -> . epsilon
    (8) var_declaracion -> . VARS tipo lista_ids ; loop_var_decl
    (77) epsilon -> .

    VARS            shift and go to state 5
    {               reduce using rule 77 (epsilon -> .)

    epsilon                        shift and go to state 6
    var_declaracion                shift and go to state 7
    var_opcional                   shift and go to state 93

state 77

    (40) read -> READ ( . variable_loop ) ;
    (41) variable_loop -> . variable variable_loop_1
    (5) variable -> . ID variable_1

    ID              shift and go to state 87

    variable                       shift and go to state 94
    variable_loop                  shift and go to state 95

state 78

    (52) condicional -> WHILE ( . hyper_exp ) DO { loop_estatuto }
    (54) hyper_exp -> . super_exp hyper_exp_1
    (58) super_exp -> . exp super_exp_1
    (64) exp -> . term exp_1
    (68) term -> . factor term_1
    (72) factor -> . VAL_INT
    (73) factor -> . VAL_FLOAT
    (74) factor -> . VAL_STRING
    (75) factor -> . variable
    (76) factor -> . ( hyper_exp )
    (5) variable -> . ID variable_1

    VAL_INT         shift and go to state 103
    VAL_FLOAT       shift and go to state 104
    VAL_STRING      shift and go to state 105
    (               shift and go to state 97
    ID              shift and go to state 87

    super_exp                      shift and go to state 96
    term                           shift and go to state 102
    hyper_exp                      shift and go to state 99
    exp                            shift and go to state 100
    factor                         shift and go to state 98
    variable                       shift and go to state 101

state 79

    (29) estatuto -> func_llamada ; .

    ID              reduce using rule 29 (estatuto -> func_llamada ; .)
    READ            reduce using rule 29 (estatuto -> func_llamada ; .)
    WRITE           reduce using rule 29 (estatuto -> func_llamada ; .)
    IF              reduce using rule 29 (estatuto -> func_llamada ; .)
    WHILE           reduce using rule 29 (estatuto -> func_llamada ; .)
    FOR             reduce using rule 29 (estatuto -> func_llamada ; .)
    }               reduce using rule 29 (estatuto -> func_llamada ; .)


state 80

    (2) main -> MAIN ( ) { loop_estatuto } .

    $end            reduce using rule 2 (main -> MAIN ( ) { loop_estatuto } .)


state 81

    (48) loop_estatuto -> estatuto loop_estatuto .

    }               reduce using rule 48 (loop_estatuto -> estatuto loop_estatuto .)


state 82

    (35) func_llamada -> ID ( . )
    (36) func_llamada -> ID ( . hyper_exp_loop )
    (37) hyper_exp_loop -> . hyper_exp hyper_exp_loop_1
    (54) hyper_exp -> . super_exp hyper_exp_1
    (58) super_exp -> . exp super_exp_1
    (64) exp -> . term exp_1
    (68) term -> . factor term_1
    (72) factor -> . VAL_INT
    (73) factor -> . VAL_FLOAT
    (74) factor -> . VAL_STRING
    (75) factor -> . variable
    (76) factor -> . ( hyper_exp )
    (5) variable -> . ID variable_1

    )               shift and go to state 108
    VAL_INT         shift and go to state 103
    VAL_FLOAT       shift and go to state 104
    VAL_STRING      shift and go to state 105
    (               shift and go to state 97
    ID              shift and go to state 87

    super_exp                      shift and go to state 96
    term                           shift and go to state 102
    hyper_exp                      shift and go to state 106
    hyper_exp_loop                 shift and go to state 107
    exp                            shift and go to state 100
    factor                         shift and go to state 98
    variable                       shift and go to state 101

state 83

    (5) variable -> ID variable_1 .

    *               reduce using rule 5 (variable -> ID variable_1 .)
    /               reduce using rule 5 (variable -> ID variable_1 .)
    +               reduce using rule 5 (variable -> ID variable_1 .)
    -               reduce using rule 5 (variable -> ID variable_1 .)
    <               reduce using rule 5 (variable -> ID variable_1 .)
    >               reduce using rule 5 (variable -> ID variable_1 .)
    EQUAL_TO        reduce using rule 5 (variable -> ID variable_1 .)
    NOT_EQUAL_TO    reduce using rule 5 (variable -> ID variable_1 .)
    &               reduce using rule 5 (variable -> ID variable_1 .)
    |               reduce using rule 5 (variable -> ID variable_1 .)
    )               reduce using rule 5 (variable -> ID variable_1 .)
    ,               reduce using rule 5 (variable -> ID variable_1 .)
    ]               reduce using rule 5 (variable -> ID variable_1 .)
    ;               reduce using rule 5 (variable -> ID variable_1 .)
    TO              reduce using rule 5 (variable -> ID variable_1 .)
    DO              reduce using rule 5 (variable -> ID variable_1 .)
    =               reduce using rule 5 (variable -> ID variable_1 .)


state 84

    (7) variable_1 -> epsilon .

    =               reduce using rule 7 (variable_1 -> epsilon .)
    ,               reduce using rule 7 (variable_1 -> epsilon .)
    )               reduce using rule 7 (variable_1 -> epsilon .)
    *               reduce using rule 7 (variable_1 -> epsilon .)
    /               reduce using rule 7 (variable_1 -> epsilon .)
    +               reduce using rule 7 (variable_1 -> epsilon .)
    -               reduce using rule 7 (variable_1 -> epsilon .)
    <               reduce using rule 7 (variable_1 -> epsilon .)
    >               reduce using rule 7 (variable_1 -> epsilon .)
    EQUAL_TO        reduce using rule 7 (variable_1 -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 7 (variable_1 -> epsilon .)
    &               reduce using rule 7 (variable_1 -> epsilon .)
    |               reduce using rule 7 (variable_1 -> epsilon .)
    ]               reduce using rule 7 (variable_1 -> epsilon .)
    ;               reduce using rule 7 (variable_1 -> epsilon .)
    TO              reduce using rule 7 (variable_1 -> epsilon .)
    DO              reduce using rule 7 (variable_1 -> epsilon .)


state 85

    (6) variable_1 -> [ . hyper_exp ]
    (54) hyper_exp -> . super_exp hyper_exp_1
    (58) super_exp -> . exp super_exp_1
    (64) exp -> . term exp_1
    (68) term -> . factor term_1
    (72) factor -> . VAL_INT
    (73) factor -> . VAL_FLOAT
    (74) factor -> . VAL_STRING
    (75) factor -> . variable
    (76) factor -> . ( hyper_exp )
    (5) variable -> . ID variable_1

    VAL_INT         shift and go to state 103
    VAL_FLOAT       shift and go to state 104
    VAL_STRING      shift and go to state 105
    (               shift and go to state 97
    ID              shift and go to state 87

    super_exp                      shift and go to state 96
    term                           shift and go to state 102
    hyper_exp                      shift and go to state 109
    exp                            shift and go to state 100
    factor                         shift and go to state 98
    variable                       shift and go to state 101

state 86

    (53) no_condicional -> FOR variable . = hyper_exp TO hyper_exp DO { loop_estatuto }

    =               shift and go to state 110


state 87

    (5) variable -> ID . variable_1
    (6) variable_1 -> . [ hyper_exp ]
    (7) variable_1 -> . epsilon
    (77) epsilon -> .

    [               shift and go to state 85
    =               reduce using rule 77 (epsilon -> .)
    ,               reduce using rule 77 (epsilon -> .)
    )               reduce using rule 77 (epsilon -> .)
    *               reduce using rule 77 (epsilon -> .)
    /               reduce using rule 77 (epsilon -> .)
    +               reduce using rule 77 (epsilon -> .)
    -               reduce using rule 77 (epsilon -> .)
    <               reduce using rule 77 (epsilon -> .)
    >               reduce using rule 77 (epsilon -> .)
    EQUAL_TO        reduce using rule 77 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 77 (epsilon -> .)
    &               reduce using rule 77 (epsilon -> .)
    |               reduce using rule 77 (epsilon -> .)
    ]               reduce using rule 77 (epsilon -> .)
    ;               reduce using rule 77 (epsilon -> .)
    TO              reduce using rule 77 (epsilon -> .)
    DO              reduce using rule 77 (epsilon -> .)

    epsilon                        shift and go to state 84
    variable_1                     shift and go to state 83

state 88

    (44) write -> WRITE ( . hyper_exp_loop ) ;
    (37) hyper_exp_loop -> . hyper_exp hyper_exp_loop_1
    (54) hyper_exp -> . super_exp hyper_exp_1
    (58) super_exp -> . exp super_exp_1
    (64) exp -> . term exp_1
    (68) term -> . factor term_1
    (72) factor -> . VAL_INT
    (73) factor -> . VAL_FLOAT
    (74) factor -> . VAL_STRING
    (75) factor -> . variable
    (76) factor -> . ( hyper_exp )
    (5) variable -> . ID variable_1

    VAL_INT         shift and go to state 103
    VAL_FLOAT       shift and go to state 104
    VAL_STRING      shift and go to state 105
    (               shift and go to state 97
    ID              shift and go to state 87

    super_exp                      shift and go to state 96
    term                           shift and go to state 102
    hyper_exp                      shift and go to state 106
    hyper_exp_loop                 shift and go to state 111
    exp                            shift and go to state 100
    factor                         shift and go to state 98
    variable                       shift and go to state 101

state 89

    (34) asignacion -> variable = . hyper_exp ;
    (54) hyper_exp -> . super_exp hyper_exp_1
    (58) super_exp -> . exp super_exp_1
    (64) exp -> . term exp_1
    (68) term -> . factor term_1
    (72) factor -> . VAL_INT
    (73) factor -> . VAL_FLOAT
    (74) factor -> . VAL_STRING
    (75) factor -> . variable
    (76) factor -> . ( hyper_exp )
    (5) variable -> . ID variable_1

    VAL_INT         shift and go to state 103
    VAL_FLOAT       shift and go to state 104
    VAL_STRING      shift and go to state 105
    (               shift and go to state 97
    ID              shift and go to state 87

    super_exp                      shift and go to state 96
    term                           shift and go to state 102
    hyper_exp                      shift and go to state 112
    exp                            shift and go to state 100
    factor                         shift and go to state 98
    variable                       shift and go to state 101

state 90

    (45) decision -> IF ( . hyper_exp ) THEN { loop_estatuto } decision_1
    (54) hyper_exp -> . super_exp hyper_exp_1
    (58) super_exp -> . exp super_exp_1
    (64) exp -> . term exp_1
    (68) term -> . factor term_1
    (72) factor -> . VAL_INT
    (73) factor -> . VAL_FLOAT
    (74) factor -> . VAL_STRING
    (75) factor -> . variable
    (76) factor -> . ( hyper_exp )
    (5) variable -> . ID variable_1

    VAL_INT         shift and go to state 103
    VAL_FLOAT       shift and go to state 104
    VAL_STRING      shift and go to state 105
    (               shift and go to state 97
    ID              shift and go to state 87

    super_exp                      shift and go to state 96
    term                           shift and go to state 102
    hyper_exp                      shift and go to state 113
    exp                            shift and go to state 100
    factor                         shift and go to state 98
    variable                       shift and go to state 101

state 91

    (26) loop_lista_ids -> , ID [ INT ] loop_lista_ids .

    ;               reduce using rule 26 (loop_lista_ids -> , ID [ INT ] loop_lista_ids .)


state 92

    (19) loop_parametro -> , tipo . ID loop_parametro

    ID              shift and go to state 114


state 93

    (13) func_definicion -> FUNCTION func_tipo_retorno ID ( func_parametro ) ; var_opcional . { loop_estatuto }

    {               shift and go to state 115


state 94

    (41) variable_loop -> variable . variable_loop_1
    (42) variable_loop_1 -> . , variable variable_loop_1
    (43) variable_loop_1 -> . epsilon
    (77) epsilon -> .

    ,               shift and go to state 118
    )               reduce using rule 77 (epsilon -> .)

    epsilon                        shift and go to state 116
    variable_loop_1                shift and go to state 117

state 95

    (40) read -> READ ( variable_loop . ) ;

    )               shift and go to state 119


state 96

    (54) hyper_exp -> super_exp . hyper_exp_1
    (55) hyper_exp_1 -> . & super_exp
    (56) hyper_exp_1 -> . | super_exp
    (57) hyper_exp_1 -> . epsilon
    (77) epsilon -> .

    &               shift and go to state 123
    |               shift and go to state 121
    )               reduce using rule 77 (epsilon -> .)
    ,               reduce using rule 77 (epsilon -> .)
    ]               reduce using rule 77 (epsilon -> .)
    ;               reduce using rule 77 (epsilon -> .)
    TO              reduce using rule 77 (epsilon -> .)
    DO              reduce using rule 77 (epsilon -> .)

    hyper_exp_1                    shift and go to state 120
    epsilon                        shift and go to state 122

state 97

    (76) factor -> ( . hyper_exp )
    (54) hyper_exp -> . super_exp hyper_exp_1
    (58) super_exp -> . exp super_exp_1
    (64) exp -> . term exp_1
    (68) term -> . factor term_1
    (72) factor -> . VAL_INT
    (73) factor -> . VAL_FLOAT
    (74) factor -> . VAL_STRING
    (75) factor -> . variable
    (76) factor -> . ( hyper_exp )
    (5) variable -> . ID variable_1

    VAL_INT         shift and go to state 103
    VAL_FLOAT       shift and go to state 104
    VAL_STRING      shift and go to state 105
    (               shift and go to state 97
    ID              shift and go to state 87

    super_exp                      shift and go to state 96
    term                           shift and go to state 102
    hyper_exp                      shift and go to state 124
    exp                            shift and go to state 100
    factor                         shift and go to state 98
    variable                       shift and go to state 101

state 98

    (68) term -> factor . term_1
    (69) term_1 -> . * factor
    (70) term_1 -> . / factor
    (71) term_1 -> . epsilon
    (77) epsilon -> .

    *               shift and go to state 127
    /               shift and go to state 128
    +               reduce using rule 77 (epsilon -> .)
    -               reduce using rule 77 (epsilon -> .)
    <               reduce using rule 77 (epsilon -> .)
    >               reduce using rule 77 (epsilon -> .)
    EQUAL_TO        reduce using rule 77 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 77 (epsilon -> .)
    &               reduce using rule 77 (epsilon -> .)
    |               reduce using rule 77 (epsilon -> .)
    )               reduce using rule 77 (epsilon -> .)
    ,               reduce using rule 77 (epsilon -> .)
    ]               reduce using rule 77 (epsilon -> .)
    ;               reduce using rule 77 (epsilon -> .)
    TO              reduce using rule 77 (epsilon -> .)
    DO              reduce using rule 77 (epsilon -> .)

    term_1                         shift and go to state 125
    epsilon                        shift and go to state 126

state 99

    (52) condicional -> WHILE ( hyper_exp . ) DO { loop_estatuto }

    )               shift and go to state 129


state 100

    (58) super_exp -> exp . super_exp_1
    (59) super_exp_1 -> . < exp
    (60) super_exp_1 -> . > exp
    (61) super_exp_1 -> . EQUAL_TO exp
    (62) super_exp_1 -> . NOT_EQUAL_TO exp
    (63) super_exp_1 -> . epsilon
    (77) epsilon -> .

    <               shift and go to state 134
    >               shift and go to state 135
    EQUAL_TO        shift and go to state 130
    NOT_EQUAL_TO    shift and go to state 131
    &               reduce using rule 77 (epsilon -> .)
    |               reduce using rule 77 (epsilon -> .)
    )               reduce using rule 77 (epsilon -> .)
    ,               reduce using rule 77 (epsilon -> .)
    ]               reduce using rule 77 (epsilon -> .)
    ;               reduce using rule 77 (epsilon -> .)
    TO              reduce using rule 77 (epsilon -> .)
    DO              reduce using rule 77 (epsilon -> .)

    epsilon                        shift and go to state 132
    super_exp_1                    shift and go to state 133

state 101

    (75) factor -> variable .

    *               reduce using rule 75 (factor -> variable .)
    /               reduce using rule 75 (factor -> variable .)
    +               reduce using rule 75 (factor -> variable .)
    -               reduce using rule 75 (factor -> variable .)
    <               reduce using rule 75 (factor -> variable .)
    >               reduce using rule 75 (factor -> variable .)
    EQUAL_TO        reduce using rule 75 (factor -> variable .)
    NOT_EQUAL_TO    reduce using rule 75 (factor -> variable .)
    )               reduce using rule 75 (factor -> variable .)
    ,               reduce using rule 75 (factor -> variable .)
    ]               reduce using rule 75 (factor -> variable .)
    ;               reduce using rule 75 (factor -> variable .)
    TO              reduce using rule 75 (factor -> variable .)
    DO              reduce using rule 75 (factor -> variable .)
    &               reduce using rule 75 (factor -> variable .)
    |               reduce using rule 75 (factor -> variable .)


state 102

    (64) exp -> term . exp_1
    (65) exp_1 -> . + term
    (66) exp_1 -> . - term
    (67) exp_1 -> . epsilon
    (77) epsilon -> .

    +               shift and go to state 138
    -               shift and go to state 136
    <               reduce using rule 77 (epsilon -> .)
    >               reduce using rule 77 (epsilon -> .)
    EQUAL_TO        reduce using rule 77 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 77 (epsilon -> .)
    &               reduce using rule 77 (epsilon -> .)
    |               reduce using rule 77 (epsilon -> .)
    )               reduce using rule 77 (epsilon -> .)
    ,               reduce using rule 77 (epsilon -> .)
    ]               reduce using rule 77 (epsilon -> .)
    ;               reduce using rule 77 (epsilon -> .)
    TO              reduce using rule 77 (epsilon -> .)
    DO              reduce using rule 77 (epsilon -> .)

    epsilon                        shift and go to state 139
    exp_1                          shift and go to state 137

state 103

    (72) factor -> VAL_INT .

    *               reduce using rule 72 (factor -> VAL_INT .)
    /               reduce using rule 72 (factor -> VAL_INT .)
    +               reduce using rule 72 (factor -> VAL_INT .)
    -               reduce using rule 72 (factor -> VAL_INT .)
    <               reduce using rule 72 (factor -> VAL_INT .)
    >               reduce using rule 72 (factor -> VAL_INT .)
    EQUAL_TO        reduce using rule 72 (factor -> VAL_INT .)
    NOT_EQUAL_TO    reduce using rule 72 (factor -> VAL_INT .)
    )               reduce using rule 72 (factor -> VAL_INT .)
    ,               reduce using rule 72 (factor -> VAL_INT .)
    ]               reduce using rule 72 (factor -> VAL_INT .)
    ;               reduce using rule 72 (factor -> VAL_INT .)
    TO              reduce using rule 72 (factor -> VAL_INT .)
    DO              reduce using rule 72 (factor -> VAL_INT .)
    &               reduce using rule 72 (factor -> VAL_INT .)
    |               reduce using rule 72 (factor -> VAL_INT .)


state 104

    (73) factor -> VAL_FLOAT .

    *               reduce using rule 73 (factor -> VAL_FLOAT .)
    /               reduce using rule 73 (factor -> VAL_FLOAT .)
    +               reduce using rule 73 (factor -> VAL_FLOAT .)
    -               reduce using rule 73 (factor -> VAL_FLOAT .)
    <               reduce using rule 73 (factor -> VAL_FLOAT .)
    >               reduce using rule 73 (factor -> VAL_FLOAT .)
    EQUAL_TO        reduce using rule 73 (factor -> VAL_FLOAT .)
    NOT_EQUAL_TO    reduce using rule 73 (factor -> VAL_FLOAT .)
    )               reduce using rule 73 (factor -> VAL_FLOAT .)
    ,               reduce using rule 73 (factor -> VAL_FLOAT .)
    ]               reduce using rule 73 (factor -> VAL_FLOAT .)
    ;               reduce using rule 73 (factor -> VAL_FLOAT .)
    TO              reduce using rule 73 (factor -> VAL_FLOAT .)
    DO              reduce using rule 73 (factor -> VAL_FLOAT .)
    &               reduce using rule 73 (factor -> VAL_FLOAT .)
    |               reduce using rule 73 (factor -> VAL_FLOAT .)


state 105

    (74) factor -> VAL_STRING .

    *               reduce using rule 74 (factor -> VAL_STRING .)
    /               reduce using rule 74 (factor -> VAL_STRING .)
    +               reduce using rule 74 (factor -> VAL_STRING .)
    -               reduce using rule 74 (factor -> VAL_STRING .)
    <               reduce using rule 74 (factor -> VAL_STRING .)
    >               reduce using rule 74 (factor -> VAL_STRING .)
    EQUAL_TO        reduce using rule 74 (factor -> VAL_STRING .)
    NOT_EQUAL_TO    reduce using rule 74 (factor -> VAL_STRING .)
    )               reduce using rule 74 (factor -> VAL_STRING .)
    ,               reduce using rule 74 (factor -> VAL_STRING .)
    ]               reduce using rule 74 (factor -> VAL_STRING .)
    ;               reduce using rule 74 (factor -> VAL_STRING .)
    TO              reduce using rule 74 (factor -> VAL_STRING .)
    DO              reduce using rule 74 (factor -> VAL_STRING .)
    &               reduce using rule 74 (factor -> VAL_STRING .)
    |               reduce using rule 74 (factor -> VAL_STRING .)


state 106

    (37) hyper_exp_loop -> hyper_exp . hyper_exp_loop_1
    (38) hyper_exp_loop_1 -> . , hyper_exp hyper_exp_loop_1
    (39) hyper_exp_loop_1 -> . epsilon
    (77) epsilon -> .

    ,               shift and go to state 141
    )               reduce using rule 77 (epsilon -> .)

    epsilon                        shift and go to state 140
    hyper_exp_loop_1               shift and go to state 142

state 107

    (36) func_llamada -> ID ( hyper_exp_loop . )

    )               shift and go to state 143


state 108

    (35) func_llamada -> ID ( ) .

    ;               reduce using rule 35 (func_llamada -> ID ( ) .)


state 109

    (6) variable_1 -> [ hyper_exp . ]

    ]               shift and go to state 144


state 110

    (53) no_condicional -> FOR variable = . hyper_exp TO hyper_exp DO { loop_estatuto }
    (54) hyper_exp -> . super_exp hyper_exp_1
    (58) super_exp -> . exp super_exp_1
    (64) exp -> . term exp_1
    (68) term -> . factor term_1
    (72) factor -> . VAL_INT
    (73) factor -> . VAL_FLOAT
    (74) factor -> . VAL_STRING
    (75) factor -> . variable
    (76) factor -> . ( hyper_exp )
    (5) variable -> . ID variable_1

    VAL_INT         shift and go to state 103
    VAL_FLOAT       shift and go to state 104
    VAL_STRING      shift and go to state 105
    (               shift and go to state 97
    ID              shift and go to state 87

    super_exp                      shift and go to state 96
    term                           shift and go to state 102
    hyper_exp                      shift and go to state 145
    exp                            shift and go to state 100
    factor                         shift and go to state 98
    variable                       shift and go to state 101

state 111

    (44) write -> WRITE ( hyper_exp_loop . ) ;

    )               shift and go to state 146


state 112

    (34) asignacion -> variable = hyper_exp . ;

    ;               shift and go to state 147


state 113

    (45) decision -> IF ( hyper_exp . ) THEN { loop_estatuto } decision_1

    )               shift and go to state 148


state 114

    (19) loop_parametro -> , tipo ID . loop_parametro
    (19) loop_parametro -> . , tipo ID loop_parametro
    (20) loop_parametro -> . epsilon
    (77) epsilon -> .

    ,               shift and go to state 75
    INT             reduce using rule 77 (epsilon -> .)
    FLOAT           reduce using rule 77 (epsilon -> .)
    )               reduce using rule 77 (epsilon -> .)

    loop_parametro                 shift and go to state 149
    epsilon                        shift and go to state 74

state 115

    (13) func_definicion -> FUNCTION func_tipo_retorno ID ( func_parametro ) ; var_opcional { . loop_estatuto }
    (48) loop_estatuto -> . estatuto loop_estatuto
    (49) loop_estatuto -> . epsilon
    (28) estatuto -> . asignacion
    (29) estatuto -> . func_llamada ;
    (30) estatuto -> . read
    (31) estatuto -> . write
    (32) estatuto -> . decision
    (33) estatuto -> . repeticion
    (77) epsilon -> .
    (34) asignacion -> . variable = hyper_exp ;
    (35) func_llamada -> . ID ( )
    (36) func_llamada -> . ID ( hyper_exp_loop )
    (40) read -> . READ ( variable_loop ) ;
    (44) write -> . WRITE ( hyper_exp_loop ) ;
    (45) decision -> . IF ( hyper_exp ) THEN { loop_estatuto } decision_1
    (50) repeticion -> . condicional
    (51) repeticion -> . no_condicional
    (5) variable -> . ID variable_1
    (52) condicional -> . WHILE ( hyper_exp ) DO { loop_estatuto }
    (53) no_condicional -> . FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto }

    }               reduce using rule 77 (epsilon -> .)
    ID              shift and go to state 59
    READ            shift and go to state 53
    WRITE           shift and go to state 66
    IF              shift and go to state 68
    WHILE           shift and go to state 54
    FOR             shift and go to state 62

    write                          shift and go to state 60
    asignacion                     shift and go to state 69
    read                           shift and go to state 63
    epsilon                        shift and go to state 64
    decision                       shift and go to state 57
    estatuto                       shift and go to state 58
    variable                       shift and go to state 67
    func_llamada                   shift and go to state 55
    repeticion                     shift and go to state 70
    loop_estatuto                  shift and go to state 150
    condicional                    shift and go to state 65
    no_condicional                 shift and go to state 61

state 116

    (43) variable_loop_1 -> epsilon .

    )               reduce using rule 43 (variable_loop_1 -> epsilon .)


state 117

    (41) variable_loop -> variable variable_loop_1 .

    )               reduce using rule 41 (variable_loop -> variable variable_loop_1 .)


state 118

    (42) variable_loop_1 -> , . variable variable_loop_1
    (5) variable -> . ID variable_1

    ID              shift and go to state 87

    variable                       shift and go to state 151

state 119

    (40) read -> READ ( variable_loop ) . ;

    ;               shift and go to state 152


state 120

    (54) hyper_exp -> super_exp hyper_exp_1 .

    )               reduce using rule 54 (hyper_exp -> super_exp hyper_exp_1 .)
    DO              reduce using rule 54 (hyper_exp -> super_exp hyper_exp_1 .)
    ;               reduce using rule 54 (hyper_exp -> super_exp hyper_exp_1 .)
    ,               reduce using rule 54 (hyper_exp -> super_exp hyper_exp_1 .)
    ]               reduce using rule 54 (hyper_exp -> super_exp hyper_exp_1 .)
    TO              reduce using rule 54 (hyper_exp -> super_exp hyper_exp_1 .)


state 121

    (56) hyper_exp_1 -> | . super_exp
    (58) super_exp -> . exp super_exp_1
    (64) exp -> . term exp_1
    (68) term -> . factor term_1
    (72) factor -> . VAL_INT
    (73) factor -> . VAL_FLOAT
    (74) factor -> . VAL_STRING
    (75) factor -> . variable
    (76) factor -> . ( hyper_exp )
    (5) variable -> . ID variable_1

    VAL_INT         shift and go to state 103
    VAL_FLOAT       shift and go to state 104
    VAL_STRING      shift and go to state 105
    (               shift and go to state 97
    ID              shift and go to state 87

    super_exp                      shift and go to state 153
    term                           shift and go to state 102
    exp                            shift and go to state 100
    factor                         shift and go to state 98
    variable                       shift and go to state 101

state 122

    (57) hyper_exp_1 -> epsilon .

    )               reduce using rule 57 (hyper_exp_1 -> epsilon .)
    ,               reduce using rule 57 (hyper_exp_1 -> epsilon .)
    ]               reduce using rule 57 (hyper_exp_1 -> epsilon .)
    ;               reduce using rule 57 (hyper_exp_1 -> epsilon .)
    TO              reduce using rule 57 (hyper_exp_1 -> epsilon .)
    DO              reduce using rule 57 (hyper_exp_1 -> epsilon .)


state 123

    (55) hyper_exp_1 -> & . super_exp
    (58) super_exp -> . exp super_exp_1
    (64) exp -> . term exp_1
    (68) term -> . factor term_1
    (72) factor -> . VAL_INT
    (73) factor -> . VAL_FLOAT
    (74) factor -> . VAL_STRING
    (75) factor -> . variable
    (76) factor -> . ( hyper_exp )
    (5) variable -> . ID variable_1

    VAL_INT         shift and go to state 103
    VAL_FLOAT       shift and go to state 104
    VAL_STRING      shift and go to state 105
    (               shift and go to state 97
    ID              shift and go to state 87

    super_exp                      shift and go to state 154
    term                           shift and go to state 102
    exp                            shift and go to state 100
    factor                         shift and go to state 98
    variable                       shift and go to state 101

state 124

    (76) factor -> ( hyper_exp . )

    )               shift and go to state 155


state 125

    (68) term -> factor term_1 .

    +               reduce using rule 68 (term -> factor term_1 .)
    -               reduce using rule 68 (term -> factor term_1 .)
    <               reduce using rule 68 (term -> factor term_1 .)
    >               reduce using rule 68 (term -> factor term_1 .)
    EQUAL_TO        reduce using rule 68 (term -> factor term_1 .)
    NOT_EQUAL_TO    reduce using rule 68 (term -> factor term_1 .)
    &               reduce using rule 68 (term -> factor term_1 .)
    |               reduce using rule 68 (term -> factor term_1 .)
    TO              reduce using rule 68 (term -> factor term_1 .)
    ,               reduce using rule 68 (term -> factor term_1 .)
    )               reduce using rule 68 (term -> factor term_1 .)
    ]               reduce using rule 68 (term -> factor term_1 .)
    ;               reduce using rule 68 (term -> factor term_1 .)
    DO              reduce using rule 68 (term -> factor term_1 .)


state 126

    (71) term_1 -> epsilon .

    +               reduce using rule 71 (term_1 -> epsilon .)
    -               reduce using rule 71 (term_1 -> epsilon .)
    <               reduce using rule 71 (term_1 -> epsilon .)
    >               reduce using rule 71 (term_1 -> epsilon .)
    EQUAL_TO        reduce using rule 71 (term_1 -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 71 (term_1 -> epsilon .)
    &               reduce using rule 71 (term_1 -> epsilon .)
    |               reduce using rule 71 (term_1 -> epsilon .)
    )               reduce using rule 71 (term_1 -> epsilon .)
    ,               reduce using rule 71 (term_1 -> epsilon .)
    ]               reduce using rule 71 (term_1 -> epsilon .)
    ;               reduce using rule 71 (term_1 -> epsilon .)
    TO              reduce using rule 71 (term_1 -> epsilon .)
    DO              reduce using rule 71 (term_1 -> epsilon .)


state 127

    (69) term_1 -> * . factor
    (72) factor -> . VAL_INT
    (73) factor -> . VAL_FLOAT
    (74) factor -> . VAL_STRING
    (75) factor -> . variable
    (76) factor -> . ( hyper_exp )
    (5) variable -> . ID variable_1

    VAL_INT         shift and go to state 103
    VAL_FLOAT       shift and go to state 104
    VAL_STRING      shift and go to state 105
    (               shift and go to state 97
    ID              shift and go to state 87

    variable                       shift and go to state 101
    factor                         shift and go to state 156

state 128

    (70) term_1 -> / . factor
    (72) factor -> . VAL_INT
    (73) factor -> . VAL_FLOAT
    (74) factor -> . VAL_STRING
    (75) factor -> . variable
    (76) factor -> . ( hyper_exp )
    (5) variable -> . ID variable_1

    VAL_INT         shift and go to state 103
    VAL_FLOAT       shift and go to state 104
    VAL_STRING      shift and go to state 105
    (               shift and go to state 97
    ID              shift and go to state 87

    variable                       shift and go to state 101
    factor                         shift and go to state 157

state 129

    (52) condicional -> WHILE ( hyper_exp ) . DO { loop_estatuto }

    DO              shift and go to state 158


state 130

    (61) super_exp_1 -> EQUAL_TO . exp
    (64) exp -> . term exp_1
    (68) term -> . factor term_1
    (72) factor -> . VAL_INT
    (73) factor -> . VAL_FLOAT
    (74) factor -> . VAL_STRING
    (75) factor -> . variable
    (76) factor -> . ( hyper_exp )
    (5) variable -> . ID variable_1

    VAL_INT         shift and go to state 103
    VAL_FLOAT       shift and go to state 104
    VAL_STRING      shift and go to state 105
    (               shift and go to state 97
    ID              shift and go to state 87

    term                           shift and go to state 102
    exp                            shift and go to state 159
    factor                         shift and go to state 98
    variable                       shift and go to state 101

state 131

    (62) super_exp_1 -> NOT_EQUAL_TO . exp
    (64) exp -> . term exp_1
    (68) term -> . factor term_1
    (72) factor -> . VAL_INT
    (73) factor -> . VAL_FLOAT
    (74) factor -> . VAL_STRING
    (75) factor -> . variable
    (76) factor -> . ( hyper_exp )
    (5) variable -> . ID variable_1

    VAL_INT         shift and go to state 103
    VAL_FLOAT       shift and go to state 104
    VAL_STRING      shift and go to state 105
    (               shift and go to state 97
    ID              shift and go to state 87

    term                           shift and go to state 102
    exp                            shift and go to state 160
    factor                         shift and go to state 98
    variable                       shift and go to state 101

state 132

    (63) super_exp_1 -> epsilon .

    &               reduce using rule 63 (super_exp_1 -> epsilon .)
    |               reduce using rule 63 (super_exp_1 -> epsilon .)
    )               reduce using rule 63 (super_exp_1 -> epsilon .)
    ,               reduce using rule 63 (super_exp_1 -> epsilon .)
    ]               reduce using rule 63 (super_exp_1 -> epsilon .)
    ;               reduce using rule 63 (super_exp_1 -> epsilon .)
    TO              reduce using rule 63 (super_exp_1 -> epsilon .)
    DO              reduce using rule 63 (super_exp_1 -> epsilon .)


state 133

    (58) super_exp -> exp super_exp_1 .

    &               reduce using rule 58 (super_exp -> exp super_exp_1 .)
    |               reduce using rule 58 (super_exp -> exp super_exp_1 .)
    TO              reduce using rule 58 (super_exp -> exp super_exp_1 .)
    ,               reduce using rule 58 (super_exp -> exp super_exp_1 .)
    )               reduce using rule 58 (super_exp -> exp super_exp_1 .)
    ]               reduce using rule 58 (super_exp -> exp super_exp_1 .)
    ;               reduce using rule 58 (super_exp -> exp super_exp_1 .)
    DO              reduce using rule 58 (super_exp -> exp super_exp_1 .)


state 134

    (59) super_exp_1 -> < . exp
    (64) exp -> . term exp_1
    (68) term -> . factor term_1
    (72) factor -> . VAL_INT
    (73) factor -> . VAL_FLOAT
    (74) factor -> . VAL_STRING
    (75) factor -> . variable
    (76) factor -> . ( hyper_exp )
    (5) variable -> . ID variable_1

    VAL_INT         shift and go to state 103
    VAL_FLOAT       shift and go to state 104
    VAL_STRING      shift and go to state 105
    (               shift and go to state 97
    ID              shift and go to state 87

    term                           shift and go to state 102
    exp                            shift and go to state 161
    factor                         shift and go to state 98
    variable                       shift and go to state 101

state 135

    (60) super_exp_1 -> > . exp
    (64) exp -> . term exp_1
    (68) term -> . factor term_1
    (72) factor -> . VAL_INT
    (73) factor -> . VAL_FLOAT
    (74) factor -> . VAL_STRING
    (75) factor -> . variable
    (76) factor -> . ( hyper_exp )
    (5) variable -> . ID variable_1

    VAL_INT         shift and go to state 103
    VAL_FLOAT       shift and go to state 104
    VAL_STRING      shift and go to state 105
    (               shift and go to state 97
    ID              shift and go to state 87

    term                           shift and go to state 102
    exp                            shift and go to state 162
    factor                         shift and go to state 98
    variable                       shift and go to state 101

state 136

    (66) exp_1 -> - . term
    (68) term -> . factor term_1
    (72) factor -> . VAL_INT
    (73) factor -> . VAL_FLOAT
    (74) factor -> . VAL_STRING
    (75) factor -> . variable
    (76) factor -> . ( hyper_exp )
    (5) variable -> . ID variable_1

    VAL_INT         shift and go to state 103
    VAL_FLOAT       shift and go to state 104
    VAL_STRING      shift and go to state 105
    (               shift and go to state 97
    ID              shift and go to state 87

    term                           shift and go to state 163
    factor                         shift and go to state 98
    variable                       shift and go to state 101

state 137

    (64) exp -> term exp_1 .

    <               reduce using rule 64 (exp -> term exp_1 .)
    >               reduce using rule 64 (exp -> term exp_1 .)
    EQUAL_TO        reduce using rule 64 (exp -> term exp_1 .)
    NOT_EQUAL_TO    reduce using rule 64 (exp -> term exp_1 .)
    &               reduce using rule 64 (exp -> term exp_1 .)
    |               reduce using rule 64 (exp -> term exp_1 .)
    ;               reduce using rule 64 (exp -> term exp_1 .)
    )               reduce using rule 64 (exp -> term exp_1 .)
    ,               reduce using rule 64 (exp -> term exp_1 .)
    ]               reduce using rule 64 (exp -> term exp_1 .)
    TO              reduce using rule 64 (exp -> term exp_1 .)
    DO              reduce using rule 64 (exp -> term exp_1 .)


state 138

    (65) exp_1 -> + . term
    (68) term -> . factor term_1
    (72) factor -> . VAL_INT
    (73) factor -> . VAL_FLOAT
    (74) factor -> . VAL_STRING
    (75) factor -> . variable
    (76) factor -> . ( hyper_exp )
    (5) variable -> . ID variable_1

    VAL_INT         shift and go to state 103
    VAL_FLOAT       shift and go to state 104
    VAL_STRING      shift and go to state 105
    (               shift and go to state 97
    ID              shift and go to state 87

    term                           shift and go to state 164
    factor                         shift and go to state 98
    variable                       shift and go to state 101

state 139

    (67) exp_1 -> epsilon .

    <               reduce using rule 67 (exp_1 -> epsilon .)
    >               reduce using rule 67 (exp_1 -> epsilon .)
    EQUAL_TO        reduce using rule 67 (exp_1 -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 67 (exp_1 -> epsilon .)
    &               reduce using rule 67 (exp_1 -> epsilon .)
    |               reduce using rule 67 (exp_1 -> epsilon .)
    )               reduce using rule 67 (exp_1 -> epsilon .)
    ,               reduce using rule 67 (exp_1 -> epsilon .)
    ]               reduce using rule 67 (exp_1 -> epsilon .)
    ;               reduce using rule 67 (exp_1 -> epsilon .)
    TO              reduce using rule 67 (exp_1 -> epsilon .)
    DO              reduce using rule 67 (exp_1 -> epsilon .)


state 140

    (39) hyper_exp_loop_1 -> epsilon .

    )               reduce using rule 39 (hyper_exp_loop_1 -> epsilon .)


state 141

    (38) hyper_exp_loop_1 -> , . hyper_exp hyper_exp_loop_1
    (54) hyper_exp -> . super_exp hyper_exp_1
    (58) super_exp -> . exp super_exp_1
    (64) exp -> . term exp_1
    (68) term -> . factor term_1
    (72) factor -> . VAL_INT
    (73) factor -> . VAL_FLOAT
    (74) factor -> . VAL_STRING
    (75) factor -> . variable
    (76) factor -> . ( hyper_exp )
    (5) variable -> . ID variable_1

    VAL_INT         shift and go to state 103
    VAL_FLOAT       shift and go to state 104
    VAL_STRING      shift and go to state 105
    (               shift and go to state 97
    ID              shift and go to state 87

    super_exp                      shift and go to state 96
    term                           shift and go to state 102
    hyper_exp                      shift and go to state 165
    exp                            shift and go to state 100
    factor                         shift and go to state 98
    variable                       shift and go to state 101

state 142

    (37) hyper_exp_loop -> hyper_exp hyper_exp_loop_1 .

    )               reduce using rule 37 (hyper_exp_loop -> hyper_exp hyper_exp_loop_1 .)


state 143

    (36) func_llamada -> ID ( hyper_exp_loop ) .

    ;               reduce using rule 36 (func_llamada -> ID ( hyper_exp_loop ) .)


state 144

    (6) variable_1 -> [ hyper_exp ] .

    =               reduce using rule 6 (variable_1 -> [ hyper_exp ] .)
    ,               reduce using rule 6 (variable_1 -> [ hyper_exp ] .)
    )               reduce using rule 6 (variable_1 -> [ hyper_exp ] .)
    *               reduce using rule 6 (variable_1 -> [ hyper_exp ] .)
    /               reduce using rule 6 (variable_1 -> [ hyper_exp ] .)
    +               reduce using rule 6 (variable_1 -> [ hyper_exp ] .)
    -               reduce using rule 6 (variable_1 -> [ hyper_exp ] .)
    <               reduce using rule 6 (variable_1 -> [ hyper_exp ] .)
    >               reduce using rule 6 (variable_1 -> [ hyper_exp ] .)
    EQUAL_TO        reduce using rule 6 (variable_1 -> [ hyper_exp ] .)
    NOT_EQUAL_TO    reduce using rule 6 (variable_1 -> [ hyper_exp ] .)
    &               reduce using rule 6 (variable_1 -> [ hyper_exp ] .)
    |               reduce using rule 6 (variable_1 -> [ hyper_exp ] .)
    ]               reduce using rule 6 (variable_1 -> [ hyper_exp ] .)
    ;               reduce using rule 6 (variable_1 -> [ hyper_exp ] .)
    TO              reduce using rule 6 (variable_1 -> [ hyper_exp ] .)
    DO              reduce using rule 6 (variable_1 -> [ hyper_exp ] .)


state 145

    (53) no_condicional -> FOR variable = hyper_exp . TO hyper_exp DO { loop_estatuto }

    TO              shift and go to state 166


state 146

    (44) write -> WRITE ( hyper_exp_loop ) . ;

    ;               shift and go to state 167


state 147

    (34) asignacion -> variable = hyper_exp ; .

    ID              reduce using rule 34 (asignacion -> variable = hyper_exp ; .)
    READ            reduce using rule 34 (asignacion -> variable = hyper_exp ; .)
    WRITE           reduce using rule 34 (asignacion -> variable = hyper_exp ; .)
    IF              reduce using rule 34 (asignacion -> variable = hyper_exp ; .)
    WHILE           reduce using rule 34 (asignacion -> variable = hyper_exp ; .)
    FOR             reduce using rule 34 (asignacion -> variable = hyper_exp ; .)
    }               reduce using rule 34 (asignacion -> variable = hyper_exp ; .)


state 148

    (45) decision -> IF ( hyper_exp ) . THEN { loop_estatuto } decision_1

    THEN            shift and go to state 168


state 149

    (19) loop_parametro -> , tipo ID loop_parametro .

    INT             reduce using rule 19 (loop_parametro -> , tipo ID loop_parametro .)
    FLOAT           reduce using rule 19 (loop_parametro -> , tipo ID loop_parametro .)
    )               reduce using rule 19 (loop_parametro -> , tipo ID loop_parametro .)


state 150

    (13) func_definicion -> FUNCTION func_tipo_retorno ID ( func_parametro ) ; var_opcional { loop_estatuto . }

    }               shift and go to state 169


state 151

    (42) variable_loop_1 -> , variable . variable_loop_1
    (42) variable_loop_1 -> . , variable variable_loop_1
    (43) variable_loop_1 -> . epsilon
    (77) epsilon -> .

    ,               shift and go to state 118
    )               reduce using rule 77 (epsilon -> .)

    epsilon                        shift and go to state 116
    variable_loop_1                shift and go to state 170

state 152

    (40) read -> READ ( variable_loop ) ; .

    ID              reduce using rule 40 (read -> READ ( variable_loop ) ; .)
    READ            reduce using rule 40 (read -> READ ( variable_loop ) ; .)
    WRITE           reduce using rule 40 (read -> READ ( variable_loop ) ; .)
    IF              reduce using rule 40 (read -> READ ( variable_loop ) ; .)
    WHILE           reduce using rule 40 (read -> READ ( variable_loop ) ; .)
    FOR             reduce using rule 40 (read -> READ ( variable_loop ) ; .)
    }               reduce using rule 40 (read -> READ ( variable_loop ) ; .)


state 153

    (56) hyper_exp_1 -> | super_exp .

    )               reduce using rule 56 (hyper_exp_1 -> | super_exp .)
    ,               reduce using rule 56 (hyper_exp_1 -> | super_exp .)
    ]               reduce using rule 56 (hyper_exp_1 -> | super_exp .)
    ;               reduce using rule 56 (hyper_exp_1 -> | super_exp .)
    TO              reduce using rule 56 (hyper_exp_1 -> | super_exp .)
    DO              reduce using rule 56 (hyper_exp_1 -> | super_exp .)


state 154

    (55) hyper_exp_1 -> & super_exp .

    )               reduce using rule 55 (hyper_exp_1 -> & super_exp .)
    ,               reduce using rule 55 (hyper_exp_1 -> & super_exp .)
    ]               reduce using rule 55 (hyper_exp_1 -> & super_exp .)
    ;               reduce using rule 55 (hyper_exp_1 -> & super_exp .)
    TO              reduce using rule 55 (hyper_exp_1 -> & super_exp .)
    DO              reduce using rule 55 (hyper_exp_1 -> & super_exp .)


state 155

    (76) factor -> ( hyper_exp ) .

    *               reduce using rule 76 (factor -> ( hyper_exp ) .)
    /               reduce using rule 76 (factor -> ( hyper_exp ) .)
    +               reduce using rule 76 (factor -> ( hyper_exp ) .)
    -               reduce using rule 76 (factor -> ( hyper_exp ) .)
    <               reduce using rule 76 (factor -> ( hyper_exp ) .)
    >               reduce using rule 76 (factor -> ( hyper_exp ) .)
    EQUAL_TO        reduce using rule 76 (factor -> ( hyper_exp ) .)
    NOT_EQUAL_TO    reduce using rule 76 (factor -> ( hyper_exp ) .)
    )               reduce using rule 76 (factor -> ( hyper_exp ) .)
    ,               reduce using rule 76 (factor -> ( hyper_exp ) .)
    ]               reduce using rule 76 (factor -> ( hyper_exp ) .)
    ;               reduce using rule 76 (factor -> ( hyper_exp ) .)
    TO              reduce using rule 76 (factor -> ( hyper_exp ) .)
    DO              reduce using rule 76 (factor -> ( hyper_exp ) .)
    &               reduce using rule 76 (factor -> ( hyper_exp ) .)
    |               reduce using rule 76 (factor -> ( hyper_exp ) .)


state 156

    (69) term_1 -> * factor .

    +               reduce using rule 69 (term_1 -> * factor .)
    -               reduce using rule 69 (term_1 -> * factor .)
    <               reduce using rule 69 (term_1 -> * factor .)
    >               reduce using rule 69 (term_1 -> * factor .)
    EQUAL_TO        reduce using rule 69 (term_1 -> * factor .)
    NOT_EQUAL_TO    reduce using rule 69 (term_1 -> * factor .)
    &               reduce using rule 69 (term_1 -> * factor .)
    |               reduce using rule 69 (term_1 -> * factor .)
    )               reduce using rule 69 (term_1 -> * factor .)
    ,               reduce using rule 69 (term_1 -> * factor .)
    ]               reduce using rule 69 (term_1 -> * factor .)
    ;               reduce using rule 69 (term_1 -> * factor .)
    TO              reduce using rule 69 (term_1 -> * factor .)
    DO              reduce using rule 69 (term_1 -> * factor .)


state 157

    (70) term_1 -> / factor .

    +               reduce using rule 70 (term_1 -> / factor .)
    -               reduce using rule 70 (term_1 -> / factor .)
    <               reduce using rule 70 (term_1 -> / factor .)
    >               reduce using rule 70 (term_1 -> / factor .)
    EQUAL_TO        reduce using rule 70 (term_1 -> / factor .)
    NOT_EQUAL_TO    reduce using rule 70 (term_1 -> / factor .)
    &               reduce using rule 70 (term_1 -> / factor .)
    |               reduce using rule 70 (term_1 -> / factor .)
    )               reduce using rule 70 (term_1 -> / factor .)
    ,               reduce using rule 70 (term_1 -> / factor .)
    ]               reduce using rule 70 (term_1 -> / factor .)
    ;               reduce using rule 70 (term_1 -> / factor .)
    TO              reduce using rule 70 (term_1 -> / factor .)
    DO              reduce using rule 70 (term_1 -> / factor .)


state 158

    (52) condicional -> WHILE ( hyper_exp ) DO . { loop_estatuto }

    {               shift and go to state 171


state 159

    (61) super_exp_1 -> EQUAL_TO exp .

    &               reduce using rule 61 (super_exp_1 -> EQUAL_TO exp .)
    |               reduce using rule 61 (super_exp_1 -> EQUAL_TO exp .)
    )               reduce using rule 61 (super_exp_1 -> EQUAL_TO exp .)
    ,               reduce using rule 61 (super_exp_1 -> EQUAL_TO exp .)
    ]               reduce using rule 61 (super_exp_1 -> EQUAL_TO exp .)
    ;               reduce using rule 61 (super_exp_1 -> EQUAL_TO exp .)
    TO              reduce using rule 61 (super_exp_1 -> EQUAL_TO exp .)
    DO              reduce using rule 61 (super_exp_1 -> EQUAL_TO exp .)


state 160

    (62) super_exp_1 -> NOT_EQUAL_TO exp .

    &               reduce using rule 62 (super_exp_1 -> NOT_EQUAL_TO exp .)
    |               reduce using rule 62 (super_exp_1 -> NOT_EQUAL_TO exp .)
    )               reduce using rule 62 (super_exp_1 -> NOT_EQUAL_TO exp .)
    ,               reduce using rule 62 (super_exp_1 -> NOT_EQUAL_TO exp .)
    ]               reduce using rule 62 (super_exp_1 -> NOT_EQUAL_TO exp .)
    ;               reduce using rule 62 (super_exp_1 -> NOT_EQUAL_TO exp .)
    TO              reduce using rule 62 (super_exp_1 -> NOT_EQUAL_TO exp .)
    DO              reduce using rule 62 (super_exp_1 -> NOT_EQUAL_TO exp .)


state 161

    (59) super_exp_1 -> < exp .

    &               reduce using rule 59 (super_exp_1 -> < exp .)
    |               reduce using rule 59 (super_exp_1 -> < exp .)
    )               reduce using rule 59 (super_exp_1 -> < exp .)
    ,               reduce using rule 59 (super_exp_1 -> < exp .)
    ]               reduce using rule 59 (super_exp_1 -> < exp .)
    ;               reduce using rule 59 (super_exp_1 -> < exp .)
    TO              reduce using rule 59 (super_exp_1 -> < exp .)
    DO              reduce using rule 59 (super_exp_1 -> < exp .)


state 162

    (60) super_exp_1 -> > exp .

    &               reduce using rule 60 (super_exp_1 -> > exp .)
    |               reduce using rule 60 (super_exp_1 -> > exp .)
    )               reduce using rule 60 (super_exp_1 -> > exp .)
    ,               reduce using rule 60 (super_exp_1 -> > exp .)
    ]               reduce using rule 60 (super_exp_1 -> > exp .)
    ;               reduce using rule 60 (super_exp_1 -> > exp .)
    TO              reduce using rule 60 (super_exp_1 -> > exp .)
    DO              reduce using rule 60 (super_exp_1 -> > exp .)


state 163

    (66) exp_1 -> - term .

    <               reduce using rule 66 (exp_1 -> - term .)
    >               reduce using rule 66 (exp_1 -> - term .)
    EQUAL_TO        reduce using rule 66 (exp_1 -> - term .)
    NOT_EQUAL_TO    reduce using rule 66 (exp_1 -> - term .)
    &               reduce using rule 66 (exp_1 -> - term .)
    |               reduce using rule 66 (exp_1 -> - term .)
    )               reduce using rule 66 (exp_1 -> - term .)
    ,               reduce using rule 66 (exp_1 -> - term .)
    ]               reduce using rule 66 (exp_1 -> - term .)
    ;               reduce using rule 66 (exp_1 -> - term .)
    TO              reduce using rule 66 (exp_1 -> - term .)
    DO              reduce using rule 66 (exp_1 -> - term .)


state 164

    (65) exp_1 -> + term .

    <               reduce using rule 65 (exp_1 -> + term .)
    >               reduce using rule 65 (exp_1 -> + term .)
    EQUAL_TO        reduce using rule 65 (exp_1 -> + term .)
    NOT_EQUAL_TO    reduce using rule 65 (exp_1 -> + term .)
    &               reduce using rule 65 (exp_1 -> + term .)
    |               reduce using rule 65 (exp_1 -> + term .)
    )               reduce using rule 65 (exp_1 -> + term .)
    ,               reduce using rule 65 (exp_1 -> + term .)
    ]               reduce using rule 65 (exp_1 -> + term .)
    ;               reduce using rule 65 (exp_1 -> + term .)
    TO              reduce using rule 65 (exp_1 -> + term .)
    DO              reduce using rule 65 (exp_1 -> + term .)


state 165

    (38) hyper_exp_loop_1 -> , hyper_exp . hyper_exp_loop_1
    (38) hyper_exp_loop_1 -> . , hyper_exp hyper_exp_loop_1
    (39) hyper_exp_loop_1 -> . epsilon
    (77) epsilon -> .

    ,               shift and go to state 141
    )               reduce using rule 77 (epsilon -> .)

    epsilon                        shift and go to state 140
    hyper_exp_loop_1               shift and go to state 172

state 166

    (53) no_condicional -> FOR variable = hyper_exp TO . hyper_exp DO { loop_estatuto }
    (54) hyper_exp -> . super_exp hyper_exp_1
    (58) super_exp -> . exp super_exp_1
    (64) exp -> . term exp_1
    (68) term -> . factor term_1
    (72) factor -> . VAL_INT
    (73) factor -> . VAL_FLOAT
    (74) factor -> . VAL_STRING
    (75) factor -> . variable
    (76) factor -> . ( hyper_exp )
    (5) variable -> . ID variable_1

    VAL_INT         shift and go to state 103
    VAL_FLOAT       shift and go to state 104
    VAL_STRING      shift and go to state 105
    (               shift and go to state 97
    ID              shift and go to state 87

    super_exp                      shift and go to state 96
    term                           shift and go to state 102
    hyper_exp                      shift and go to state 173
    exp                            shift and go to state 100
    factor                         shift and go to state 98
    variable                       shift and go to state 101

state 167

    (44) write -> WRITE ( hyper_exp_loop ) ; .

    ID              reduce using rule 44 (write -> WRITE ( hyper_exp_loop ) ; .)
    READ            reduce using rule 44 (write -> WRITE ( hyper_exp_loop ) ; .)
    WRITE           reduce using rule 44 (write -> WRITE ( hyper_exp_loop ) ; .)
    IF              reduce using rule 44 (write -> WRITE ( hyper_exp_loop ) ; .)
    WHILE           reduce using rule 44 (write -> WRITE ( hyper_exp_loop ) ; .)
    FOR             reduce using rule 44 (write -> WRITE ( hyper_exp_loop ) ; .)
    }               reduce using rule 44 (write -> WRITE ( hyper_exp_loop ) ; .)


state 168

    (45) decision -> IF ( hyper_exp ) THEN . { loop_estatuto } decision_1

    {               shift and go to state 174


state 169

    (13) func_definicion -> FUNCTION func_tipo_retorno ID ( func_parametro ) ; var_opcional { loop_estatuto } .

    FUNCTION        reduce using rule 13 (func_definicion -> FUNCTION func_tipo_retorno ID ( func_parametro ) ; var_opcional { loop_estatuto } .)
    MAIN            reduce using rule 13 (func_definicion -> FUNCTION func_tipo_retorno ID ( func_parametro ) ; var_opcional { loop_estatuto } .)


state 170

    (42) variable_loop_1 -> , variable variable_loop_1 .

    )               reduce using rule 42 (variable_loop_1 -> , variable variable_loop_1 .)


state 171

    (52) condicional -> WHILE ( hyper_exp ) DO { . loop_estatuto }
    (48) loop_estatuto -> . estatuto loop_estatuto
    (49) loop_estatuto -> . epsilon
    (28) estatuto -> . asignacion
    (29) estatuto -> . func_llamada ;
    (30) estatuto -> . read
    (31) estatuto -> . write
    (32) estatuto -> . decision
    (33) estatuto -> . repeticion
    (77) epsilon -> .
    (34) asignacion -> . variable = hyper_exp ;
    (35) func_llamada -> . ID ( )
    (36) func_llamada -> . ID ( hyper_exp_loop )
    (40) read -> . READ ( variable_loop ) ;
    (44) write -> . WRITE ( hyper_exp_loop ) ;
    (45) decision -> . IF ( hyper_exp ) THEN { loop_estatuto } decision_1
    (50) repeticion -> . condicional
    (51) repeticion -> . no_condicional
    (5) variable -> . ID variable_1
    (52) condicional -> . WHILE ( hyper_exp ) DO { loop_estatuto }
    (53) no_condicional -> . FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto }

    }               reduce using rule 77 (epsilon -> .)
    ID              shift and go to state 59
    READ            shift and go to state 53
    WRITE           shift and go to state 66
    IF              shift and go to state 68
    WHILE           shift and go to state 54
    FOR             shift and go to state 62

    asignacion                     shift and go to state 69
    read                           shift and go to state 63
    epsilon                        shift and go to state 64
    decision                       shift and go to state 57
    estatuto                       shift and go to state 58
    write                          shift and go to state 60
    variable                       shift and go to state 67
    func_llamada                   shift and go to state 55
    repeticion                     shift and go to state 70
    loop_estatuto                  shift and go to state 175
    condicional                    shift and go to state 65
    no_condicional                 shift and go to state 61

state 172

    (38) hyper_exp_loop_1 -> , hyper_exp hyper_exp_loop_1 .

    )               reduce using rule 38 (hyper_exp_loop_1 -> , hyper_exp hyper_exp_loop_1 .)


state 173

    (53) no_condicional -> FOR variable = hyper_exp TO hyper_exp . DO { loop_estatuto }

    DO              shift and go to state 176


state 174

    (45) decision -> IF ( hyper_exp ) THEN { . loop_estatuto } decision_1
    (48) loop_estatuto -> . estatuto loop_estatuto
    (49) loop_estatuto -> . epsilon
    (28) estatuto -> . asignacion
    (29) estatuto -> . func_llamada ;
    (30) estatuto -> . read
    (31) estatuto -> . write
    (32) estatuto -> . decision
    (33) estatuto -> . repeticion
    (77) epsilon -> .
    (34) asignacion -> . variable = hyper_exp ;
    (35) func_llamada -> . ID ( )
    (36) func_llamada -> . ID ( hyper_exp_loop )
    (40) read -> . READ ( variable_loop ) ;
    (44) write -> . WRITE ( hyper_exp_loop ) ;
    (45) decision -> . IF ( hyper_exp ) THEN { loop_estatuto } decision_1
    (50) repeticion -> . condicional
    (51) repeticion -> . no_condicional
    (5) variable -> . ID variable_1
    (52) condicional -> . WHILE ( hyper_exp ) DO { loop_estatuto }
    (53) no_condicional -> . FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto }

    }               reduce using rule 77 (epsilon -> .)
    ID              shift and go to state 59
    READ            shift and go to state 53
    WRITE           shift and go to state 66
    IF              shift and go to state 68
    WHILE           shift and go to state 54
    FOR             shift and go to state 62

    write                          shift and go to state 60
    asignacion                     shift and go to state 69
    read                           shift and go to state 63
    epsilon                        shift and go to state 64
    decision                       shift and go to state 57
    estatuto                       shift and go to state 58
    variable                       shift and go to state 67
    func_llamada                   shift and go to state 55
    repeticion                     shift and go to state 70
    loop_estatuto                  shift and go to state 177
    condicional                    shift and go to state 65
    no_condicional                 shift and go to state 61

state 175

    (52) condicional -> WHILE ( hyper_exp ) DO { loop_estatuto . }

    }               shift and go to state 178


state 176

    (53) no_condicional -> FOR variable = hyper_exp TO hyper_exp DO . { loop_estatuto }

    {               shift and go to state 179


state 177

    (45) decision -> IF ( hyper_exp ) THEN { loop_estatuto . } decision_1

    }               shift and go to state 180


state 178

    (52) condicional -> WHILE ( hyper_exp ) DO { loop_estatuto } .

    ID              reduce using rule 52 (condicional -> WHILE ( hyper_exp ) DO { loop_estatuto } .)
    READ            reduce using rule 52 (condicional -> WHILE ( hyper_exp ) DO { loop_estatuto } .)
    WRITE           reduce using rule 52 (condicional -> WHILE ( hyper_exp ) DO { loop_estatuto } .)
    IF              reduce using rule 52 (condicional -> WHILE ( hyper_exp ) DO { loop_estatuto } .)
    WHILE           reduce using rule 52 (condicional -> WHILE ( hyper_exp ) DO { loop_estatuto } .)
    FOR             reduce using rule 52 (condicional -> WHILE ( hyper_exp ) DO { loop_estatuto } .)
    }               reduce using rule 52 (condicional -> WHILE ( hyper_exp ) DO { loop_estatuto } .)


state 179

    (53) no_condicional -> FOR variable = hyper_exp TO hyper_exp DO { . loop_estatuto }
    (48) loop_estatuto -> . estatuto loop_estatuto
    (49) loop_estatuto -> . epsilon
    (28) estatuto -> . asignacion
    (29) estatuto -> . func_llamada ;
    (30) estatuto -> . read
    (31) estatuto -> . write
    (32) estatuto -> . decision
    (33) estatuto -> . repeticion
    (77) epsilon -> .
    (34) asignacion -> . variable = hyper_exp ;
    (35) func_llamada -> . ID ( )
    (36) func_llamada -> . ID ( hyper_exp_loop )
    (40) read -> . READ ( variable_loop ) ;
    (44) write -> . WRITE ( hyper_exp_loop ) ;
    (45) decision -> . IF ( hyper_exp ) THEN { loop_estatuto } decision_1
    (50) repeticion -> . condicional
    (51) repeticion -> . no_condicional
    (5) variable -> . ID variable_1
    (52) condicional -> . WHILE ( hyper_exp ) DO { loop_estatuto }
    (53) no_condicional -> . FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto }

    }               reduce using rule 77 (epsilon -> .)
    ID              shift and go to state 59
    READ            shift and go to state 53
    WRITE           shift and go to state 66
    IF              shift and go to state 68
    WHILE           shift and go to state 54
    FOR             shift and go to state 62

    asignacion                     shift and go to state 69
    read                           shift and go to state 63
    epsilon                        shift and go to state 64
    decision                       shift and go to state 57
    estatuto                       shift and go to state 58
    write                          shift and go to state 60
    variable                       shift and go to state 67
    func_llamada                   shift and go to state 55
    repeticion                     shift and go to state 70
    loop_estatuto                  shift and go to state 181
    condicional                    shift and go to state 65
    no_condicional                 shift and go to state 61

state 180

    (45) decision -> IF ( hyper_exp ) THEN { loop_estatuto } . decision_1
    (46) decision_1 -> . ELSE { loop_estatuto }
    (47) decision_1 -> . epsilon
    (77) epsilon -> .

    ELSE            shift and go to state 182
    ID              reduce using rule 77 (epsilon -> .)
    READ            reduce using rule 77 (epsilon -> .)
    WRITE           reduce using rule 77 (epsilon -> .)
    IF              reduce using rule 77 (epsilon -> .)
    WHILE           reduce using rule 77 (epsilon -> .)
    FOR             reduce using rule 77 (epsilon -> .)
    }               reduce using rule 77 (epsilon -> .)

    decision_1                     shift and go to state 183
    epsilon                        shift and go to state 184

state 181

    (53) no_condicional -> FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto . }

    }               shift and go to state 185


state 182

    (46) decision_1 -> ELSE . { loop_estatuto }

    {               shift and go to state 186


state 183

    (45) decision -> IF ( hyper_exp ) THEN { loop_estatuto } decision_1 .

    ID              reduce using rule 45 (decision -> IF ( hyper_exp ) THEN { loop_estatuto } decision_1 .)
    READ            reduce using rule 45 (decision -> IF ( hyper_exp ) THEN { loop_estatuto } decision_1 .)
    WRITE           reduce using rule 45 (decision -> IF ( hyper_exp ) THEN { loop_estatuto } decision_1 .)
    IF              reduce using rule 45 (decision -> IF ( hyper_exp ) THEN { loop_estatuto } decision_1 .)
    WHILE           reduce using rule 45 (decision -> IF ( hyper_exp ) THEN { loop_estatuto } decision_1 .)
    FOR             reduce using rule 45 (decision -> IF ( hyper_exp ) THEN { loop_estatuto } decision_1 .)
    }               reduce using rule 45 (decision -> IF ( hyper_exp ) THEN { loop_estatuto } decision_1 .)


state 184

    (47) decision_1 -> epsilon .

    ID              reduce using rule 47 (decision_1 -> epsilon .)
    READ            reduce using rule 47 (decision_1 -> epsilon .)
    WRITE           reduce using rule 47 (decision_1 -> epsilon .)
    IF              reduce using rule 47 (decision_1 -> epsilon .)
    WHILE           reduce using rule 47 (decision_1 -> epsilon .)
    FOR             reduce using rule 47 (decision_1 -> epsilon .)
    }               reduce using rule 47 (decision_1 -> epsilon .)


state 185

    (53) no_condicional -> FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto } .

    ID              reduce using rule 53 (no_condicional -> FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto } .)
    READ            reduce using rule 53 (no_condicional -> FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto } .)
    WRITE           reduce using rule 53 (no_condicional -> FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto } .)
    IF              reduce using rule 53 (no_condicional -> FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto } .)
    WHILE           reduce using rule 53 (no_condicional -> FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto } .)
    FOR             reduce using rule 53 (no_condicional -> FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto } .)
    }               reduce using rule 53 (no_condicional -> FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto } .)


state 186

    (46) decision_1 -> ELSE { . loop_estatuto }
    (48) loop_estatuto -> . estatuto loop_estatuto
    (49) loop_estatuto -> . epsilon
    (28) estatuto -> . asignacion
    (29) estatuto -> . func_llamada ;
    (30) estatuto -> . read
    (31) estatuto -> . write
    (32) estatuto -> . decision
    (33) estatuto -> . repeticion
    (77) epsilon -> .
    (34) asignacion -> . variable = hyper_exp ;
    (35) func_llamada -> . ID ( )
    (36) func_llamada -> . ID ( hyper_exp_loop )
    (40) read -> . READ ( variable_loop ) ;
    (44) write -> . WRITE ( hyper_exp_loop ) ;
    (45) decision -> . IF ( hyper_exp ) THEN { loop_estatuto } decision_1
    (50) repeticion -> . condicional
    (51) repeticion -> . no_condicional
    (5) variable -> . ID variable_1
    (52) condicional -> . WHILE ( hyper_exp ) DO { loop_estatuto }
    (53) no_condicional -> . FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto }

    }               reduce using rule 77 (epsilon -> .)
    ID              shift and go to state 59
    READ            shift and go to state 53
    WRITE           shift and go to state 66
    IF              shift and go to state 68
    WHILE           shift and go to state 54
    FOR             shift and go to state 62

    asignacion                     shift and go to state 69
    read                           shift and go to state 63
    epsilon                        shift and go to state 64
    decision                       shift and go to state 57
    estatuto                       shift and go to state 58
    write                          shift and go to state 60
    variable                       shift and go to state 67
    func_llamada                   shift and go to state 55
    repeticion                     shift and go to state 70
    loop_estatuto                  shift and go to state 187
    condicional                    shift and go to state 65
    no_condicional                 shift and go to state 61

state 187

    (46) decision_1 -> ELSE { loop_estatuto . }

    }               shift and go to state 188


state 188

    (46) decision_1 -> ELSE { loop_estatuto } .

    ID              reduce using rule 46 (decision_1 -> ELSE { loop_estatuto } .)
    READ            reduce using rule 46 (decision_1 -> ELSE { loop_estatuto } .)
    WRITE           reduce using rule 46 (decision_1 -> ELSE { loop_estatuto } .)
    IF              reduce using rule 46 (decision_1 -> ELSE { loop_estatuto } .)
    WHILE           reduce using rule 46 (decision_1 -> ELSE { loop_estatuto } .)
    FOR             reduce using rule 46 (decision_1 -> ELSE { loop_estatuto } .)
    }               reduce using rule 46 (decision_1 -> ELSE { loop_estatuto } .)

