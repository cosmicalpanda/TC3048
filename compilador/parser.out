Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    PRINT
    STRING
    VAL_STRING

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main
Rule 2     np_program_start -> epsilon
Rule 3     np_start_dirfunc -> epsilon
Rule 4     main -> MAIN np_prep_main ( ) { loop_estatuto } np_fin_total
Rule 5     np_prep_main -> epsilon
Rule 6     np_fin_total -> epsilon
Rule 7     var_opcional -> var_declaracion
Rule 8     var_opcional -> epsilon
Rule 9     variable -> ID np_single_var_process
Rule 10    variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
Rule 11    var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion
Rule 12    np_var_prep -> epsilon
Rule 13    loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion
Rule 14    loop_var_declaracion -> epsilon
Rule 15    var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ;
Rule 16    array_opcional -> [ VAL_INT np_push_const_int ]
Rule 17    array_opcional -> epsilon
Rule 18    loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo
Rule 19    loop_var_decl_mismo_tipo -> epsilon
Rule 20    np_set_curr_var_type -> epsilon
Rule 21    np_set_curr_var_name -> epsilon
Rule 22    np_add_var_to_varstable -> epsilon
Rule 23    func_programa_loop -> func_definicion func_programa_loop
Rule 24    func_programa_loop -> epsilon
Rule 25    func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
Rule 26    func_tipo_retorno -> tipo
Rule 27    func_tipo_retorno -> VOID
Rule 28    np_func_tipo_retorno -> epsilon
Rule 29    np_func_id -> epsilon
Rule 30    np_add_to_func_dir -> epsilon
Rule 31    np_save_curr_func_quad -> epsilon
Rule 32    np_kill_func -> epsilon
Rule 33    np_prep_func_params -> epsilon
Rule 34    func_parametro -> parametro
Rule 35    func_parametro -> epsilon
Rule 36    parametro -> tipo ID np_add_param loop_parametro
Rule 37    loop_parametro -> , tipo ID np_add_param loop_parametro
Rule 38    loop_parametro -> epsilon
Rule 39    np_add_param -> epsilon
Rule 40    tipo -> INT
Rule 41    tipo -> FLOAT
Rule 42    tipo -> CHAR
Rule 43    tipo -> BOOL
Rule 44    estatuto -> asignacion
Rule 45    estatuto -> func_llamada ;
Rule 46    estatuto -> read
Rule 47    estatuto -> write
Rule 48    estatuto -> decision
Rule 49    estatuto -> repeticion
Rule 50    estatuto -> func_return
Rule 51    asignacion -> variable = hyper_exp ;
Rule 52    func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
Rule 53    np_fc_1 -> epsilon
Rule 54    argumento_loop -> hyper_exp np_fc_2 argumento_loop_1
Rule 55    argumento_loop -> epsilon
Rule 56    argumento_loop_1 -> , hyper_exp np_fc_2 argumento_loop_1
Rule 57    argumento_loop_1 -> epsilon
Rule 58    hyper_exp_loop -> hyper_exp np_add_to_input_counter hyper_exp_loop_1
Rule 59    hyper_exp_loop_1 -> , hyper_exp np_add_to_input_counter hyper_exp_loop_1
Rule 60    hyper_exp_loop_1 -> epsilon
Rule 61    np_fc_2 -> epsilon
Rule 62    func_return -> RETURN ( hyper_exp ) ;
Rule 63    read -> READ ( variable_loop ) ;
Rule 64    variable_loop -> variable np_add_to_input_counter variable_loop_1
Rule 65    variable_loop_1 -> , variable np_add_to_input_counter variable_loop_1
Rule 66    variable_loop_1 -> epsilon
Rule 67    np_add_to_input_counter -> epsilon
Rule 68    write -> WRITE ( hyper_exp_loop ) ;
Rule 69    decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
Rule 70    decision_else -> ELSE np_decision_2 { loop_estatuto }
Rule 71    decision_else -> epsilon
Rule 72    np_decision_1 -> epsilon
Rule 73    np_decision_2 -> epsilon
Rule 74    loop_estatuto -> estatuto loop_estatuto
Rule 75    loop_estatuto -> epsilon
Rule 76    repeticion -> condicional
Rule 77    repeticion -> no_condicional
Rule 78    condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
Rule 79    np_cond_1 -> epsilon
Rule 80    np_cond_2 -> epsilon
Rule 81    np_cond_3 -> epsilon
Rule 82    no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }
Rule 83    np_for_1 -> epsilon
Rule 84    np_for_2 -> epsilon
Rule 85    np_for_3 -> epsilon
Rule 86    hyper_exp -> super_exp hyper_exp_1
Rule 87    hyper_exp_1 -> & np_push_operator_stack super_exp
Rule 88    hyper_exp_1 -> | np_push_operator_stack super_exp
Rule 89    hyper_exp_1 -> epsilon
Rule 90    super_exp -> exp super_exp_1
Rule 91    super_exp_1 -> < np_push_operator_stack exp
Rule 92    super_exp_1 -> > np_push_operator_stack exp
Rule 93    super_exp_1 -> EQUAL_TO np_push_operator_stack exp
Rule 94    super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp
Rule 95    super_exp_1 -> epsilon
Rule 96    exp -> term exp_1
Rule 97    exp_1 -> + np_push_operator_stack term
Rule 98    exp_1 -> - np_push_operator_stack term
Rule 99    exp_1 -> epsilon
Rule 100   term -> factor term_1
Rule 101   term_1 -> * np_push_operator_stack factor
Rule 102   term_1 -> / np_push_operator_stack factor
Rule 103   term_1 -> epsilon
Rule 104   np_push_operator_stack -> epsilon
Rule 105   np_pop_operator_stack -> epsilon
Rule 106   factor -> constant
Rule 107   factor -> variable
Rule 108   factor -> ( hyper_exp )
Rule 109   factor -> func_llamada
Rule 110   constant -> VAL_INT np_push_const_int
Rule 111   constant -> VAL_FLOAT np_push_const_float
Rule 112   constant -> VAL_CHAR np_push_const_char
Rule 113   np_push_const_int -> epsilon
Rule 114   np_push_const_float -> epsilon
Rule 115   np_push_const_char -> epsilon
Rule 116   np_single_var_process -> epsilon
Rule 117   np_array_var_process -> epsilon
Rule 118   epsilon -> <empty>

Terminals, with rules where they appear

&                    : 87
(                    : 4 25 52 62 63 68 69 78 108
)                    : 4 25 52 62 63 68 69 78 108
*                    : 101
+                    : 97
,                    : 18 37 56 59 65
-                    : 98
/                    : 102
;                    : 1 15 25 45 51 62 63 68
<                    : 91
=                    : 51 82
>                    : 92
BOOL                 : 43
CHAR                 : 42
DO                   : 78 82
ELSE                 : 70
EQUAL_TO             : 93
FLOAT                : 41
FOR                  : 82
FUNCTION             : 25
ID                   : 1 9 10 15 18 25 36 37 52
IF                   : 69
INT                  : 40
MAIN                 : 4
NOT_EQUAL_TO         : 94
PRINT                : 
PROGRAM              : 1
READ                 : 63
RETURN               : 62
STRING               : 
THEN                 : 69
TO                   : 82
VAL_CHAR             : 112
VAL_FLOAT            : 111
VAL_INT              : 16 110
VAL_STRING           : 
VARS                 : 11
VOID                 : 27
WHILE                : 78
WRITE                : 68
[                    : 10 16
]                    : 10 16
error                : 
{                    : 4 25 69 70 78 82
|                    : 88
}                    : 4 25 69 70 78 82

Nonterminals, with rules where they appear

argumento_loop       : 52
argumento_loop_1     : 54 56
array_opcional       : 15 18
asignacion           : 44
condicional          : 76
constant             : 106
decision             : 48
decision_else        : 69
epsilon              : 2 3 5 6 8 12 14 17 19 20 21 22 24 28 29 30 31 32 33 35 38 39 53 55 57 60 61 66 67 71 72 73 75 79 80 81 83 84 85 89 95 99 103 104 105 113 114 115 116 117
estatuto             : 74
exp                  : 90 91 92 93 94
exp_1                : 96
factor               : 100 101 102
func_definicion      : 23
func_llamada         : 45 109
func_parametro       : 25
func_programa_loop   : 1 23
func_return          : 50
func_tipo_retorno    : 25
hyper_exp            : 10 51 54 56 58 59 62 69 78 82 82 108
hyper_exp_1          : 86
hyper_exp_loop       : 68
hyper_exp_loop_1     : 58 59
loop_estatuto        : 4 25 69 70 74 78 82
loop_parametro       : 36 37
loop_var_decl_mismo_tipo : 15 18
loop_var_declaracion : 11 13
main                 : 1
no_condicional       : 77
np_add_param         : 36 37
np_add_to_func_dir   : 25
np_add_to_input_counter : 58 59 64 65
np_add_var_to_varstable : 15 18
np_array_var_process : 10
np_cond_1            : 78
np_cond_2            : 78
np_cond_3            : 78
np_decision_1        : 69
np_decision_2        : 70
np_fc_1              : 52
np_fc_2              : 54 56
np_fin_total         : 4
np_for_1             : 82
np_for_2             : 82
np_for_3             : 82
np_func_id           : 25
np_func_tipo_retorno : 25
np_kill_func         : 25
np_pop_operator_stack : 10 52
np_prep_func_params  : 25
np_prep_main         : 4
np_program_start     : 1
np_push_const_char   : 112
np_push_const_float  : 111
np_push_const_int    : 16 110
np_push_operator_stack : 10 52 87 88 91 92 93 94 97 98 101 102
np_save_curr_func_quad : 25
np_set_curr_var_name : 15 18
np_set_curr_var_type : 15
np_single_var_process : 9
np_start_dirfunc     : 1
np_var_prep          : 11
parametro            : 34
programa             : 0
read                 : 46
repeticion           : 49
super_exp            : 86 87 88
super_exp_1          : 90
term                 : 96 97 98
term_1               : 100
tipo                 : 15 26 36 37
var_declaracion      : 7
var_declaracion_mismo_tipo : 11 13
var_opcional         : 1 25
variable             : 51 64 65 82 107
variable_loop        : 63
variable_loop_1      : 64 65
write                : 47

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main
    (2) np_program_start -> . epsilon
    (118) epsilon -> .

    ID              reduce using rule 118 (epsilon -> .)

    np_program_start               shift and go to state 3
    epsilon                        shift and go to state 4

state 3

    (1) programa -> PROGRAM np_program_start . ID np_start_dirfunc ; var_opcional func_programa_loop main

    ID              shift and go to state 5


state 4

    (2) np_program_start -> epsilon .

    ID              reduce using rule 2 (np_program_start -> epsilon .)


state 5

    (1) programa -> PROGRAM np_program_start ID . np_start_dirfunc ; var_opcional func_programa_loop main
    (3) np_start_dirfunc -> . epsilon
    (118) epsilon -> .

    ;               reduce using rule 118 (epsilon -> .)

    np_start_dirfunc               shift and go to state 6
    epsilon                        shift and go to state 7

state 6

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc . ; var_opcional func_programa_loop main

    ;               shift and go to state 8


state 7

    (3) np_start_dirfunc -> epsilon .

    ;               reduce using rule 3 (np_start_dirfunc -> epsilon .)


state 8

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc ; . var_opcional func_programa_loop main
    (7) var_opcional -> . var_declaracion
    (8) var_opcional -> . epsilon
    (11) var_declaracion -> . VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion
    (118) epsilon -> .

    VARS            shift and go to state 12
    FUNCTION        reduce using rule 118 (epsilon -> .)
    MAIN            reduce using rule 118 (epsilon -> .)

    var_opcional                   shift and go to state 9
    var_declaracion                shift and go to state 10
    epsilon                        shift and go to state 11

state 9

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional . func_programa_loop main
    (23) func_programa_loop -> . func_definicion func_programa_loop
    (24) func_programa_loop -> . epsilon
    (25) func_definicion -> . FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (118) epsilon -> .

    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 118 (epsilon -> .)

    func_programa_loop             shift and go to state 13
    func_definicion                shift and go to state 14
    epsilon                        shift and go to state 15

state 10

    (7) var_opcional -> var_declaracion .

    FUNCTION        reduce using rule 7 (var_opcional -> var_declaracion .)
    MAIN            reduce using rule 7 (var_opcional -> var_declaracion .)
    {               reduce using rule 7 (var_opcional -> var_declaracion .)


state 11

    (8) var_opcional -> epsilon .

    FUNCTION        reduce using rule 8 (var_opcional -> epsilon .)
    MAIN            reduce using rule 8 (var_opcional -> epsilon .)
    {               reduce using rule 8 (var_opcional -> epsilon .)


state 12

    (11) var_declaracion -> VARS . np_var_prep var_declaracion_mismo_tipo loop_var_declaracion
    (12) np_var_prep -> . epsilon
    (118) epsilon -> .

    INT             reduce using rule 118 (epsilon -> .)
    FLOAT           reduce using rule 118 (epsilon -> .)
    CHAR            reduce using rule 118 (epsilon -> .)
    BOOL            reduce using rule 118 (epsilon -> .)

    np_var_prep                    shift and go to state 17
    epsilon                        shift and go to state 18

state 13

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop . main
    (4) main -> . MAIN np_prep_main ( ) { loop_estatuto } np_fin_total

    MAIN            shift and go to state 20

    main                           shift and go to state 19

state 14

    (23) func_programa_loop -> func_definicion . func_programa_loop
    (23) func_programa_loop -> . func_definicion func_programa_loop
    (24) func_programa_loop -> . epsilon
    (25) func_definicion -> . FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (118) epsilon -> .

    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 118 (epsilon -> .)

    func_definicion                shift and go to state 14
    func_programa_loop             shift and go to state 21
    epsilon                        shift and go to state 15

state 15

    (24) func_programa_loop -> epsilon .

    MAIN            reduce using rule 24 (func_programa_loop -> epsilon .)


state 16

    (25) func_definicion -> FUNCTION . func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (26) func_tipo_retorno -> . tipo
    (27) func_tipo_retorno -> . VOID
    (40) tipo -> . INT
    (41) tipo -> . FLOAT
    (42) tipo -> . CHAR
    (43) tipo -> . BOOL

    VOID            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOL            shift and go to state 28

    func_tipo_retorno              shift and go to state 22
    tipo                           shift and go to state 23

state 17

    (11) var_declaracion -> VARS np_var_prep . var_declaracion_mismo_tipo loop_var_declaracion
    (15) var_declaracion_mismo_tipo -> . tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (40) tipo -> . INT
    (41) tipo -> . FLOAT
    (42) tipo -> . CHAR
    (43) tipo -> . BOOL

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOL            shift and go to state 28

    var_declaracion_mismo_tipo     shift and go to state 29
    tipo                           shift and go to state 30

state 18

    (12) np_var_prep -> epsilon .

    INT             reduce using rule 12 (np_var_prep -> epsilon .)
    FLOAT           reduce using rule 12 (np_var_prep -> epsilon .)
    CHAR            reduce using rule 12 (np_var_prep -> epsilon .)
    BOOL            reduce using rule 12 (np_var_prep -> epsilon .)


state 19

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main .

    $end            reduce using rule 1 (programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main .)


state 20

    (4) main -> MAIN . np_prep_main ( ) { loop_estatuto } np_fin_total
    (5) np_prep_main -> . epsilon
    (118) epsilon -> .

    (               reduce using rule 118 (epsilon -> .)

    np_prep_main                   shift and go to state 31
    epsilon                        shift and go to state 32

state 21

    (23) func_programa_loop -> func_definicion func_programa_loop .

    MAIN            reduce using rule 23 (func_programa_loop -> func_definicion func_programa_loop .)


state 22

    (25) func_definicion -> FUNCTION func_tipo_retorno . np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (28) np_func_tipo_retorno -> . epsilon
    (118) epsilon -> .

    ID              reduce using rule 118 (epsilon -> .)

    np_func_tipo_retorno           shift and go to state 33
    epsilon                        shift and go to state 34

state 23

    (26) func_tipo_retorno -> tipo .

    ID              reduce using rule 26 (func_tipo_retorno -> tipo .)


state 24

    (27) func_tipo_retorno -> VOID .

    ID              reduce using rule 27 (func_tipo_retorno -> VOID .)


state 25

    (40) tipo -> INT .

    ID              reduce using rule 40 (tipo -> INT .)


state 26

    (41) tipo -> FLOAT .

    ID              reduce using rule 41 (tipo -> FLOAT .)


state 27

    (42) tipo -> CHAR .

    ID              reduce using rule 42 (tipo -> CHAR .)


state 28

    (43) tipo -> BOOL .

    ID              reduce using rule 43 (tipo -> BOOL .)


state 29

    (11) var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo . loop_var_declaracion
    (13) loop_var_declaracion -> . var_declaracion_mismo_tipo loop_var_declaracion
    (14) loop_var_declaracion -> . epsilon
    (15) var_declaracion_mismo_tipo -> . tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (118) epsilon -> .
    (40) tipo -> . INT
    (41) tipo -> . FLOAT
    (42) tipo -> . CHAR
    (43) tipo -> . BOOL

    FUNCTION        reduce using rule 118 (epsilon -> .)
    MAIN            reduce using rule 118 (epsilon -> .)
    {               reduce using rule 118 (epsilon -> .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOL            shift and go to state 28

    var_declaracion_mismo_tipo     shift and go to state 35
    loop_var_declaracion           shift and go to state 36
    epsilon                        shift and go to state 37
    tipo                           shift and go to state 30

state 30

    (15) var_declaracion_mismo_tipo -> tipo . np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (20) np_set_curr_var_type -> . epsilon
    (118) epsilon -> .

    ID              reduce using rule 118 (epsilon -> .)

    np_set_curr_var_type           shift and go to state 38
    epsilon                        shift and go to state 39

state 31

    (4) main -> MAIN np_prep_main . ( ) { loop_estatuto } np_fin_total

    (               shift and go to state 40


state 32

    (5) np_prep_main -> epsilon .

    (               reduce using rule 5 (np_prep_main -> epsilon .)


state 33

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno . ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func

    ID              shift and go to state 41


state 34

    (28) np_func_tipo_retorno -> epsilon .

    ID              reduce using rule 28 (np_func_tipo_retorno -> epsilon .)


state 35

    (13) loop_var_declaracion -> var_declaracion_mismo_tipo . loop_var_declaracion
    (13) loop_var_declaracion -> . var_declaracion_mismo_tipo loop_var_declaracion
    (14) loop_var_declaracion -> . epsilon
    (15) var_declaracion_mismo_tipo -> . tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (118) epsilon -> .
    (40) tipo -> . INT
    (41) tipo -> . FLOAT
    (42) tipo -> . CHAR
    (43) tipo -> . BOOL

    FUNCTION        reduce using rule 118 (epsilon -> .)
    MAIN            reduce using rule 118 (epsilon -> .)
    {               reduce using rule 118 (epsilon -> .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOL            shift and go to state 28

    var_declaracion_mismo_tipo     shift and go to state 35
    loop_var_declaracion           shift and go to state 42
    epsilon                        shift and go to state 37
    tipo                           shift and go to state 30

state 36

    (11) var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion .

    FUNCTION        reduce using rule 11 (var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion .)
    MAIN            reduce using rule 11 (var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion .)
    {               reduce using rule 11 (var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion .)


state 37

    (14) loop_var_declaracion -> epsilon .

    FUNCTION        reduce using rule 14 (loop_var_declaracion -> epsilon .)
    MAIN            reduce using rule 14 (loop_var_declaracion -> epsilon .)
    {               reduce using rule 14 (loop_var_declaracion -> epsilon .)


state 38

    (15) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type . ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ;

    ID              shift and go to state 43


state 39

    (20) np_set_curr_var_type -> epsilon .

    ID              reduce using rule 20 (np_set_curr_var_type -> epsilon .)


state 40

    (4) main -> MAIN np_prep_main ( . ) { loop_estatuto } np_fin_total

    )               shift and go to state 44


state 41

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID . np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (29) np_func_id -> . epsilon
    (118) epsilon -> .

    (               reduce using rule 118 (epsilon -> .)

    np_func_id                     shift and go to state 45
    epsilon                        shift and go to state 46

state 42

    (13) loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion .

    FUNCTION        reduce using rule 13 (loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion .)
    MAIN            reduce using rule 13 (loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion .)
    {               reduce using rule 13 (loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion .)


state 43

    (15) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID . np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (21) np_set_curr_var_name -> . epsilon
    (118) epsilon -> .

    [               reduce using rule 118 (epsilon -> .)
    ,               reduce using rule 118 (epsilon -> .)
    ;               reduce using rule 118 (epsilon -> .)

    np_set_curr_var_name           shift and go to state 47
    epsilon                        shift and go to state 48

state 44

    (4) main -> MAIN np_prep_main ( ) . { loop_estatuto } np_fin_total

    {               shift and go to state 49


state 45

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id . np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (30) np_add_to_func_dir -> . epsilon
    (118) epsilon -> .

    (               reduce using rule 118 (epsilon -> .)

    np_add_to_func_dir             shift and go to state 50
    epsilon                        shift and go to state 51

state 46

    (29) np_func_id -> epsilon .

    (               reduce using rule 29 (np_func_id -> epsilon .)


state 47

    (15) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name . array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (16) array_opcional -> . [ VAL_INT np_push_const_int ]
    (17) array_opcional -> . epsilon
    (118) epsilon -> .

    [               shift and go to state 53
    ,               reduce using rule 118 (epsilon -> .)
    ;               reduce using rule 118 (epsilon -> .)

    array_opcional                 shift and go to state 52
    epsilon                        shift and go to state 54

state 48

    (21) np_set_curr_var_name -> epsilon .

    [               reduce using rule 21 (np_set_curr_var_name -> epsilon .)
    ,               reduce using rule 21 (np_set_curr_var_name -> epsilon .)
    ;               reduce using rule 21 (np_set_curr_var_name -> epsilon .)


state 49

    (4) main -> MAIN np_prep_main ( ) { . loop_estatuto } np_fin_total
    (74) loop_estatuto -> . estatuto loop_estatuto
    (75) loop_estatuto -> . epsilon
    (44) estatuto -> . asignacion
    (45) estatuto -> . func_llamada ;
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . decision
    (49) estatuto -> . repeticion
    (50) estatuto -> . func_return
    (118) epsilon -> .
    (51) asignacion -> . variable = hyper_exp ;
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (68) write -> . WRITE ( hyper_exp_loop ) ;
    (69) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (76) repeticion -> . condicional
    (77) repeticion -> . no_condicional
    (62) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (78) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (82) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 118 (epsilon -> .)
    ID              shift and go to state 66
    READ            shift and go to state 67
    WRITE           shift and go to state 68
    IF              shift and go to state 69
    RETURN          shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74

    loop_estatuto                  shift and go to state 55
    estatuto                       shift and go to state 56
    epsilon                        shift and go to state 57
    asignacion                     shift and go to state 58
    func_llamada                   shift and go to state 59
    read                           shift and go to state 60
    write                          shift and go to state 61
    decision                       shift and go to state 62
    repeticion                     shift and go to state 63
    func_return                    shift and go to state 64
    variable                       shift and go to state 65
    condicional                    shift and go to state 70
    no_condicional                 shift and go to state 71

state 50

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir . ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func

    (               shift and go to state 75


state 51

    (30) np_add_to_func_dir -> epsilon .

    (               reduce using rule 30 (np_add_to_func_dir -> epsilon .)


state 52

    (15) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional . np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (22) np_add_var_to_varstable -> . epsilon
    (118) epsilon -> .

    ,               reduce using rule 118 (epsilon -> .)
    ;               reduce using rule 118 (epsilon -> .)

    np_add_var_to_varstable        shift and go to state 76
    epsilon                        shift and go to state 77

state 53

    (16) array_opcional -> [ . VAL_INT np_push_const_int ]

    VAL_INT         shift and go to state 78


state 54

    (17) array_opcional -> epsilon .

    ,               reduce using rule 17 (array_opcional -> epsilon .)
    ;               reduce using rule 17 (array_opcional -> epsilon .)


state 55

    (4) main -> MAIN np_prep_main ( ) { loop_estatuto . } np_fin_total

    }               shift and go to state 79


state 56

    (74) loop_estatuto -> estatuto . loop_estatuto
    (74) loop_estatuto -> . estatuto loop_estatuto
    (75) loop_estatuto -> . epsilon
    (44) estatuto -> . asignacion
    (45) estatuto -> . func_llamada ;
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . decision
    (49) estatuto -> . repeticion
    (50) estatuto -> . func_return
    (118) epsilon -> .
    (51) asignacion -> . variable = hyper_exp ;
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (68) write -> . WRITE ( hyper_exp_loop ) ;
    (69) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (76) repeticion -> . condicional
    (77) repeticion -> . no_condicional
    (62) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (78) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (82) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 118 (epsilon -> .)
    ID              shift and go to state 66
    READ            shift and go to state 67
    WRITE           shift and go to state 68
    IF              shift and go to state 69
    RETURN          shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74

    estatuto                       shift and go to state 56
    loop_estatuto                  shift and go to state 80
    epsilon                        shift and go to state 57
    asignacion                     shift and go to state 58
    func_llamada                   shift and go to state 59
    read                           shift and go to state 60
    write                          shift and go to state 61
    decision                       shift and go to state 62
    repeticion                     shift and go to state 63
    func_return                    shift and go to state 64
    variable                       shift and go to state 65
    condicional                    shift and go to state 70
    no_condicional                 shift and go to state 71

state 57

    (75) loop_estatuto -> epsilon .

    }               reduce using rule 75 (loop_estatuto -> epsilon .)


state 58

    (44) estatuto -> asignacion .

    ID              reduce using rule 44 (estatuto -> asignacion .)
    READ            reduce using rule 44 (estatuto -> asignacion .)
    WRITE           reduce using rule 44 (estatuto -> asignacion .)
    IF              reduce using rule 44 (estatuto -> asignacion .)
    RETURN          reduce using rule 44 (estatuto -> asignacion .)
    WHILE           reduce using rule 44 (estatuto -> asignacion .)
    FOR             reduce using rule 44 (estatuto -> asignacion .)
    }               reduce using rule 44 (estatuto -> asignacion .)


state 59

    (45) estatuto -> func_llamada . ;

    ;               shift and go to state 81


state 60

    (46) estatuto -> read .

    ID              reduce using rule 46 (estatuto -> read .)
    READ            reduce using rule 46 (estatuto -> read .)
    WRITE           reduce using rule 46 (estatuto -> read .)
    IF              reduce using rule 46 (estatuto -> read .)
    RETURN          reduce using rule 46 (estatuto -> read .)
    WHILE           reduce using rule 46 (estatuto -> read .)
    FOR             reduce using rule 46 (estatuto -> read .)
    }               reduce using rule 46 (estatuto -> read .)


state 61

    (47) estatuto -> write .

    ID              reduce using rule 47 (estatuto -> write .)
    READ            reduce using rule 47 (estatuto -> write .)
    WRITE           reduce using rule 47 (estatuto -> write .)
    IF              reduce using rule 47 (estatuto -> write .)
    RETURN          reduce using rule 47 (estatuto -> write .)
    WHILE           reduce using rule 47 (estatuto -> write .)
    FOR             reduce using rule 47 (estatuto -> write .)
    }               reduce using rule 47 (estatuto -> write .)


state 62

    (48) estatuto -> decision .

    ID              reduce using rule 48 (estatuto -> decision .)
    READ            reduce using rule 48 (estatuto -> decision .)
    WRITE           reduce using rule 48 (estatuto -> decision .)
    IF              reduce using rule 48 (estatuto -> decision .)
    RETURN          reduce using rule 48 (estatuto -> decision .)
    WHILE           reduce using rule 48 (estatuto -> decision .)
    FOR             reduce using rule 48 (estatuto -> decision .)
    }               reduce using rule 48 (estatuto -> decision .)


state 63

    (49) estatuto -> repeticion .

    ID              reduce using rule 49 (estatuto -> repeticion .)
    READ            reduce using rule 49 (estatuto -> repeticion .)
    WRITE           reduce using rule 49 (estatuto -> repeticion .)
    IF              reduce using rule 49 (estatuto -> repeticion .)
    RETURN          reduce using rule 49 (estatuto -> repeticion .)
    WHILE           reduce using rule 49 (estatuto -> repeticion .)
    FOR             reduce using rule 49 (estatuto -> repeticion .)
    }               reduce using rule 49 (estatuto -> repeticion .)


state 64

    (50) estatuto -> func_return .

    ID              reduce using rule 50 (estatuto -> func_return .)
    READ            reduce using rule 50 (estatuto -> func_return .)
    WRITE           reduce using rule 50 (estatuto -> func_return .)
    IF              reduce using rule 50 (estatuto -> func_return .)
    RETURN          reduce using rule 50 (estatuto -> func_return .)
    WHILE           reduce using rule 50 (estatuto -> func_return .)
    FOR             reduce using rule 50 (estatuto -> func_return .)
    }               reduce using rule 50 (estatuto -> func_return .)


state 65

    (51) asignacion -> variable . = hyper_exp ;

    =               shift and go to state 82


state 66

    (52) func_llamada -> ID . np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (9) variable -> ID . np_single_var_process
    (10) variable -> ID . [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (53) np_fc_1 -> . epsilon
    (116) np_single_var_process -> . epsilon
    (118) epsilon -> .

    [               shift and go to state 85
    (               reduce using rule 118 (epsilon -> .)
    =               reduce using rule 118 (epsilon -> .)

    np_fc_1                        shift and go to state 83
    np_single_var_process          shift and go to state 84
    epsilon                        shift and go to state 86

state 67

    (63) read -> READ . ( variable_loop ) ;

    (               shift and go to state 87


state 68

    (68) write -> WRITE . ( hyper_exp_loop ) ;

    (               shift and go to state 88


state 69

    (69) decision -> IF . ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else

    (               shift and go to state 89


state 70

    (76) repeticion -> condicional .

    ID              reduce using rule 76 (repeticion -> condicional .)
    READ            reduce using rule 76 (repeticion -> condicional .)
    WRITE           reduce using rule 76 (repeticion -> condicional .)
    IF              reduce using rule 76 (repeticion -> condicional .)
    RETURN          reduce using rule 76 (repeticion -> condicional .)
    WHILE           reduce using rule 76 (repeticion -> condicional .)
    FOR             reduce using rule 76 (repeticion -> condicional .)
    }               reduce using rule 76 (repeticion -> condicional .)


state 71

    (77) repeticion -> no_condicional .

    ID              reduce using rule 77 (repeticion -> no_condicional .)
    READ            reduce using rule 77 (repeticion -> no_condicional .)
    WRITE           reduce using rule 77 (repeticion -> no_condicional .)
    IF              reduce using rule 77 (repeticion -> no_condicional .)
    RETURN          reduce using rule 77 (repeticion -> no_condicional .)
    WHILE           reduce using rule 77 (repeticion -> no_condicional .)
    FOR             reduce using rule 77 (repeticion -> no_condicional .)
    }               reduce using rule 77 (repeticion -> no_condicional .)


state 72

    (62) func_return -> RETURN . ( hyper_exp ) ;

    (               shift and go to state 90


state 73

    (78) condicional -> WHILE . np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (79) np_cond_1 -> . epsilon
    (118) epsilon -> .

    (               reduce using rule 118 (epsilon -> .)

    np_cond_1                      shift and go to state 91
    epsilon                        shift and go to state 92

state 74

    (82) no_condicional -> FOR . variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process

    ID              shift and go to state 94

    variable                       shift and go to state 93

state 75

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( . np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (33) np_prep_func_params -> . epsilon
    (118) epsilon -> .

    INT             reduce using rule 118 (epsilon -> .)
    FLOAT           reduce using rule 118 (epsilon -> .)
    CHAR            reduce using rule 118 (epsilon -> .)
    BOOL            reduce using rule 118 (epsilon -> .)
    )               reduce using rule 118 (epsilon -> .)

    np_prep_func_params            shift and go to state 95
    epsilon                        shift and go to state 96

state 76

    (15) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable . loop_var_decl_mismo_tipo ;
    (18) loop_var_decl_mismo_tipo -> . , ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo
    (19) loop_var_decl_mismo_tipo -> . epsilon
    (118) epsilon -> .

    ,               shift and go to state 98
    ;               reduce using rule 118 (epsilon -> .)

    loop_var_decl_mismo_tipo       shift and go to state 97
    epsilon                        shift and go to state 99

state 77

    (22) np_add_var_to_varstable -> epsilon .

    ,               reduce using rule 22 (np_add_var_to_varstable -> epsilon .)
    ;               reduce using rule 22 (np_add_var_to_varstable -> epsilon .)


state 78

    (16) array_opcional -> [ VAL_INT . np_push_const_int ]
    (113) np_push_const_int -> . epsilon
    (118) epsilon -> .

    ]               reduce using rule 118 (epsilon -> .)

    np_push_const_int              shift and go to state 100
    epsilon                        shift and go to state 101

state 79

    (4) main -> MAIN np_prep_main ( ) { loop_estatuto } . np_fin_total
    (6) np_fin_total -> . epsilon
    (118) epsilon -> .

    $end            reduce using rule 118 (epsilon -> .)

    np_fin_total                   shift and go to state 102
    epsilon                        shift and go to state 103

state 80

    (74) loop_estatuto -> estatuto loop_estatuto .

    }               reduce using rule 74 (loop_estatuto -> estatuto loop_estatuto .)


state 81

    (45) estatuto -> func_llamada ; .

    ID              reduce using rule 45 (estatuto -> func_llamada ; .)
    READ            reduce using rule 45 (estatuto -> func_llamada ; .)
    WRITE           reduce using rule 45 (estatuto -> func_llamada ; .)
    IF              reduce using rule 45 (estatuto -> func_llamada ; .)
    RETURN          reduce using rule 45 (estatuto -> func_llamada ; .)
    WHILE           reduce using rule 45 (estatuto -> func_llamada ; .)
    FOR             reduce using rule 45 (estatuto -> func_llamada ; .)
    }               reduce using rule 45 (estatuto -> func_llamada ; .)


state 82

    (51) asignacion -> variable = . hyper_exp ;
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) constant -> . VAL_INT np_push_const_int
    (111) constant -> . VAL_FLOAT np_push_const_float
    (112) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 111
    VAL_INT         shift and go to state 113
    VAL_FLOAT       shift and go to state 114
    VAL_CHAR        shift and go to state 115
    ID              shift and go to state 116

    variable                       shift and go to state 104
    hyper_exp                      shift and go to state 105
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    func_llamada                   shift and go to state 112

state 83

    (52) func_llamada -> ID np_fc_1 . ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 117


state 84

    (9) variable -> ID np_single_var_process .

    =               reduce using rule 9 (variable -> ID np_single_var_process .)
    *               reduce using rule 9 (variable -> ID np_single_var_process .)
    /               reduce using rule 9 (variable -> ID np_single_var_process .)
    +               reduce using rule 9 (variable -> ID np_single_var_process .)
    -               reduce using rule 9 (variable -> ID np_single_var_process .)
    <               reduce using rule 9 (variable -> ID np_single_var_process .)
    >               reduce using rule 9 (variable -> ID np_single_var_process .)
    EQUAL_TO        reduce using rule 9 (variable -> ID np_single_var_process .)
    NOT_EQUAL_TO    reduce using rule 9 (variable -> ID np_single_var_process .)
    &               reduce using rule 9 (variable -> ID np_single_var_process .)
    |               reduce using rule 9 (variable -> ID np_single_var_process .)
    ;               reduce using rule 9 (variable -> ID np_single_var_process .)
    ,               reduce using rule 9 (variable -> ID np_single_var_process .)
    )               reduce using rule 9 (variable -> ID np_single_var_process .)
    ]               reduce using rule 9 (variable -> ID np_single_var_process .)
    TO              reduce using rule 9 (variable -> ID np_single_var_process .)
    DO              reduce using rule 9 (variable -> ID np_single_var_process .)


state 85

    (10) variable -> ID [ . np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (104) np_push_operator_stack -> . epsilon
    (118) epsilon -> .

    (               reduce using rule 118 (epsilon -> .)
    VAL_INT         reduce using rule 118 (epsilon -> .)
    VAL_FLOAT       reduce using rule 118 (epsilon -> .)
    VAL_CHAR        reduce using rule 118 (epsilon -> .)
    ID              reduce using rule 118 (epsilon -> .)

    np_push_operator_stack         shift and go to state 118
    epsilon                        shift and go to state 119

state 86

    (53) np_fc_1 -> epsilon .
    (116) np_single_var_process -> epsilon .

    (               reduce using rule 53 (np_fc_1 -> epsilon .)
    =               reduce using rule 116 (np_single_var_process -> epsilon .)


state 87

    (63) read -> READ ( . variable_loop ) ;
    (64) variable_loop -> . variable np_add_to_input_counter variable_loop_1
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process

    ID              shift and go to state 94

    variable_loop                  shift and go to state 120
    variable                       shift and go to state 121

state 88

    (68) write -> WRITE ( . hyper_exp_loop ) ;
    (58) hyper_exp_loop -> . hyper_exp np_add_to_input_counter hyper_exp_loop_1
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) constant -> . VAL_INT np_push_const_int
    (111) constant -> . VAL_FLOAT np_push_const_float
    (112) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 111
    VAL_INT         shift and go to state 113
    VAL_FLOAT       shift and go to state 114
    VAL_CHAR        shift and go to state 115
    ID              shift and go to state 116

    hyper_exp_loop                 shift and go to state 122
    hyper_exp                      shift and go to state 123
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112

state 89

    (69) decision -> IF ( . hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) constant -> . VAL_INT np_push_const_int
    (111) constant -> . VAL_FLOAT np_push_const_float
    (112) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 111
    VAL_INT         shift and go to state 113
    VAL_FLOAT       shift and go to state 114
    VAL_CHAR        shift and go to state 115
    ID              shift and go to state 116

    hyper_exp                      shift and go to state 124
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112

state 90

    (62) func_return -> RETURN ( . hyper_exp ) ;
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) constant -> . VAL_INT np_push_const_int
    (111) constant -> . VAL_FLOAT np_push_const_float
    (112) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 111
    VAL_INT         shift and go to state 113
    VAL_FLOAT       shift and go to state 114
    VAL_CHAR        shift and go to state 115
    ID              shift and go to state 116

    hyper_exp                      shift and go to state 125
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112

state 91

    (78) condicional -> WHILE np_cond_1 . ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3

    (               shift and go to state 126


state 92

    (79) np_cond_1 -> epsilon .

    (               reduce using rule 79 (np_cond_1 -> epsilon .)


state 93

    (82) no_condicional -> FOR variable . = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    =               shift and go to state 127


state 94

    (9) variable -> ID . np_single_var_process
    (10) variable -> ID . [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (116) np_single_var_process -> . epsilon
    (118) epsilon -> .

    [               shift and go to state 85
    =               reduce using rule 118 (epsilon -> .)
    ,               reduce using rule 118 (epsilon -> .)
    )               reduce using rule 118 (epsilon -> .)

    np_single_var_process          shift and go to state 84
    epsilon                        shift and go to state 128

state 95

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params . func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (34) func_parametro -> . parametro
    (35) func_parametro -> . epsilon
    (36) parametro -> . tipo ID np_add_param loop_parametro
    (118) epsilon -> .
    (40) tipo -> . INT
    (41) tipo -> . FLOAT
    (42) tipo -> . CHAR
    (43) tipo -> . BOOL

    )               reduce using rule 118 (epsilon -> .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOL            shift and go to state 28

    func_parametro                 shift and go to state 129
    parametro                      shift and go to state 130
    epsilon                        shift and go to state 131
    tipo                           shift and go to state 132

state 96

    (33) np_prep_func_params -> epsilon .

    INT             reduce using rule 33 (np_prep_func_params -> epsilon .)
    FLOAT           reduce using rule 33 (np_prep_func_params -> epsilon .)
    CHAR            reduce using rule 33 (np_prep_func_params -> epsilon .)
    BOOL            reduce using rule 33 (np_prep_func_params -> epsilon .)
    )               reduce using rule 33 (np_prep_func_params -> epsilon .)


state 97

    (15) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo . ;

    ;               shift and go to state 133


state 98

    (18) loop_var_decl_mismo_tipo -> , . ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo

    ID              shift and go to state 134


state 99

    (19) loop_var_decl_mismo_tipo -> epsilon .

    ;               reduce using rule 19 (loop_var_decl_mismo_tipo -> epsilon .)


state 100

    (16) array_opcional -> [ VAL_INT np_push_const_int . ]

    ]               shift and go to state 135


state 101

    (113) np_push_const_int -> epsilon .

    ]               reduce using rule 113 (np_push_const_int -> epsilon .)
    *               reduce using rule 113 (np_push_const_int -> epsilon .)
    /               reduce using rule 113 (np_push_const_int -> epsilon .)
    +               reduce using rule 113 (np_push_const_int -> epsilon .)
    -               reduce using rule 113 (np_push_const_int -> epsilon .)
    <               reduce using rule 113 (np_push_const_int -> epsilon .)
    >               reduce using rule 113 (np_push_const_int -> epsilon .)
    EQUAL_TO        reduce using rule 113 (np_push_const_int -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 113 (np_push_const_int -> epsilon .)
    &               reduce using rule 113 (np_push_const_int -> epsilon .)
    |               reduce using rule 113 (np_push_const_int -> epsilon .)
    ;               reduce using rule 113 (np_push_const_int -> epsilon .)
    ,               reduce using rule 113 (np_push_const_int -> epsilon .)
    )               reduce using rule 113 (np_push_const_int -> epsilon .)
    TO              reduce using rule 113 (np_push_const_int -> epsilon .)
    DO              reduce using rule 113 (np_push_const_int -> epsilon .)


state 102

    (4) main -> MAIN np_prep_main ( ) { loop_estatuto } np_fin_total .

    $end            reduce using rule 4 (main -> MAIN np_prep_main ( ) { loop_estatuto } np_fin_total .)


state 103

    (6) np_fin_total -> epsilon .

    $end            reduce using rule 6 (np_fin_total -> epsilon .)


state 104

    (107) factor -> variable .

    *               reduce using rule 107 (factor -> variable .)
    /               reduce using rule 107 (factor -> variable .)
    +               reduce using rule 107 (factor -> variable .)
    -               reduce using rule 107 (factor -> variable .)
    <               reduce using rule 107 (factor -> variable .)
    >               reduce using rule 107 (factor -> variable .)
    EQUAL_TO        reduce using rule 107 (factor -> variable .)
    NOT_EQUAL_TO    reduce using rule 107 (factor -> variable .)
    &               reduce using rule 107 (factor -> variable .)
    |               reduce using rule 107 (factor -> variable .)
    ;               reduce using rule 107 (factor -> variable .)
    ,               reduce using rule 107 (factor -> variable .)
    )               reduce using rule 107 (factor -> variable .)
    ]               reduce using rule 107 (factor -> variable .)
    TO              reduce using rule 107 (factor -> variable .)
    DO              reduce using rule 107 (factor -> variable .)


state 105

    (51) asignacion -> variable = hyper_exp . ;

    ;               shift and go to state 136


state 106

    (86) hyper_exp -> super_exp . hyper_exp_1
    (87) hyper_exp_1 -> . & np_push_operator_stack super_exp
    (88) hyper_exp_1 -> . | np_push_operator_stack super_exp
    (89) hyper_exp_1 -> . epsilon
    (118) epsilon -> .

    &               shift and go to state 138
    |               shift and go to state 139
    ;               reduce using rule 118 (epsilon -> .)
    ,               reduce using rule 118 (epsilon -> .)
    )               reduce using rule 118 (epsilon -> .)
    ]               reduce using rule 118 (epsilon -> .)
    TO              reduce using rule 118 (epsilon -> .)
    DO              reduce using rule 118 (epsilon -> .)

    hyper_exp_1                    shift and go to state 137
    epsilon                        shift and go to state 140

state 107

    (90) super_exp -> exp . super_exp_1
    (91) super_exp_1 -> . < np_push_operator_stack exp
    (92) super_exp_1 -> . > np_push_operator_stack exp
    (93) super_exp_1 -> . EQUAL_TO np_push_operator_stack exp
    (94) super_exp_1 -> . NOT_EQUAL_TO np_push_operator_stack exp
    (95) super_exp_1 -> . epsilon
    (118) epsilon -> .

    <               shift and go to state 142
    >               shift and go to state 143
    EQUAL_TO        shift and go to state 144
    NOT_EQUAL_TO    shift and go to state 145
    &               reduce using rule 118 (epsilon -> .)
    |               reduce using rule 118 (epsilon -> .)
    ;               reduce using rule 118 (epsilon -> .)
    ,               reduce using rule 118 (epsilon -> .)
    )               reduce using rule 118 (epsilon -> .)
    ]               reduce using rule 118 (epsilon -> .)
    TO              reduce using rule 118 (epsilon -> .)
    DO              reduce using rule 118 (epsilon -> .)

    super_exp_1                    shift and go to state 141
    epsilon                        shift and go to state 146

state 108

    (96) exp -> term . exp_1
    (97) exp_1 -> . + np_push_operator_stack term
    (98) exp_1 -> . - np_push_operator_stack term
    (99) exp_1 -> . epsilon
    (118) epsilon -> .

    +               shift and go to state 148
    -               shift and go to state 149
    <               reduce using rule 118 (epsilon -> .)
    >               reduce using rule 118 (epsilon -> .)
    EQUAL_TO        reduce using rule 118 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 118 (epsilon -> .)
    &               reduce using rule 118 (epsilon -> .)
    |               reduce using rule 118 (epsilon -> .)
    ;               reduce using rule 118 (epsilon -> .)
    ,               reduce using rule 118 (epsilon -> .)
    )               reduce using rule 118 (epsilon -> .)
    ]               reduce using rule 118 (epsilon -> .)
    TO              reduce using rule 118 (epsilon -> .)
    DO              reduce using rule 118 (epsilon -> .)

    exp_1                          shift and go to state 147
    epsilon                        shift and go to state 150

state 109

    (100) term -> factor . term_1
    (101) term_1 -> . * np_push_operator_stack factor
    (102) term_1 -> . / np_push_operator_stack factor
    (103) term_1 -> . epsilon
    (118) epsilon -> .

    *               shift and go to state 152
    /               shift and go to state 153
    +               reduce using rule 118 (epsilon -> .)
    -               reduce using rule 118 (epsilon -> .)
    <               reduce using rule 118 (epsilon -> .)
    >               reduce using rule 118 (epsilon -> .)
    EQUAL_TO        reduce using rule 118 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 118 (epsilon -> .)
    &               reduce using rule 118 (epsilon -> .)
    |               reduce using rule 118 (epsilon -> .)
    ;               reduce using rule 118 (epsilon -> .)
    ,               reduce using rule 118 (epsilon -> .)
    )               reduce using rule 118 (epsilon -> .)
    ]               reduce using rule 118 (epsilon -> .)
    TO              reduce using rule 118 (epsilon -> .)
    DO              reduce using rule 118 (epsilon -> .)

    term_1                         shift and go to state 151
    epsilon                        shift and go to state 154

state 110

    (106) factor -> constant .

    *               reduce using rule 106 (factor -> constant .)
    /               reduce using rule 106 (factor -> constant .)
    +               reduce using rule 106 (factor -> constant .)
    -               reduce using rule 106 (factor -> constant .)
    <               reduce using rule 106 (factor -> constant .)
    >               reduce using rule 106 (factor -> constant .)
    EQUAL_TO        reduce using rule 106 (factor -> constant .)
    NOT_EQUAL_TO    reduce using rule 106 (factor -> constant .)
    &               reduce using rule 106 (factor -> constant .)
    |               reduce using rule 106 (factor -> constant .)
    ;               reduce using rule 106 (factor -> constant .)
    ,               reduce using rule 106 (factor -> constant .)
    )               reduce using rule 106 (factor -> constant .)
    ]               reduce using rule 106 (factor -> constant .)
    TO              reduce using rule 106 (factor -> constant .)
    DO              reduce using rule 106 (factor -> constant .)


state 111

    (108) factor -> ( . hyper_exp )
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) constant -> . VAL_INT np_push_const_int
    (111) constant -> . VAL_FLOAT np_push_const_float
    (112) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 111
    VAL_INT         shift and go to state 113
    VAL_FLOAT       shift and go to state 114
    VAL_CHAR        shift and go to state 115
    ID              shift and go to state 116

    hyper_exp                      shift and go to state 155
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112

state 112

    (109) factor -> func_llamada .

    *               reduce using rule 109 (factor -> func_llamada .)
    /               reduce using rule 109 (factor -> func_llamada .)
    +               reduce using rule 109 (factor -> func_llamada .)
    -               reduce using rule 109 (factor -> func_llamada .)
    <               reduce using rule 109 (factor -> func_llamada .)
    >               reduce using rule 109 (factor -> func_llamada .)
    EQUAL_TO        reduce using rule 109 (factor -> func_llamada .)
    NOT_EQUAL_TO    reduce using rule 109 (factor -> func_llamada .)
    &               reduce using rule 109 (factor -> func_llamada .)
    |               reduce using rule 109 (factor -> func_llamada .)
    ;               reduce using rule 109 (factor -> func_llamada .)
    ,               reduce using rule 109 (factor -> func_llamada .)
    )               reduce using rule 109 (factor -> func_llamada .)
    ]               reduce using rule 109 (factor -> func_llamada .)
    TO              reduce using rule 109 (factor -> func_llamada .)
    DO              reduce using rule 109 (factor -> func_llamada .)


state 113

    (110) constant -> VAL_INT . np_push_const_int
    (113) np_push_const_int -> . epsilon
    (118) epsilon -> .

    *               reduce using rule 118 (epsilon -> .)
    /               reduce using rule 118 (epsilon -> .)
    +               reduce using rule 118 (epsilon -> .)
    -               reduce using rule 118 (epsilon -> .)
    <               reduce using rule 118 (epsilon -> .)
    >               reduce using rule 118 (epsilon -> .)
    EQUAL_TO        reduce using rule 118 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 118 (epsilon -> .)
    &               reduce using rule 118 (epsilon -> .)
    |               reduce using rule 118 (epsilon -> .)
    ;               reduce using rule 118 (epsilon -> .)
    ,               reduce using rule 118 (epsilon -> .)
    )               reduce using rule 118 (epsilon -> .)
    ]               reduce using rule 118 (epsilon -> .)
    TO              reduce using rule 118 (epsilon -> .)
    DO              reduce using rule 118 (epsilon -> .)

    np_push_const_int              shift and go to state 156
    epsilon                        shift and go to state 101

state 114

    (111) constant -> VAL_FLOAT . np_push_const_float
    (114) np_push_const_float -> . epsilon
    (118) epsilon -> .

    *               reduce using rule 118 (epsilon -> .)
    /               reduce using rule 118 (epsilon -> .)
    +               reduce using rule 118 (epsilon -> .)
    -               reduce using rule 118 (epsilon -> .)
    <               reduce using rule 118 (epsilon -> .)
    >               reduce using rule 118 (epsilon -> .)
    EQUAL_TO        reduce using rule 118 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 118 (epsilon -> .)
    &               reduce using rule 118 (epsilon -> .)
    |               reduce using rule 118 (epsilon -> .)
    ;               reduce using rule 118 (epsilon -> .)
    ,               reduce using rule 118 (epsilon -> .)
    )               reduce using rule 118 (epsilon -> .)
    ]               reduce using rule 118 (epsilon -> .)
    TO              reduce using rule 118 (epsilon -> .)
    DO              reduce using rule 118 (epsilon -> .)

    np_push_const_float            shift and go to state 157
    epsilon                        shift and go to state 158

state 115

    (112) constant -> VAL_CHAR . np_push_const_char
    (115) np_push_const_char -> . epsilon
    (118) epsilon -> .

    *               reduce using rule 118 (epsilon -> .)
    /               reduce using rule 118 (epsilon -> .)
    +               reduce using rule 118 (epsilon -> .)
    -               reduce using rule 118 (epsilon -> .)
    <               reduce using rule 118 (epsilon -> .)
    >               reduce using rule 118 (epsilon -> .)
    EQUAL_TO        reduce using rule 118 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 118 (epsilon -> .)
    &               reduce using rule 118 (epsilon -> .)
    |               reduce using rule 118 (epsilon -> .)
    ;               reduce using rule 118 (epsilon -> .)
    ,               reduce using rule 118 (epsilon -> .)
    )               reduce using rule 118 (epsilon -> .)
    ]               reduce using rule 118 (epsilon -> .)
    TO              reduce using rule 118 (epsilon -> .)
    DO              reduce using rule 118 (epsilon -> .)

    np_push_const_char             shift and go to state 159
    epsilon                        shift and go to state 160

state 116

    (9) variable -> ID . np_single_var_process
    (10) variable -> ID . [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> ID . np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (116) np_single_var_process -> . epsilon
    (53) np_fc_1 -> . epsilon
    (118) epsilon -> .

    [               shift and go to state 85
    *               reduce using rule 118 (epsilon -> .)
    /               reduce using rule 118 (epsilon -> .)
    +               reduce using rule 118 (epsilon -> .)
    -               reduce using rule 118 (epsilon -> .)
    <               reduce using rule 118 (epsilon -> .)
    >               reduce using rule 118 (epsilon -> .)
    EQUAL_TO        reduce using rule 118 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 118 (epsilon -> .)
    &               reduce using rule 118 (epsilon -> .)
    |               reduce using rule 118 (epsilon -> .)
    ;               reduce using rule 118 (epsilon -> .)
    ,               reduce using rule 118 (epsilon -> .)
    )               reduce using rule 118 (epsilon -> .)
    ]               reduce using rule 118 (epsilon -> .)
    TO              reduce using rule 118 (epsilon -> .)
    DO              reduce using rule 118 (epsilon -> .)
    (               reduce using rule 118 (epsilon -> .)

    np_single_var_process          shift and go to state 84
    np_fc_1                        shift and go to state 83
    epsilon                        shift and go to state 161

state 117

    (52) func_llamada -> ID np_fc_1 ( . np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (104) np_push_operator_stack -> . epsilon
    (118) epsilon -> .

    (               reduce using rule 118 (epsilon -> .)
    VAL_INT         reduce using rule 118 (epsilon -> .)
    VAL_FLOAT       reduce using rule 118 (epsilon -> .)
    VAL_CHAR        reduce using rule 118 (epsilon -> .)
    ID              reduce using rule 118 (epsilon -> .)
    )               reduce using rule 118 (epsilon -> .)

    np_push_operator_stack         shift and go to state 162
    epsilon                        shift and go to state 119

state 118

    (10) variable -> ID [ np_push_operator_stack . hyper_exp ] np_pop_operator_stack np_array_var_process
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) constant -> . VAL_INT np_push_const_int
    (111) constant -> . VAL_FLOAT np_push_const_float
    (112) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 111
    VAL_INT         shift and go to state 113
    VAL_FLOAT       shift and go to state 114
    VAL_CHAR        shift and go to state 115
    ID              shift and go to state 116

    hyper_exp                      shift and go to state 163
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112

state 119

    (104) np_push_operator_stack -> epsilon .

    (               reduce using rule 104 (np_push_operator_stack -> epsilon .)
    VAL_INT         reduce using rule 104 (np_push_operator_stack -> epsilon .)
    VAL_FLOAT       reduce using rule 104 (np_push_operator_stack -> epsilon .)
    VAL_CHAR        reduce using rule 104 (np_push_operator_stack -> epsilon .)
    ID              reduce using rule 104 (np_push_operator_stack -> epsilon .)
    )               reduce using rule 104 (np_push_operator_stack -> epsilon .)


state 120

    (63) read -> READ ( variable_loop . ) ;

    )               shift and go to state 164


state 121

    (64) variable_loop -> variable . np_add_to_input_counter variable_loop_1
    (67) np_add_to_input_counter -> . epsilon
    (118) epsilon -> .

    ,               reduce using rule 118 (epsilon -> .)
    )               reduce using rule 118 (epsilon -> .)

    np_add_to_input_counter        shift and go to state 165
    epsilon                        shift and go to state 166

state 122

    (68) write -> WRITE ( hyper_exp_loop . ) ;

    )               shift and go to state 167


state 123

    (58) hyper_exp_loop -> hyper_exp . np_add_to_input_counter hyper_exp_loop_1
    (67) np_add_to_input_counter -> . epsilon
    (118) epsilon -> .

    ,               reduce using rule 118 (epsilon -> .)
    )               reduce using rule 118 (epsilon -> .)

    np_add_to_input_counter        shift and go to state 168
    epsilon                        shift and go to state 166

state 124

    (69) decision -> IF ( hyper_exp . ) np_decision_1 THEN { loop_estatuto } decision_else

    )               shift and go to state 169


state 125

    (62) func_return -> RETURN ( hyper_exp . ) ;

    )               shift and go to state 170


state 126

    (78) condicional -> WHILE np_cond_1 ( . hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) constant -> . VAL_INT np_push_const_int
    (111) constant -> . VAL_FLOAT np_push_const_float
    (112) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 111
    VAL_INT         shift and go to state 113
    VAL_FLOAT       shift and go to state 114
    VAL_CHAR        shift and go to state 115
    ID              shift and go to state 116

    hyper_exp                      shift and go to state 171
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112

state 127

    (82) no_condicional -> FOR variable = . hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) constant -> . VAL_INT np_push_const_int
    (111) constant -> . VAL_FLOAT np_push_const_float
    (112) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 111
    VAL_INT         shift and go to state 113
    VAL_FLOAT       shift and go to state 114
    VAL_CHAR        shift and go to state 115
    ID              shift and go to state 116

    variable                       shift and go to state 104
    hyper_exp                      shift and go to state 172
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    func_llamada                   shift and go to state 112

state 128

    (116) np_single_var_process -> epsilon .

    =               reduce using rule 116 (np_single_var_process -> epsilon .)
    ,               reduce using rule 116 (np_single_var_process -> epsilon .)
    )               reduce using rule 116 (np_single_var_process -> epsilon .)


state 129

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro . ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func

    )               shift and go to state 173


state 130

    (34) func_parametro -> parametro .

    )               reduce using rule 34 (func_parametro -> parametro .)


state 131

    (35) func_parametro -> epsilon .

    )               reduce using rule 35 (func_parametro -> epsilon .)


state 132

    (36) parametro -> tipo . ID np_add_param loop_parametro

    ID              shift and go to state 174


state 133

    (15) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ; .

    INT             reduce using rule 15 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    FLOAT           reduce using rule 15 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    CHAR            reduce using rule 15 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    BOOL            reduce using rule 15 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    FUNCTION        reduce using rule 15 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    MAIN            reduce using rule 15 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    {               reduce using rule 15 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)


state 134

    (18) loop_var_decl_mismo_tipo -> , ID . np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo
    (21) np_set_curr_var_name -> . epsilon
    (118) epsilon -> .

    [               reduce using rule 118 (epsilon -> .)
    ,               reduce using rule 118 (epsilon -> .)
    ;               reduce using rule 118 (epsilon -> .)

    np_set_curr_var_name           shift and go to state 175
    epsilon                        shift and go to state 48

state 135

    (16) array_opcional -> [ VAL_INT np_push_const_int ] .

    ,               reduce using rule 16 (array_opcional -> [ VAL_INT np_push_const_int ] .)
    ;               reduce using rule 16 (array_opcional -> [ VAL_INT np_push_const_int ] .)


state 136

    (51) asignacion -> variable = hyper_exp ; .

    ID              reduce using rule 51 (asignacion -> variable = hyper_exp ; .)
    READ            reduce using rule 51 (asignacion -> variable = hyper_exp ; .)
    WRITE           reduce using rule 51 (asignacion -> variable = hyper_exp ; .)
    IF              reduce using rule 51 (asignacion -> variable = hyper_exp ; .)
    RETURN          reduce using rule 51 (asignacion -> variable = hyper_exp ; .)
    WHILE           reduce using rule 51 (asignacion -> variable = hyper_exp ; .)
    FOR             reduce using rule 51 (asignacion -> variable = hyper_exp ; .)
    }               reduce using rule 51 (asignacion -> variable = hyper_exp ; .)


state 137

    (86) hyper_exp -> super_exp hyper_exp_1 .

    ;               reduce using rule 86 (hyper_exp -> super_exp hyper_exp_1 .)
    ,               reduce using rule 86 (hyper_exp -> super_exp hyper_exp_1 .)
    )               reduce using rule 86 (hyper_exp -> super_exp hyper_exp_1 .)
    ]               reduce using rule 86 (hyper_exp -> super_exp hyper_exp_1 .)
    TO              reduce using rule 86 (hyper_exp -> super_exp hyper_exp_1 .)
    DO              reduce using rule 86 (hyper_exp -> super_exp hyper_exp_1 .)


state 138

    (87) hyper_exp_1 -> & . np_push_operator_stack super_exp
    (104) np_push_operator_stack -> . epsilon
    (118) epsilon -> .

    (               reduce using rule 118 (epsilon -> .)
    VAL_INT         reduce using rule 118 (epsilon -> .)
    VAL_FLOAT       reduce using rule 118 (epsilon -> .)
    VAL_CHAR        reduce using rule 118 (epsilon -> .)
    ID              reduce using rule 118 (epsilon -> .)

    np_push_operator_stack         shift and go to state 176
    epsilon                        shift and go to state 119

state 139

    (88) hyper_exp_1 -> | . np_push_operator_stack super_exp
    (104) np_push_operator_stack -> . epsilon
    (118) epsilon -> .

    (               reduce using rule 118 (epsilon -> .)
    VAL_INT         reduce using rule 118 (epsilon -> .)
    VAL_FLOAT       reduce using rule 118 (epsilon -> .)
    VAL_CHAR        reduce using rule 118 (epsilon -> .)
    ID              reduce using rule 118 (epsilon -> .)

    np_push_operator_stack         shift and go to state 177
    epsilon                        shift and go to state 119

state 140

    (89) hyper_exp_1 -> epsilon .

    ;               reduce using rule 89 (hyper_exp_1 -> epsilon .)
    ,               reduce using rule 89 (hyper_exp_1 -> epsilon .)
    )               reduce using rule 89 (hyper_exp_1 -> epsilon .)
    ]               reduce using rule 89 (hyper_exp_1 -> epsilon .)
    TO              reduce using rule 89 (hyper_exp_1 -> epsilon .)
    DO              reduce using rule 89 (hyper_exp_1 -> epsilon .)


state 141

    (90) super_exp -> exp super_exp_1 .

    &               reduce using rule 90 (super_exp -> exp super_exp_1 .)
    |               reduce using rule 90 (super_exp -> exp super_exp_1 .)
    ;               reduce using rule 90 (super_exp -> exp super_exp_1 .)
    ,               reduce using rule 90 (super_exp -> exp super_exp_1 .)
    )               reduce using rule 90 (super_exp -> exp super_exp_1 .)
    ]               reduce using rule 90 (super_exp -> exp super_exp_1 .)
    TO              reduce using rule 90 (super_exp -> exp super_exp_1 .)
    DO              reduce using rule 90 (super_exp -> exp super_exp_1 .)


state 142

    (91) super_exp_1 -> < . np_push_operator_stack exp
    (104) np_push_operator_stack -> . epsilon
    (118) epsilon -> .

    (               reduce using rule 118 (epsilon -> .)
    VAL_INT         reduce using rule 118 (epsilon -> .)
    VAL_FLOAT       reduce using rule 118 (epsilon -> .)
    VAL_CHAR        reduce using rule 118 (epsilon -> .)
    ID              reduce using rule 118 (epsilon -> .)

    np_push_operator_stack         shift and go to state 178
    epsilon                        shift and go to state 119

state 143

    (92) super_exp_1 -> > . np_push_operator_stack exp
    (104) np_push_operator_stack -> . epsilon
    (118) epsilon -> .

    (               reduce using rule 118 (epsilon -> .)
    VAL_INT         reduce using rule 118 (epsilon -> .)
    VAL_FLOAT       reduce using rule 118 (epsilon -> .)
    VAL_CHAR        reduce using rule 118 (epsilon -> .)
    ID              reduce using rule 118 (epsilon -> .)

    np_push_operator_stack         shift and go to state 179
    epsilon                        shift and go to state 119

state 144

    (93) super_exp_1 -> EQUAL_TO . np_push_operator_stack exp
    (104) np_push_operator_stack -> . epsilon
    (118) epsilon -> .

    (               reduce using rule 118 (epsilon -> .)
    VAL_INT         reduce using rule 118 (epsilon -> .)
    VAL_FLOAT       reduce using rule 118 (epsilon -> .)
    VAL_CHAR        reduce using rule 118 (epsilon -> .)
    ID              reduce using rule 118 (epsilon -> .)

    np_push_operator_stack         shift and go to state 180
    epsilon                        shift and go to state 119

state 145

    (94) super_exp_1 -> NOT_EQUAL_TO . np_push_operator_stack exp
    (104) np_push_operator_stack -> . epsilon
    (118) epsilon -> .

    (               reduce using rule 118 (epsilon -> .)
    VAL_INT         reduce using rule 118 (epsilon -> .)
    VAL_FLOAT       reduce using rule 118 (epsilon -> .)
    VAL_CHAR        reduce using rule 118 (epsilon -> .)
    ID              reduce using rule 118 (epsilon -> .)

    np_push_operator_stack         shift and go to state 181
    epsilon                        shift and go to state 119

state 146

    (95) super_exp_1 -> epsilon .

    &               reduce using rule 95 (super_exp_1 -> epsilon .)
    |               reduce using rule 95 (super_exp_1 -> epsilon .)
    ;               reduce using rule 95 (super_exp_1 -> epsilon .)
    ,               reduce using rule 95 (super_exp_1 -> epsilon .)
    )               reduce using rule 95 (super_exp_1 -> epsilon .)
    ]               reduce using rule 95 (super_exp_1 -> epsilon .)
    TO              reduce using rule 95 (super_exp_1 -> epsilon .)
    DO              reduce using rule 95 (super_exp_1 -> epsilon .)


state 147

    (96) exp -> term exp_1 .

    <               reduce using rule 96 (exp -> term exp_1 .)
    >               reduce using rule 96 (exp -> term exp_1 .)
    EQUAL_TO        reduce using rule 96 (exp -> term exp_1 .)
    NOT_EQUAL_TO    reduce using rule 96 (exp -> term exp_1 .)
    &               reduce using rule 96 (exp -> term exp_1 .)
    |               reduce using rule 96 (exp -> term exp_1 .)
    ;               reduce using rule 96 (exp -> term exp_1 .)
    ,               reduce using rule 96 (exp -> term exp_1 .)
    )               reduce using rule 96 (exp -> term exp_1 .)
    ]               reduce using rule 96 (exp -> term exp_1 .)
    TO              reduce using rule 96 (exp -> term exp_1 .)
    DO              reduce using rule 96 (exp -> term exp_1 .)


state 148

    (97) exp_1 -> + . np_push_operator_stack term
    (104) np_push_operator_stack -> . epsilon
    (118) epsilon -> .

    (               reduce using rule 118 (epsilon -> .)
    VAL_INT         reduce using rule 118 (epsilon -> .)
    VAL_FLOAT       reduce using rule 118 (epsilon -> .)
    VAL_CHAR        reduce using rule 118 (epsilon -> .)
    ID              reduce using rule 118 (epsilon -> .)

    np_push_operator_stack         shift and go to state 182
    epsilon                        shift and go to state 119

state 149

    (98) exp_1 -> - . np_push_operator_stack term
    (104) np_push_operator_stack -> . epsilon
    (118) epsilon -> .

    (               reduce using rule 118 (epsilon -> .)
    VAL_INT         reduce using rule 118 (epsilon -> .)
    VAL_FLOAT       reduce using rule 118 (epsilon -> .)
    VAL_CHAR        reduce using rule 118 (epsilon -> .)
    ID              reduce using rule 118 (epsilon -> .)

    np_push_operator_stack         shift and go to state 183
    epsilon                        shift and go to state 119

state 150

    (99) exp_1 -> epsilon .

    <               reduce using rule 99 (exp_1 -> epsilon .)
    >               reduce using rule 99 (exp_1 -> epsilon .)
    EQUAL_TO        reduce using rule 99 (exp_1 -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 99 (exp_1 -> epsilon .)
    &               reduce using rule 99 (exp_1 -> epsilon .)
    |               reduce using rule 99 (exp_1 -> epsilon .)
    ;               reduce using rule 99 (exp_1 -> epsilon .)
    ,               reduce using rule 99 (exp_1 -> epsilon .)
    )               reduce using rule 99 (exp_1 -> epsilon .)
    ]               reduce using rule 99 (exp_1 -> epsilon .)
    TO              reduce using rule 99 (exp_1 -> epsilon .)
    DO              reduce using rule 99 (exp_1 -> epsilon .)


state 151

    (100) term -> factor term_1 .

    +               reduce using rule 100 (term -> factor term_1 .)
    -               reduce using rule 100 (term -> factor term_1 .)
    <               reduce using rule 100 (term -> factor term_1 .)
    >               reduce using rule 100 (term -> factor term_1 .)
    EQUAL_TO        reduce using rule 100 (term -> factor term_1 .)
    NOT_EQUAL_TO    reduce using rule 100 (term -> factor term_1 .)
    &               reduce using rule 100 (term -> factor term_1 .)
    |               reduce using rule 100 (term -> factor term_1 .)
    ;               reduce using rule 100 (term -> factor term_1 .)
    ,               reduce using rule 100 (term -> factor term_1 .)
    )               reduce using rule 100 (term -> factor term_1 .)
    ]               reduce using rule 100 (term -> factor term_1 .)
    TO              reduce using rule 100 (term -> factor term_1 .)
    DO              reduce using rule 100 (term -> factor term_1 .)


state 152

    (101) term_1 -> * . np_push_operator_stack factor
    (104) np_push_operator_stack -> . epsilon
    (118) epsilon -> .

    (               reduce using rule 118 (epsilon -> .)
    VAL_INT         reduce using rule 118 (epsilon -> .)
    VAL_FLOAT       reduce using rule 118 (epsilon -> .)
    VAL_CHAR        reduce using rule 118 (epsilon -> .)
    ID              reduce using rule 118 (epsilon -> .)

    np_push_operator_stack         shift and go to state 184
    epsilon                        shift and go to state 119

state 153

    (102) term_1 -> / . np_push_operator_stack factor
    (104) np_push_operator_stack -> . epsilon
    (118) epsilon -> .

    (               reduce using rule 118 (epsilon -> .)
    VAL_INT         reduce using rule 118 (epsilon -> .)
    VAL_FLOAT       reduce using rule 118 (epsilon -> .)
    VAL_CHAR        reduce using rule 118 (epsilon -> .)
    ID              reduce using rule 118 (epsilon -> .)

    np_push_operator_stack         shift and go to state 185
    epsilon                        shift and go to state 119

state 154

    (103) term_1 -> epsilon .

    +               reduce using rule 103 (term_1 -> epsilon .)
    -               reduce using rule 103 (term_1 -> epsilon .)
    <               reduce using rule 103 (term_1 -> epsilon .)
    >               reduce using rule 103 (term_1 -> epsilon .)
    EQUAL_TO        reduce using rule 103 (term_1 -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 103 (term_1 -> epsilon .)
    &               reduce using rule 103 (term_1 -> epsilon .)
    |               reduce using rule 103 (term_1 -> epsilon .)
    ;               reduce using rule 103 (term_1 -> epsilon .)
    ,               reduce using rule 103 (term_1 -> epsilon .)
    )               reduce using rule 103 (term_1 -> epsilon .)
    ]               reduce using rule 103 (term_1 -> epsilon .)
    TO              reduce using rule 103 (term_1 -> epsilon .)
    DO              reduce using rule 103 (term_1 -> epsilon .)


state 155

    (108) factor -> ( hyper_exp . )

    )               shift and go to state 186


state 156

    (110) constant -> VAL_INT np_push_const_int .

    *               reduce using rule 110 (constant -> VAL_INT np_push_const_int .)
    /               reduce using rule 110 (constant -> VAL_INT np_push_const_int .)
    +               reduce using rule 110 (constant -> VAL_INT np_push_const_int .)
    -               reduce using rule 110 (constant -> VAL_INT np_push_const_int .)
    <               reduce using rule 110 (constant -> VAL_INT np_push_const_int .)
    >               reduce using rule 110 (constant -> VAL_INT np_push_const_int .)
    EQUAL_TO        reduce using rule 110 (constant -> VAL_INT np_push_const_int .)
    NOT_EQUAL_TO    reduce using rule 110 (constant -> VAL_INT np_push_const_int .)
    &               reduce using rule 110 (constant -> VAL_INT np_push_const_int .)
    |               reduce using rule 110 (constant -> VAL_INT np_push_const_int .)
    ;               reduce using rule 110 (constant -> VAL_INT np_push_const_int .)
    ,               reduce using rule 110 (constant -> VAL_INT np_push_const_int .)
    )               reduce using rule 110 (constant -> VAL_INT np_push_const_int .)
    ]               reduce using rule 110 (constant -> VAL_INT np_push_const_int .)
    TO              reduce using rule 110 (constant -> VAL_INT np_push_const_int .)
    DO              reduce using rule 110 (constant -> VAL_INT np_push_const_int .)


state 157

    (111) constant -> VAL_FLOAT np_push_const_float .

    *               reduce using rule 111 (constant -> VAL_FLOAT np_push_const_float .)
    /               reduce using rule 111 (constant -> VAL_FLOAT np_push_const_float .)
    +               reduce using rule 111 (constant -> VAL_FLOAT np_push_const_float .)
    -               reduce using rule 111 (constant -> VAL_FLOAT np_push_const_float .)
    <               reduce using rule 111 (constant -> VAL_FLOAT np_push_const_float .)
    >               reduce using rule 111 (constant -> VAL_FLOAT np_push_const_float .)
    EQUAL_TO        reduce using rule 111 (constant -> VAL_FLOAT np_push_const_float .)
    NOT_EQUAL_TO    reduce using rule 111 (constant -> VAL_FLOAT np_push_const_float .)
    &               reduce using rule 111 (constant -> VAL_FLOAT np_push_const_float .)
    |               reduce using rule 111 (constant -> VAL_FLOAT np_push_const_float .)
    ;               reduce using rule 111 (constant -> VAL_FLOAT np_push_const_float .)
    ,               reduce using rule 111 (constant -> VAL_FLOAT np_push_const_float .)
    )               reduce using rule 111 (constant -> VAL_FLOAT np_push_const_float .)
    ]               reduce using rule 111 (constant -> VAL_FLOAT np_push_const_float .)
    TO              reduce using rule 111 (constant -> VAL_FLOAT np_push_const_float .)
    DO              reduce using rule 111 (constant -> VAL_FLOAT np_push_const_float .)


state 158

    (114) np_push_const_float -> epsilon .

    *               reduce using rule 114 (np_push_const_float -> epsilon .)
    /               reduce using rule 114 (np_push_const_float -> epsilon .)
    +               reduce using rule 114 (np_push_const_float -> epsilon .)
    -               reduce using rule 114 (np_push_const_float -> epsilon .)
    <               reduce using rule 114 (np_push_const_float -> epsilon .)
    >               reduce using rule 114 (np_push_const_float -> epsilon .)
    EQUAL_TO        reduce using rule 114 (np_push_const_float -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 114 (np_push_const_float -> epsilon .)
    &               reduce using rule 114 (np_push_const_float -> epsilon .)
    |               reduce using rule 114 (np_push_const_float -> epsilon .)
    ;               reduce using rule 114 (np_push_const_float -> epsilon .)
    ,               reduce using rule 114 (np_push_const_float -> epsilon .)
    )               reduce using rule 114 (np_push_const_float -> epsilon .)
    ]               reduce using rule 114 (np_push_const_float -> epsilon .)
    TO              reduce using rule 114 (np_push_const_float -> epsilon .)
    DO              reduce using rule 114 (np_push_const_float -> epsilon .)


state 159

    (112) constant -> VAL_CHAR np_push_const_char .

    *               reduce using rule 112 (constant -> VAL_CHAR np_push_const_char .)
    /               reduce using rule 112 (constant -> VAL_CHAR np_push_const_char .)
    +               reduce using rule 112 (constant -> VAL_CHAR np_push_const_char .)
    -               reduce using rule 112 (constant -> VAL_CHAR np_push_const_char .)
    <               reduce using rule 112 (constant -> VAL_CHAR np_push_const_char .)
    >               reduce using rule 112 (constant -> VAL_CHAR np_push_const_char .)
    EQUAL_TO        reduce using rule 112 (constant -> VAL_CHAR np_push_const_char .)
    NOT_EQUAL_TO    reduce using rule 112 (constant -> VAL_CHAR np_push_const_char .)
    &               reduce using rule 112 (constant -> VAL_CHAR np_push_const_char .)
    |               reduce using rule 112 (constant -> VAL_CHAR np_push_const_char .)
    ;               reduce using rule 112 (constant -> VAL_CHAR np_push_const_char .)
    ,               reduce using rule 112 (constant -> VAL_CHAR np_push_const_char .)
    )               reduce using rule 112 (constant -> VAL_CHAR np_push_const_char .)
    ]               reduce using rule 112 (constant -> VAL_CHAR np_push_const_char .)
    TO              reduce using rule 112 (constant -> VAL_CHAR np_push_const_char .)
    DO              reduce using rule 112 (constant -> VAL_CHAR np_push_const_char .)


state 160

    (115) np_push_const_char -> epsilon .

    *               reduce using rule 115 (np_push_const_char -> epsilon .)
    /               reduce using rule 115 (np_push_const_char -> epsilon .)
    +               reduce using rule 115 (np_push_const_char -> epsilon .)
    -               reduce using rule 115 (np_push_const_char -> epsilon .)
    <               reduce using rule 115 (np_push_const_char -> epsilon .)
    >               reduce using rule 115 (np_push_const_char -> epsilon .)
    EQUAL_TO        reduce using rule 115 (np_push_const_char -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 115 (np_push_const_char -> epsilon .)
    &               reduce using rule 115 (np_push_const_char -> epsilon .)
    |               reduce using rule 115 (np_push_const_char -> epsilon .)
    ;               reduce using rule 115 (np_push_const_char -> epsilon .)
    ,               reduce using rule 115 (np_push_const_char -> epsilon .)
    )               reduce using rule 115 (np_push_const_char -> epsilon .)
    ]               reduce using rule 115 (np_push_const_char -> epsilon .)
    TO              reduce using rule 115 (np_push_const_char -> epsilon .)
    DO              reduce using rule 115 (np_push_const_char -> epsilon .)


state 161

    (116) np_single_var_process -> epsilon .
    (53) np_fc_1 -> epsilon .

    *               reduce using rule 116 (np_single_var_process -> epsilon .)
    /               reduce using rule 116 (np_single_var_process -> epsilon .)
    +               reduce using rule 116 (np_single_var_process -> epsilon .)
    -               reduce using rule 116 (np_single_var_process -> epsilon .)
    <               reduce using rule 116 (np_single_var_process -> epsilon .)
    >               reduce using rule 116 (np_single_var_process -> epsilon .)
    EQUAL_TO        reduce using rule 116 (np_single_var_process -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 116 (np_single_var_process -> epsilon .)
    &               reduce using rule 116 (np_single_var_process -> epsilon .)
    |               reduce using rule 116 (np_single_var_process -> epsilon .)
    ;               reduce using rule 116 (np_single_var_process -> epsilon .)
    ,               reduce using rule 116 (np_single_var_process -> epsilon .)
    )               reduce using rule 116 (np_single_var_process -> epsilon .)
    ]               reduce using rule 116 (np_single_var_process -> epsilon .)
    TO              reduce using rule 116 (np_single_var_process -> epsilon .)
    DO              reduce using rule 116 (np_single_var_process -> epsilon .)
    (               reduce using rule 53 (np_fc_1 -> epsilon .)


state 162

    (52) func_llamada -> ID np_fc_1 ( np_push_operator_stack . argumento_loop ) np_pop_operator_stack
    (54) argumento_loop -> . hyper_exp np_fc_2 argumento_loop_1
    (55) argumento_loop -> . epsilon
    (86) hyper_exp -> . super_exp hyper_exp_1
    (118) epsilon -> .
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) constant -> . VAL_INT np_push_const_int
    (111) constant -> . VAL_FLOAT np_push_const_float
    (112) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    )               reduce using rule 118 (epsilon -> .)
    (               shift and go to state 111
    VAL_INT         shift and go to state 113
    VAL_FLOAT       shift and go to state 114
    VAL_CHAR        shift and go to state 115
    ID              shift and go to state 116

    argumento_loop                 shift and go to state 187
    hyper_exp                      shift and go to state 188
    epsilon                        shift and go to state 189
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112

state 163

    (10) variable -> ID [ np_push_operator_stack hyper_exp . ] np_pop_operator_stack np_array_var_process

    ]               shift and go to state 190


state 164

    (63) read -> READ ( variable_loop ) . ;

    ;               shift and go to state 191


state 165

    (64) variable_loop -> variable np_add_to_input_counter . variable_loop_1
    (65) variable_loop_1 -> . , variable np_add_to_input_counter variable_loop_1
    (66) variable_loop_1 -> . epsilon
    (118) epsilon -> .

    ,               shift and go to state 193
    )               reduce using rule 118 (epsilon -> .)

    variable_loop_1                shift and go to state 192
    epsilon                        shift and go to state 194

state 166

    (67) np_add_to_input_counter -> epsilon .

    ,               reduce using rule 67 (np_add_to_input_counter -> epsilon .)
    )               reduce using rule 67 (np_add_to_input_counter -> epsilon .)


state 167

    (68) write -> WRITE ( hyper_exp_loop ) . ;

    ;               shift and go to state 195


state 168

    (58) hyper_exp_loop -> hyper_exp np_add_to_input_counter . hyper_exp_loop_1
    (59) hyper_exp_loop_1 -> . , hyper_exp np_add_to_input_counter hyper_exp_loop_1
    (60) hyper_exp_loop_1 -> . epsilon
    (118) epsilon -> .

    ,               shift and go to state 197
    )               reduce using rule 118 (epsilon -> .)

    hyper_exp_loop_1               shift and go to state 196
    epsilon                        shift and go to state 198

state 169

    (69) decision -> IF ( hyper_exp ) . np_decision_1 THEN { loop_estatuto } decision_else
    (72) np_decision_1 -> . epsilon
    (118) epsilon -> .

    THEN            reduce using rule 118 (epsilon -> .)

    np_decision_1                  shift and go to state 199
    epsilon                        shift and go to state 200

state 170

    (62) func_return -> RETURN ( hyper_exp ) . ;

    ;               shift and go to state 201


state 171

    (78) condicional -> WHILE np_cond_1 ( hyper_exp . ) np_cond_2 DO { loop_estatuto } np_cond_3

    )               shift and go to state 202


state 172

    (82) no_condicional -> FOR variable = hyper_exp . np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }
    (83) np_for_1 -> . epsilon
    (118) epsilon -> .

    TO              reduce using rule 118 (epsilon -> .)

    np_for_1                       shift and go to state 203
    epsilon                        shift and go to state 204

state 173

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) . ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func

    ;               shift and go to state 205


state 174

    (36) parametro -> tipo ID . np_add_param loop_parametro
    (39) np_add_param -> . epsilon
    (118) epsilon -> .

    ,               reduce using rule 118 (epsilon -> .)
    )               reduce using rule 118 (epsilon -> .)

    np_add_param                   shift and go to state 206
    epsilon                        shift and go to state 207

state 175

    (18) loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name . array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo
    (16) array_opcional -> . [ VAL_INT np_push_const_int ]
    (17) array_opcional -> . epsilon
    (118) epsilon -> .

    [               shift and go to state 53
    ,               reduce using rule 118 (epsilon -> .)
    ;               reduce using rule 118 (epsilon -> .)

    array_opcional                 shift and go to state 208
    epsilon                        shift and go to state 54

state 176

    (87) hyper_exp_1 -> & np_push_operator_stack . super_exp
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) constant -> . VAL_INT np_push_const_int
    (111) constant -> . VAL_FLOAT np_push_const_float
    (112) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 111
    VAL_INT         shift and go to state 113
    VAL_FLOAT       shift and go to state 114
    VAL_CHAR        shift and go to state 115
    ID              shift and go to state 116

    super_exp                      shift and go to state 209
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112

state 177

    (88) hyper_exp_1 -> | np_push_operator_stack . super_exp
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) constant -> . VAL_INT np_push_const_int
    (111) constant -> . VAL_FLOAT np_push_const_float
    (112) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 111
    VAL_INT         shift and go to state 113
    VAL_FLOAT       shift and go to state 114
    VAL_CHAR        shift and go to state 115
    ID              shift and go to state 116

    super_exp                      shift and go to state 210
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112

state 178

    (91) super_exp_1 -> < np_push_operator_stack . exp
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) constant -> . VAL_INT np_push_const_int
    (111) constant -> . VAL_FLOAT np_push_const_float
    (112) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 111
    VAL_INT         shift and go to state 113
    VAL_FLOAT       shift and go to state 114
    VAL_CHAR        shift and go to state 115
    ID              shift and go to state 116

    exp                            shift and go to state 211
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112

state 179

    (92) super_exp_1 -> > np_push_operator_stack . exp
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) constant -> . VAL_INT np_push_const_int
    (111) constant -> . VAL_FLOAT np_push_const_float
    (112) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 111
    VAL_INT         shift and go to state 113
    VAL_FLOAT       shift and go to state 114
    VAL_CHAR        shift and go to state 115
    ID              shift and go to state 116

    exp                            shift and go to state 212
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112

state 180

    (93) super_exp_1 -> EQUAL_TO np_push_operator_stack . exp
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) constant -> . VAL_INT np_push_const_int
    (111) constant -> . VAL_FLOAT np_push_const_float
    (112) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 111
    VAL_INT         shift and go to state 113
    VAL_FLOAT       shift and go to state 114
    VAL_CHAR        shift and go to state 115
    ID              shift and go to state 116

    exp                            shift and go to state 213
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112

state 181

    (94) super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack . exp
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) constant -> . VAL_INT np_push_const_int
    (111) constant -> . VAL_FLOAT np_push_const_float
    (112) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 111
    VAL_INT         shift and go to state 113
    VAL_FLOAT       shift and go to state 114
    VAL_CHAR        shift and go to state 115
    ID              shift and go to state 116

    exp                            shift and go to state 214
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112

state 182

    (97) exp_1 -> + np_push_operator_stack . term
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) constant -> . VAL_INT np_push_const_int
    (111) constant -> . VAL_FLOAT np_push_const_float
    (112) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 111
    VAL_INT         shift and go to state 113
    VAL_FLOAT       shift and go to state 114
    VAL_CHAR        shift and go to state 115
    ID              shift and go to state 116

    term                           shift and go to state 215
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112

state 183

    (98) exp_1 -> - np_push_operator_stack . term
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) constant -> . VAL_INT np_push_const_int
    (111) constant -> . VAL_FLOAT np_push_const_float
    (112) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 111
    VAL_INT         shift and go to state 113
    VAL_FLOAT       shift and go to state 114
    VAL_CHAR        shift and go to state 115
    ID              shift and go to state 116

    term                           shift and go to state 216
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112

state 184

    (101) term_1 -> * np_push_operator_stack . factor
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) constant -> . VAL_INT np_push_const_int
    (111) constant -> . VAL_FLOAT np_push_const_float
    (112) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 111
    VAL_INT         shift and go to state 113
    VAL_FLOAT       shift and go to state 114
    VAL_CHAR        shift and go to state 115
    ID              shift and go to state 116

    factor                         shift and go to state 217
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112

state 185

    (102) term_1 -> / np_push_operator_stack . factor
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) constant -> . VAL_INT np_push_const_int
    (111) constant -> . VAL_FLOAT np_push_const_float
    (112) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 111
    VAL_INT         shift and go to state 113
    VAL_FLOAT       shift and go to state 114
    VAL_CHAR        shift and go to state 115
    ID              shift and go to state 116

    factor                         shift and go to state 218
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112

state 186

    (108) factor -> ( hyper_exp ) .

    *               reduce using rule 108 (factor -> ( hyper_exp ) .)
    /               reduce using rule 108 (factor -> ( hyper_exp ) .)
    +               reduce using rule 108 (factor -> ( hyper_exp ) .)
    -               reduce using rule 108 (factor -> ( hyper_exp ) .)
    <               reduce using rule 108 (factor -> ( hyper_exp ) .)
    >               reduce using rule 108 (factor -> ( hyper_exp ) .)
    EQUAL_TO        reduce using rule 108 (factor -> ( hyper_exp ) .)
    NOT_EQUAL_TO    reduce using rule 108 (factor -> ( hyper_exp ) .)
    &               reduce using rule 108 (factor -> ( hyper_exp ) .)
    |               reduce using rule 108 (factor -> ( hyper_exp ) .)
    ;               reduce using rule 108 (factor -> ( hyper_exp ) .)
    ,               reduce using rule 108 (factor -> ( hyper_exp ) .)
    )               reduce using rule 108 (factor -> ( hyper_exp ) .)
    ]               reduce using rule 108 (factor -> ( hyper_exp ) .)
    TO              reduce using rule 108 (factor -> ( hyper_exp ) .)
    DO              reduce using rule 108 (factor -> ( hyper_exp ) .)


state 187

    (52) func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop . ) np_pop_operator_stack

    )               shift and go to state 219


state 188

    (54) argumento_loop -> hyper_exp . np_fc_2 argumento_loop_1
    (61) np_fc_2 -> . epsilon
    (118) epsilon -> .

    ,               reduce using rule 118 (epsilon -> .)
    )               reduce using rule 118 (epsilon -> .)

    np_fc_2                        shift and go to state 220
    epsilon                        shift and go to state 221

state 189

    (55) argumento_loop -> epsilon .

    )               reduce using rule 55 (argumento_loop -> epsilon .)


state 190

    (10) variable -> ID [ np_push_operator_stack hyper_exp ] . np_pop_operator_stack np_array_var_process
    (105) np_pop_operator_stack -> . epsilon
    (118) epsilon -> .

    =               reduce using rule 118 (epsilon -> .)
    *               reduce using rule 118 (epsilon -> .)
    /               reduce using rule 118 (epsilon -> .)
    +               reduce using rule 118 (epsilon -> .)
    -               reduce using rule 118 (epsilon -> .)
    <               reduce using rule 118 (epsilon -> .)
    >               reduce using rule 118 (epsilon -> .)
    EQUAL_TO        reduce using rule 118 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 118 (epsilon -> .)
    &               reduce using rule 118 (epsilon -> .)
    |               reduce using rule 118 (epsilon -> .)
    ;               reduce using rule 118 (epsilon -> .)
    ,               reduce using rule 118 (epsilon -> .)
    )               reduce using rule 118 (epsilon -> .)
    ]               reduce using rule 118 (epsilon -> .)
    TO              reduce using rule 118 (epsilon -> .)
    DO              reduce using rule 118 (epsilon -> .)

    np_pop_operator_stack          shift and go to state 222
    epsilon                        shift and go to state 223

state 191

    (63) read -> READ ( variable_loop ) ; .

    ID              reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    READ            reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    WRITE           reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    IF              reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    RETURN          reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    WHILE           reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    FOR             reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    }               reduce using rule 63 (read -> READ ( variable_loop ) ; .)


state 192

    (64) variable_loop -> variable np_add_to_input_counter variable_loop_1 .

    )               reduce using rule 64 (variable_loop -> variable np_add_to_input_counter variable_loop_1 .)


state 193

    (65) variable_loop_1 -> , . variable np_add_to_input_counter variable_loop_1
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process

    ID              shift and go to state 94

    variable                       shift and go to state 224

state 194

    (66) variable_loop_1 -> epsilon .

    )               reduce using rule 66 (variable_loop_1 -> epsilon .)


state 195

    (68) write -> WRITE ( hyper_exp_loop ) ; .

    ID              reduce using rule 68 (write -> WRITE ( hyper_exp_loop ) ; .)
    READ            reduce using rule 68 (write -> WRITE ( hyper_exp_loop ) ; .)
    WRITE           reduce using rule 68 (write -> WRITE ( hyper_exp_loop ) ; .)
    IF              reduce using rule 68 (write -> WRITE ( hyper_exp_loop ) ; .)
    RETURN          reduce using rule 68 (write -> WRITE ( hyper_exp_loop ) ; .)
    WHILE           reduce using rule 68 (write -> WRITE ( hyper_exp_loop ) ; .)
    FOR             reduce using rule 68 (write -> WRITE ( hyper_exp_loop ) ; .)
    }               reduce using rule 68 (write -> WRITE ( hyper_exp_loop ) ; .)


state 196

    (58) hyper_exp_loop -> hyper_exp np_add_to_input_counter hyper_exp_loop_1 .

    )               reduce using rule 58 (hyper_exp_loop -> hyper_exp np_add_to_input_counter hyper_exp_loop_1 .)


state 197

    (59) hyper_exp_loop_1 -> , . hyper_exp np_add_to_input_counter hyper_exp_loop_1
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) constant -> . VAL_INT np_push_const_int
    (111) constant -> . VAL_FLOAT np_push_const_float
    (112) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 111
    VAL_INT         shift and go to state 113
    VAL_FLOAT       shift and go to state 114
    VAL_CHAR        shift and go to state 115
    ID              shift and go to state 116

    hyper_exp                      shift and go to state 225
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112

state 198

    (60) hyper_exp_loop_1 -> epsilon .

    )               reduce using rule 60 (hyper_exp_loop_1 -> epsilon .)


state 199

    (69) decision -> IF ( hyper_exp ) np_decision_1 . THEN { loop_estatuto } decision_else

    THEN            shift and go to state 226


state 200

    (72) np_decision_1 -> epsilon .

    THEN            reduce using rule 72 (np_decision_1 -> epsilon .)


state 201

    (62) func_return -> RETURN ( hyper_exp ) ; .

    ID              reduce using rule 62 (func_return -> RETURN ( hyper_exp ) ; .)
    READ            reduce using rule 62 (func_return -> RETURN ( hyper_exp ) ; .)
    WRITE           reduce using rule 62 (func_return -> RETURN ( hyper_exp ) ; .)
    IF              reduce using rule 62 (func_return -> RETURN ( hyper_exp ) ; .)
    RETURN          reduce using rule 62 (func_return -> RETURN ( hyper_exp ) ; .)
    WHILE           reduce using rule 62 (func_return -> RETURN ( hyper_exp ) ; .)
    FOR             reduce using rule 62 (func_return -> RETURN ( hyper_exp ) ; .)
    }               reduce using rule 62 (func_return -> RETURN ( hyper_exp ) ; .)


state 202

    (78) condicional -> WHILE np_cond_1 ( hyper_exp ) . np_cond_2 DO { loop_estatuto } np_cond_3
    (80) np_cond_2 -> . epsilon
    (118) epsilon -> .

    DO              reduce using rule 118 (epsilon -> .)

    np_cond_2                      shift and go to state 227
    epsilon                        shift and go to state 228

state 203

    (82) no_condicional -> FOR variable = hyper_exp np_for_1 . TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    TO              shift and go to state 229


state 204

    (83) np_for_1 -> epsilon .

    TO              reduce using rule 83 (np_for_1 -> epsilon .)


state 205

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; . var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (7) var_opcional -> . var_declaracion
    (8) var_opcional -> . epsilon
    (11) var_declaracion -> . VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion
    (118) epsilon -> .

    VARS            shift and go to state 12
    {               reduce using rule 118 (epsilon -> .)

    var_opcional                   shift and go to state 230
    var_declaracion                shift and go to state 10
    epsilon                        shift and go to state 11

state 206

    (36) parametro -> tipo ID np_add_param . loop_parametro
    (37) loop_parametro -> . , tipo ID np_add_param loop_parametro
    (38) loop_parametro -> . epsilon
    (118) epsilon -> .

    ,               shift and go to state 232
    )               reduce using rule 118 (epsilon -> .)

    loop_parametro                 shift and go to state 231
    epsilon                        shift and go to state 233

state 207

    (39) np_add_param -> epsilon .

    ,               reduce using rule 39 (np_add_param -> epsilon .)
    )               reduce using rule 39 (np_add_param -> epsilon .)


state 208

    (18) loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name array_opcional . np_add_var_to_varstable loop_var_decl_mismo_tipo
    (22) np_add_var_to_varstable -> . epsilon
    (118) epsilon -> .

    ,               reduce using rule 118 (epsilon -> .)
    ;               reduce using rule 118 (epsilon -> .)

    np_add_var_to_varstable        shift and go to state 234
    epsilon                        shift and go to state 77

state 209

    (87) hyper_exp_1 -> & np_push_operator_stack super_exp .

    ;               reduce using rule 87 (hyper_exp_1 -> & np_push_operator_stack super_exp .)
    ,               reduce using rule 87 (hyper_exp_1 -> & np_push_operator_stack super_exp .)
    )               reduce using rule 87 (hyper_exp_1 -> & np_push_operator_stack super_exp .)
    ]               reduce using rule 87 (hyper_exp_1 -> & np_push_operator_stack super_exp .)
    TO              reduce using rule 87 (hyper_exp_1 -> & np_push_operator_stack super_exp .)
    DO              reduce using rule 87 (hyper_exp_1 -> & np_push_operator_stack super_exp .)


state 210

    (88) hyper_exp_1 -> | np_push_operator_stack super_exp .

    ;               reduce using rule 88 (hyper_exp_1 -> | np_push_operator_stack super_exp .)
    ,               reduce using rule 88 (hyper_exp_1 -> | np_push_operator_stack super_exp .)
    )               reduce using rule 88 (hyper_exp_1 -> | np_push_operator_stack super_exp .)
    ]               reduce using rule 88 (hyper_exp_1 -> | np_push_operator_stack super_exp .)
    TO              reduce using rule 88 (hyper_exp_1 -> | np_push_operator_stack super_exp .)
    DO              reduce using rule 88 (hyper_exp_1 -> | np_push_operator_stack super_exp .)


state 211

    (91) super_exp_1 -> < np_push_operator_stack exp .

    &               reduce using rule 91 (super_exp_1 -> < np_push_operator_stack exp .)
    |               reduce using rule 91 (super_exp_1 -> < np_push_operator_stack exp .)
    ;               reduce using rule 91 (super_exp_1 -> < np_push_operator_stack exp .)
    ,               reduce using rule 91 (super_exp_1 -> < np_push_operator_stack exp .)
    )               reduce using rule 91 (super_exp_1 -> < np_push_operator_stack exp .)
    ]               reduce using rule 91 (super_exp_1 -> < np_push_operator_stack exp .)
    TO              reduce using rule 91 (super_exp_1 -> < np_push_operator_stack exp .)
    DO              reduce using rule 91 (super_exp_1 -> < np_push_operator_stack exp .)


state 212

    (92) super_exp_1 -> > np_push_operator_stack exp .

    &               reduce using rule 92 (super_exp_1 -> > np_push_operator_stack exp .)
    |               reduce using rule 92 (super_exp_1 -> > np_push_operator_stack exp .)
    ;               reduce using rule 92 (super_exp_1 -> > np_push_operator_stack exp .)
    ,               reduce using rule 92 (super_exp_1 -> > np_push_operator_stack exp .)
    )               reduce using rule 92 (super_exp_1 -> > np_push_operator_stack exp .)
    ]               reduce using rule 92 (super_exp_1 -> > np_push_operator_stack exp .)
    TO              reduce using rule 92 (super_exp_1 -> > np_push_operator_stack exp .)
    DO              reduce using rule 92 (super_exp_1 -> > np_push_operator_stack exp .)


state 213

    (93) super_exp_1 -> EQUAL_TO np_push_operator_stack exp .

    &               reduce using rule 93 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    |               reduce using rule 93 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    ;               reduce using rule 93 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    ,               reduce using rule 93 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    )               reduce using rule 93 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    ]               reduce using rule 93 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    TO              reduce using rule 93 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    DO              reduce using rule 93 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)


state 214

    (94) super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .

    &               reduce using rule 94 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    |               reduce using rule 94 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    ;               reduce using rule 94 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    ,               reduce using rule 94 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    )               reduce using rule 94 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    ]               reduce using rule 94 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    TO              reduce using rule 94 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    DO              reduce using rule 94 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)


state 215

    (97) exp_1 -> + np_push_operator_stack term .

    <               reduce using rule 97 (exp_1 -> + np_push_operator_stack term .)
    >               reduce using rule 97 (exp_1 -> + np_push_operator_stack term .)
    EQUAL_TO        reduce using rule 97 (exp_1 -> + np_push_operator_stack term .)
    NOT_EQUAL_TO    reduce using rule 97 (exp_1 -> + np_push_operator_stack term .)
    &               reduce using rule 97 (exp_1 -> + np_push_operator_stack term .)
    |               reduce using rule 97 (exp_1 -> + np_push_operator_stack term .)
    ;               reduce using rule 97 (exp_1 -> + np_push_operator_stack term .)
    ,               reduce using rule 97 (exp_1 -> + np_push_operator_stack term .)
    )               reduce using rule 97 (exp_1 -> + np_push_operator_stack term .)
    ]               reduce using rule 97 (exp_1 -> + np_push_operator_stack term .)
    TO              reduce using rule 97 (exp_1 -> + np_push_operator_stack term .)
    DO              reduce using rule 97 (exp_1 -> + np_push_operator_stack term .)


state 216

    (98) exp_1 -> - np_push_operator_stack term .

    <               reduce using rule 98 (exp_1 -> - np_push_operator_stack term .)
    >               reduce using rule 98 (exp_1 -> - np_push_operator_stack term .)
    EQUAL_TO        reduce using rule 98 (exp_1 -> - np_push_operator_stack term .)
    NOT_EQUAL_TO    reduce using rule 98 (exp_1 -> - np_push_operator_stack term .)
    &               reduce using rule 98 (exp_1 -> - np_push_operator_stack term .)
    |               reduce using rule 98 (exp_1 -> - np_push_operator_stack term .)
    ;               reduce using rule 98 (exp_1 -> - np_push_operator_stack term .)
    ,               reduce using rule 98 (exp_1 -> - np_push_operator_stack term .)
    )               reduce using rule 98 (exp_1 -> - np_push_operator_stack term .)
    ]               reduce using rule 98 (exp_1 -> - np_push_operator_stack term .)
    TO              reduce using rule 98 (exp_1 -> - np_push_operator_stack term .)
    DO              reduce using rule 98 (exp_1 -> - np_push_operator_stack term .)


state 217

    (101) term_1 -> * np_push_operator_stack factor .

    +               reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)
    -               reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)
    <               reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)
    >               reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)
    EQUAL_TO        reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)
    NOT_EQUAL_TO    reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)
    &               reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)
    |               reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)
    ;               reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)
    ,               reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)
    )               reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)
    ]               reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)
    TO              reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)
    DO              reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)


state 218

    (102) term_1 -> / np_push_operator_stack factor .

    +               reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)
    -               reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)
    <               reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)
    >               reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)
    EQUAL_TO        reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)
    NOT_EQUAL_TO    reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)
    &               reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)
    |               reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)
    ;               reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)
    ,               reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)
    )               reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)
    ]               reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)
    TO              reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)
    DO              reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)


state 219

    (52) func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) . np_pop_operator_stack
    (105) np_pop_operator_stack -> . epsilon
    (118) epsilon -> .

    ;               reduce using rule 118 (epsilon -> .)
    *               reduce using rule 118 (epsilon -> .)
    /               reduce using rule 118 (epsilon -> .)
    +               reduce using rule 118 (epsilon -> .)
    -               reduce using rule 118 (epsilon -> .)
    <               reduce using rule 118 (epsilon -> .)
    >               reduce using rule 118 (epsilon -> .)
    EQUAL_TO        reduce using rule 118 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 118 (epsilon -> .)
    &               reduce using rule 118 (epsilon -> .)
    |               reduce using rule 118 (epsilon -> .)
    ,               reduce using rule 118 (epsilon -> .)
    )               reduce using rule 118 (epsilon -> .)
    ]               reduce using rule 118 (epsilon -> .)
    TO              reduce using rule 118 (epsilon -> .)
    DO              reduce using rule 118 (epsilon -> .)

    np_pop_operator_stack          shift and go to state 235
    epsilon                        shift and go to state 223

state 220

    (54) argumento_loop -> hyper_exp np_fc_2 . argumento_loop_1
    (56) argumento_loop_1 -> . , hyper_exp np_fc_2 argumento_loop_1
    (57) argumento_loop_1 -> . epsilon
    (118) epsilon -> .

    ,               shift and go to state 237
    )               reduce using rule 118 (epsilon -> .)

    argumento_loop_1               shift and go to state 236
    epsilon                        shift and go to state 238

state 221

    (61) np_fc_2 -> epsilon .

    ,               reduce using rule 61 (np_fc_2 -> epsilon .)
    )               reduce using rule 61 (np_fc_2 -> epsilon .)


state 222

    (10) variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack . np_array_var_process
    (117) np_array_var_process -> . epsilon
    (118) epsilon -> .

    =               reduce using rule 118 (epsilon -> .)
    *               reduce using rule 118 (epsilon -> .)
    /               reduce using rule 118 (epsilon -> .)
    +               reduce using rule 118 (epsilon -> .)
    -               reduce using rule 118 (epsilon -> .)
    <               reduce using rule 118 (epsilon -> .)
    >               reduce using rule 118 (epsilon -> .)
    EQUAL_TO        reduce using rule 118 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 118 (epsilon -> .)
    &               reduce using rule 118 (epsilon -> .)
    |               reduce using rule 118 (epsilon -> .)
    ;               reduce using rule 118 (epsilon -> .)
    ,               reduce using rule 118 (epsilon -> .)
    )               reduce using rule 118 (epsilon -> .)
    ]               reduce using rule 118 (epsilon -> .)
    TO              reduce using rule 118 (epsilon -> .)
    DO              reduce using rule 118 (epsilon -> .)

    np_array_var_process           shift and go to state 239
    epsilon                        shift and go to state 240

state 223

    (105) np_pop_operator_stack -> epsilon .

    =               reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    *               reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    /               reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    +               reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    -               reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    <               reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    >               reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    EQUAL_TO        reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    &               reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    |               reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    ;               reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    ,               reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    )               reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    ]               reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    TO              reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    DO              reduce using rule 105 (np_pop_operator_stack -> epsilon .)


state 224

    (65) variable_loop_1 -> , variable . np_add_to_input_counter variable_loop_1
    (67) np_add_to_input_counter -> . epsilon
    (118) epsilon -> .

    ,               reduce using rule 118 (epsilon -> .)
    )               reduce using rule 118 (epsilon -> .)

    np_add_to_input_counter        shift and go to state 241
    epsilon                        shift and go to state 166

state 225

    (59) hyper_exp_loop_1 -> , hyper_exp . np_add_to_input_counter hyper_exp_loop_1
    (67) np_add_to_input_counter -> . epsilon
    (118) epsilon -> .

    ,               reduce using rule 118 (epsilon -> .)
    )               reduce using rule 118 (epsilon -> .)

    np_add_to_input_counter        shift and go to state 242
    epsilon                        shift and go to state 166

state 226

    (69) decision -> IF ( hyper_exp ) np_decision_1 THEN . { loop_estatuto } decision_else

    {               shift and go to state 243


state 227

    (78) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 . DO { loop_estatuto } np_cond_3

    DO              shift and go to state 244


state 228

    (80) np_cond_2 -> epsilon .

    DO              reduce using rule 80 (np_cond_2 -> epsilon .)


state 229

    (82) no_condicional -> FOR variable = hyper_exp np_for_1 TO . hyper_exp np_for_2 DO np_for_3 { loop_estatuto }
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) constant -> . VAL_INT np_push_const_int
    (111) constant -> . VAL_FLOAT np_push_const_float
    (112) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 111
    VAL_INT         shift and go to state 113
    VAL_FLOAT       shift and go to state 114
    VAL_CHAR        shift and go to state 115
    ID              shift and go to state 116

    variable                       shift and go to state 104
    hyper_exp                      shift and go to state 245
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    func_llamada                   shift and go to state 112

state 230

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional . np_save_curr_func_quad { loop_estatuto } np_kill_func
    (31) np_save_curr_func_quad -> . epsilon
    (118) epsilon -> .

    {               reduce using rule 118 (epsilon -> .)

    np_save_curr_func_quad         shift and go to state 246
    epsilon                        shift and go to state 247

state 231

    (36) parametro -> tipo ID np_add_param loop_parametro .

    )               reduce using rule 36 (parametro -> tipo ID np_add_param loop_parametro .)


state 232

    (37) loop_parametro -> , . tipo ID np_add_param loop_parametro
    (40) tipo -> . INT
    (41) tipo -> . FLOAT
    (42) tipo -> . CHAR
    (43) tipo -> . BOOL

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOL            shift and go to state 28

    tipo                           shift and go to state 248

state 233

    (38) loop_parametro -> epsilon .

    )               reduce using rule 38 (loop_parametro -> epsilon .)


state 234

    (18) loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name array_opcional np_add_var_to_varstable . loop_var_decl_mismo_tipo
    (18) loop_var_decl_mismo_tipo -> . , ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo
    (19) loop_var_decl_mismo_tipo -> . epsilon
    (118) epsilon -> .

    ,               shift and go to state 98
    ;               reduce using rule 118 (epsilon -> .)

    loop_var_decl_mismo_tipo       shift and go to state 249
    epsilon                        shift and go to state 99

state 235

    (52) func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .

    ;               reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    *               reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    /               reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    +               reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    -               reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    <               reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    >               reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    EQUAL_TO        reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    NOT_EQUAL_TO    reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    &               reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    |               reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    ,               reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    )               reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    ]               reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    TO              reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    DO              reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)


state 236

    (54) argumento_loop -> hyper_exp np_fc_2 argumento_loop_1 .

    )               reduce using rule 54 (argumento_loop -> hyper_exp np_fc_2 argumento_loop_1 .)


state 237

    (56) argumento_loop_1 -> , . hyper_exp np_fc_2 argumento_loop_1
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) constant -> . VAL_INT np_push_const_int
    (111) constant -> . VAL_FLOAT np_push_const_float
    (112) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 111
    VAL_INT         shift and go to state 113
    VAL_FLOAT       shift and go to state 114
    VAL_CHAR        shift and go to state 115
    ID              shift and go to state 116

    hyper_exp                      shift and go to state 250
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112

state 238

    (57) argumento_loop_1 -> epsilon .

    )               reduce using rule 57 (argumento_loop_1 -> epsilon .)


state 239

    (10) variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .

    =               reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    *               reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    /               reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    +               reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    -               reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    <               reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    >               reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    EQUAL_TO        reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    NOT_EQUAL_TO    reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    &               reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    |               reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    ;               reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    ,               reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    )               reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    ]               reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    TO              reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    DO              reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)


state 240

    (117) np_array_var_process -> epsilon .

    =               reduce using rule 117 (np_array_var_process -> epsilon .)
    *               reduce using rule 117 (np_array_var_process -> epsilon .)
    /               reduce using rule 117 (np_array_var_process -> epsilon .)
    +               reduce using rule 117 (np_array_var_process -> epsilon .)
    -               reduce using rule 117 (np_array_var_process -> epsilon .)
    <               reduce using rule 117 (np_array_var_process -> epsilon .)
    >               reduce using rule 117 (np_array_var_process -> epsilon .)
    EQUAL_TO        reduce using rule 117 (np_array_var_process -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 117 (np_array_var_process -> epsilon .)
    &               reduce using rule 117 (np_array_var_process -> epsilon .)
    |               reduce using rule 117 (np_array_var_process -> epsilon .)
    ;               reduce using rule 117 (np_array_var_process -> epsilon .)
    ,               reduce using rule 117 (np_array_var_process -> epsilon .)
    )               reduce using rule 117 (np_array_var_process -> epsilon .)
    ]               reduce using rule 117 (np_array_var_process -> epsilon .)
    TO              reduce using rule 117 (np_array_var_process -> epsilon .)
    DO              reduce using rule 117 (np_array_var_process -> epsilon .)


state 241

    (65) variable_loop_1 -> , variable np_add_to_input_counter . variable_loop_1
    (65) variable_loop_1 -> . , variable np_add_to_input_counter variable_loop_1
    (66) variable_loop_1 -> . epsilon
    (118) epsilon -> .

    ,               shift and go to state 193
    )               reduce using rule 118 (epsilon -> .)

    variable_loop_1                shift and go to state 251
    epsilon                        shift and go to state 194

state 242

    (59) hyper_exp_loop_1 -> , hyper_exp np_add_to_input_counter . hyper_exp_loop_1
    (59) hyper_exp_loop_1 -> . , hyper_exp np_add_to_input_counter hyper_exp_loop_1
    (60) hyper_exp_loop_1 -> . epsilon
    (118) epsilon -> .

    ,               shift and go to state 197
    )               reduce using rule 118 (epsilon -> .)

    hyper_exp_loop_1               shift and go to state 252
    epsilon                        shift and go to state 198

state 243

    (69) decision -> IF ( hyper_exp ) np_decision_1 THEN { . loop_estatuto } decision_else
    (74) loop_estatuto -> . estatuto loop_estatuto
    (75) loop_estatuto -> . epsilon
    (44) estatuto -> . asignacion
    (45) estatuto -> . func_llamada ;
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . decision
    (49) estatuto -> . repeticion
    (50) estatuto -> . func_return
    (118) epsilon -> .
    (51) asignacion -> . variable = hyper_exp ;
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (68) write -> . WRITE ( hyper_exp_loop ) ;
    (69) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (76) repeticion -> . condicional
    (77) repeticion -> . no_condicional
    (62) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (78) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (82) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 118 (epsilon -> .)
    ID              shift and go to state 66
    READ            shift and go to state 67
    WRITE           shift and go to state 68
    IF              shift and go to state 69
    RETURN          shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74

    loop_estatuto                  shift and go to state 253
    estatuto                       shift and go to state 56
    epsilon                        shift and go to state 57
    asignacion                     shift and go to state 58
    func_llamada                   shift and go to state 59
    read                           shift and go to state 60
    write                          shift and go to state 61
    decision                       shift and go to state 62
    repeticion                     shift and go to state 63
    func_return                    shift and go to state 64
    variable                       shift and go to state 65
    condicional                    shift and go to state 70
    no_condicional                 shift and go to state 71

state 244

    (78) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO . { loop_estatuto } np_cond_3

    {               shift and go to state 254


state 245

    (82) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp . np_for_2 DO np_for_3 { loop_estatuto }
    (84) np_for_2 -> . epsilon
    (118) epsilon -> .

    DO              reduce using rule 118 (epsilon -> .)

    np_for_2                       shift and go to state 255
    epsilon                        shift and go to state 256

state 246

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad . { loop_estatuto } np_kill_func

    {               shift and go to state 257


state 247

    (31) np_save_curr_func_quad -> epsilon .

    {               reduce using rule 31 (np_save_curr_func_quad -> epsilon .)


state 248

    (37) loop_parametro -> , tipo . ID np_add_param loop_parametro

    ID              shift and go to state 258


state 249

    (18) loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo .

    ;               reduce using rule 18 (loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo .)


state 250

    (56) argumento_loop_1 -> , hyper_exp . np_fc_2 argumento_loop_1
    (61) np_fc_2 -> . epsilon
    (118) epsilon -> .

    ,               reduce using rule 118 (epsilon -> .)
    )               reduce using rule 118 (epsilon -> .)

    np_fc_2                        shift and go to state 259
    epsilon                        shift and go to state 221

state 251

    (65) variable_loop_1 -> , variable np_add_to_input_counter variable_loop_1 .

    )               reduce using rule 65 (variable_loop_1 -> , variable np_add_to_input_counter variable_loop_1 .)


state 252

    (59) hyper_exp_loop_1 -> , hyper_exp np_add_to_input_counter hyper_exp_loop_1 .

    )               reduce using rule 59 (hyper_exp_loop_1 -> , hyper_exp np_add_to_input_counter hyper_exp_loop_1 .)


state 253

    (69) decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto . } decision_else

    }               shift and go to state 260


state 254

    (78) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { . loop_estatuto } np_cond_3
    (74) loop_estatuto -> . estatuto loop_estatuto
    (75) loop_estatuto -> . epsilon
    (44) estatuto -> . asignacion
    (45) estatuto -> . func_llamada ;
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . decision
    (49) estatuto -> . repeticion
    (50) estatuto -> . func_return
    (118) epsilon -> .
    (51) asignacion -> . variable = hyper_exp ;
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (68) write -> . WRITE ( hyper_exp_loop ) ;
    (69) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (76) repeticion -> . condicional
    (77) repeticion -> . no_condicional
    (62) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (78) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (82) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 118 (epsilon -> .)
    ID              shift and go to state 66
    READ            shift and go to state 67
    WRITE           shift and go to state 68
    IF              shift and go to state 69
    RETURN          shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74

    loop_estatuto                  shift and go to state 261
    estatuto                       shift and go to state 56
    epsilon                        shift and go to state 57
    asignacion                     shift and go to state 58
    func_llamada                   shift and go to state 59
    read                           shift and go to state 60
    write                          shift and go to state 61
    decision                       shift and go to state 62
    repeticion                     shift and go to state 63
    func_return                    shift and go to state 64
    variable                       shift and go to state 65
    condicional                    shift and go to state 70
    no_condicional                 shift and go to state 71

state 255

    (82) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 . DO np_for_3 { loop_estatuto }

    DO              shift and go to state 262


state 256

    (84) np_for_2 -> epsilon .

    DO              reduce using rule 84 (np_for_2 -> epsilon .)


state 257

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { . loop_estatuto } np_kill_func
    (74) loop_estatuto -> . estatuto loop_estatuto
    (75) loop_estatuto -> . epsilon
    (44) estatuto -> . asignacion
    (45) estatuto -> . func_llamada ;
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . decision
    (49) estatuto -> . repeticion
    (50) estatuto -> . func_return
    (118) epsilon -> .
    (51) asignacion -> . variable = hyper_exp ;
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (68) write -> . WRITE ( hyper_exp_loop ) ;
    (69) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (76) repeticion -> . condicional
    (77) repeticion -> . no_condicional
    (62) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (78) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (82) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 118 (epsilon -> .)
    ID              shift and go to state 66
    READ            shift and go to state 67
    WRITE           shift and go to state 68
    IF              shift and go to state 69
    RETURN          shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74

    loop_estatuto                  shift and go to state 263
    estatuto                       shift and go to state 56
    epsilon                        shift and go to state 57
    asignacion                     shift and go to state 58
    func_llamada                   shift and go to state 59
    read                           shift and go to state 60
    write                          shift and go to state 61
    decision                       shift and go to state 62
    repeticion                     shift and go to state 63
    func_return                    shift and go to state 64
    variable                       shift and go to state 65
    condicional                    shift and go to state 70
    no_condicional                 shift and go to state 71

state 258

    (37) loop_parametro -> , tipo ID . np_add_param loop_parametro
    (39) np_add_param -> . epsilon
    (118) epsilon -> .

    ,               reduce using rule 118 (epsilon -> .)
    )               reduce using rule 118 (epsilon -> .)

    np_add_param                   shift and go to state 264
    epsilon                        shift and go to state 207

state 259

    (56) argumento_loop_1 -> , hyper_exp np_fc_2 . argumento_loop_1
    (56) argumento_loop_1 -> . , hyper_exp np_fc_2 argumento_loop_1
    (57) argumento_loop_1 -> . epsilon
    (118) epsilon -> .

    ,               shift and go to state 237
    )               reduce using rule 118 (epsilon -> .)

    argumento_loop_1               shift and go to state 265
    epsilon                        shift and go to state 238

state 260

    (69) decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } . decision_else
    (70) decision_else -> . ELSE np_decision_2 { loop_estatuto }
    (71) decision_else -> . epsilon
    (118) epsilon -> .

    ELSE            shift and go to state 267
    ID              reduce using rule 118 (epsilon -> .)
    READ            reduce using rule 118 (epsilon -> .)
    WRITE           reduce using rule 118 (epsilon -> .)
    IF              reduce using rule 118 (epsilon -> .)
    RETURN          reduce using rule 118 (epsilon -> .)
    WHILE           reduce using rule 118 (epsilon -> .)
    FOR             reduce using rule 118 (epsilon -> .)
    }               reduce using rule 118 (epsilon -> .)

    decision_else                  shift and go to state 266
    epsilon                        shift and go to state 268

state 261

    (78) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto . } np_cond_3

    }               shift and go to state 269


state 262

    (82) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO . np_for_3 { loop_estatuto }
    (85) np_for_3 -> . epsilon
    (118) epsilon -> .

    {               reduce using rule 118 (epsilon -> .)

    np_for_3                       shift and go to state 270
    epsilon                        shift and go to state 271

state 263

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto . } np_kill_func

    }               shift and go to state 272


state 264

    (37) loop_parametro -> , tipo ID np_add_param . loop_parametro
    (37) loop_parametro -> . , tipo ID np_add_param loop_parametro
    (38) loop_parametro -> . epsilon
    (118) epsilon -> .

    ,               shift and go to state 232
    )               reduce using rule 118 (epsilon -> .)

    loop_parametro                 shift and go to state 273
    epsilon                        shift and go to state 233

state 265

    (56) argumento_loop_1 -> , hyper_exp np_fc_2 argumento_loop_1 .

    )               reduce using rule 56 (argumento_loop_1 -> , hyper_exp np_fc_2 argumento_loop_1 .)


state 266

    (69) decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .

    ID              reduce using rule 69 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    READ            reduce using rule 69 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    WRITE           reduce using rule 69 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    IF              reduce using rule 69 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    RETURN          reduce using rule 69 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    WHILE           reduce using rule 69 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    FOR             reduce using rule 69 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    }               reduce using rule 69 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)


state 267

    (70) decision_else -> ELSE . np_decision_2 { loop_estatuto }
    (73) np_decision_2 -> . epsilon
    (118) epsilon -> .

    {               reduce using rule 118 (epsilon -> .)

    np_decision_2                  shift and go to state 274
    epsilon                        shift and go to state 275

state 268

    (71) decision_else -> epsilon .

    ID              reduce using rule 71 (decision_else -> epsilon .)
    READ            reduce using rule 71 (decision_else -> epsilon .)
    WRITE           reduce using rule 71 (decision_else -> epsilon .)
    IF              reduce using rule 71 (decision_else -> epsilon .)
    RETURN          reduce using rule 71 (decision_else -> epsilon .)
    WHILE           reduce using rule 71 (decision_else -> epsilon .)
    FOR             reduce using rule 71 (decision_else -> epsilon .)
    }               reduce using rule 71 (decision_else -> epsilon .)


state 269

    (78) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } . np_cond_3
    (81) np_cond_3 -> . epsilon
    (118) epsilon -> .

    ID              reduce using rule 118 (epsilon -> .)
    READ            reduce using rule 118 (epsilon -> .)
    WRITE           reduce using rule 118 (epsilon -> .)
    IF              reduce using rule 118 (epsilon -> .)
    RETURN          reduce using rule 118 (epsilon -> .)
    WHILE           reduce using rule 118 (epsilon -> .)
    FOR             reduce using rule 118 (epsilon -> .)
    }               reduce using rule 118 (epsilon -> .)

    np_cond_3                      shift and go to state 276
    epsilon                        shift and go to state 277

state 270

    (82) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 . { loop_estatuto }

    {               shift and go to state 278


state 271

    (85) np_for_3 -> epsilon .

    {               reduce using rule 85 (np_for_3 -> epsilon .)


state 272

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } . np_kill_func
    (32) np_kill_func -> . epsilon
    (118) epsilon -> .

    FUNCTION        reduce using rule 118 (epsilon -> .)
    MAIN            reduce using rule 118 (epsilon -> .)

    np_kill_func                   shift and go to state 279
    epsilon                        shift and go to state 280

state 273

    (37) loop_parametro -> , tipo ID np_add_param loop_parametro .

    )               reduce using rule 37 (loop_parametro -> , tipo ID np_add_param loop_parametro .)


state 274

    (70) decision_else -> ELSE np_decision_2 . { loop_estatuto }

    {               shift and go to state 281


state 275

    (73) np_decision_2 -> epsilon .

    {               reduce using rule 73 (np_decision_2 -> epsilon .)


state 276

    (78) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .

    ID              reduce using rule 78 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    READ            reduce using rule 78 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    WRITE           reduce using rule 78 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    IF              reduce using rule 78 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    RETURN          reduce using rule 78 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    WHILE           reduce using rule 78 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    FOR             reduce using rule 78 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    }               reduce using rule 78 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)


state 277

    (81) np_cond_3 -> epsilon .

    ID              reduce using rule 81 (np_cond_3 -> epsilon .)
    READ            reduce using rule 81 (np_cond_3 -> epsilon .)
    WRITE           reduce using rule 81 (np_cond_3 -> epsilon .)
    IF              reduce using rule 81 (np_cond_3 -> epsilon .)
    RETURN          reduce using rule 81 (np_cond_3 -> epsilon .)
    WHILE           reduce using rule 81 (np_cond_3 -> epsilon .)
    FOR             reduce using rule 81 (np_cond_3 -> epsilon .)
    }               reduce using rule 81 (np_cond_3 -> epsilon .)


state 278

    (82) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { . loop_estatuto }
    (74) loop_estatuto -> . estatuto loop_estatuto
    (75) loop_estatuto -> . epsilon
    (44) estatuto -> . asignacion
    (45) estatuto -> . func_llamada ;
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . decision
    (49) estatuto -> . repeticion
    (50) estatuto -> . func_return
    (118) epsilon -> .
    (51) asignacion -> . variable = hyper_exp ;
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (68) write -> . WRITE ( hyper_exp_loop ) ;
    (69) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (76) repeticion -> . condicional
    (77) repeticion -> . no_condicional
    (62) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (78) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (82) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 118 (epsilon -> .)
    ID              shift and go to state 66
    READ            shift and go to state 67
    WRITE           shift and go to state 68
    IF              shift and go to state 69
    RETURN          shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74

    variable                       shift and go to state 65
    loop_estatuto                  shift and go to state 282
    estatuto                       shift and go to state 56
    epsilon                        shift and go to state 57
    asignacion                     shift and go to state 58
    func_llamada                   shift and go to state 59
    read                           shift and go to state 60
    write                          shift and go to state 61
    decision                       shift and go to state 62
    repeticion                     shift and go to state 63
    func_return                    shift and go to state 64
    condicional                    shift and go to state 70
    no_condicional                 shift and go to state 71

state 279

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func .

    FUNCTION        reduce using rule 25 (func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func .)
    MAIN            reduce using rule 25 (func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func .)


state 280

    (32) np_kill_func -> epsilon .

    FUNCTION        reduce using rule 32 (np_kill_func -> epsilon .)
    MAIN            reduce using rule 32 (np_kill_func -> epsilon .)


state 281

    (70) decision_else -> ELSE np_decision_2 { . loop_estatuto }
    (74) loop_estatuto -> . estatuto loop_estatuto
    (75) loop_estatuto -> . epsilon
    (44) estatuto -> . asignacion
    (45) estatuto -> . func_llamada ;
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . decision
    (49) estatuto -> . repeticion
    (50) estatuto -> . func_return
    (118) epsilon -> .
    (51) asignacion -> . variable = hyper_exp ;
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (68) write -> . WRITE ( hyper_exp_loop ) ;
    (69) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (76) repeticion -> . condicional
    (77) repeticion -> . no_condicional
    (62) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (78) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (82) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 118 (epsilon -> .)
    ID              shift and go to state 66
    READ            shift and go to state 67
    WRITE           shift and go to state 68
    IF              shift and go to state 69
    RETURN          shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74

    loop_estatuto                  shift and go to state 283
    estatuto                       shift and go to state 56
    epsilon                        shift and go to state 57
    asignacion                     shift and go to state 58
    func_llamada                   shift and go to state 59
    read                           shift and go to state 60
    write                          shift and go to state 61
    decision                       shift and go to state 62
    repeticion                     shift and go to state 63
    func_return                    shift and go to state 64
    variable                       shift and go to state 65
    condicional                    shift and go to state 70
    no_condicional                 shift and go to state 71

state 282

    (82) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto . }

    }               shift and go to state 284


state 283

    (70) decision_else -> ELSE np_decision_2 { loop_estatuto . }

    }               shift and go to state 285


state 284

    (82) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .

    ID              reduce using rule 82 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    READ            reduce using rule 82 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    WRITE           reduce using rule 82 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    IF              reduce using rule 82 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    RETURN          reduce using rule 82 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    WHILE           reduce using rule 82 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    FOR             reduce using rule 82 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    }               reduce using rule 82 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)


state 285

    (70) decision_else -> ELSE np_decision_2 { loop_estatuto } .

    ID              reduce using rule 70 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    READ            reduce using rule 70 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    WRITE           reduce using rule 70 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    IF              reduce using rule 70 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    RETURN          reduce using rule 70 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    WHILE           reduce using rule 70 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    FOR             reduce using rule 70 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    }               reduce using rule 70 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)

