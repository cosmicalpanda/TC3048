Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    STRING
    VAL_STRING

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main
Rule 2     np_program_start -> epsilon
Rule 3     np_start_dirfunc -> epsilon
Rule 4     main -> MAIN np_prep_main ( ) { loop_estatuto } np_fin_total
Rule 5     np_prep_main -> epsilon
Rule 6     np_fin_total -> epsilon
Rule 7     var_opcional -> var_declaracion
Rule 8     var_opcional -> epsilon
Rule 9     variable -> ID np_single_var_process
Rule 10    variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
Rule 11    var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion
Rule 12    np_var_prep -> epsilon
Rule 13    loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion
Rule 14    loop_var_declaracion -> epsilon
Rule 15    var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ;
Rule 16    array_opcional -> [ VAL_INT np_push_const_int ]
Rule 17    array_opcional -> epsilon
Rule 18    loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo
Rule 19    loop_var_decl_mismo_tipo -> epsilon
Rule 20    np_set_curr_var_type -> epsilon
Rule 21    np_set_curr_var_name -> epsilon
Rule 22    np_add_var_to_varstable -> epsilon
Rule 23    func_programa_loop -> func_definicion func_programa_loop
Rule 24    func_programa_loop -> epsilon
Rule 25    func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
Rule 26    func_tipo_retorno -> tipo
Rule 27    func_tipo_retorno -> VOID
Rule 28    np_func_tipo_retorno -> epsilon
Rule 29    np_func_id -> epsilon
Rule 30    np_add_to_func_dir -> epsilon
Rule 31    np_save_curr_func_quad -> epsilon
Rule 32    np_kill_func -> epsilon
Rule 33    np_prep_func_params -> epsilon
Rule 34    func_parametro -> parametro
Rule 35    func_parametro -> epsilon
Rule 36    parametro -> tipo ID np_add_param loop_parametro
Rule 37    loop_parametro -> , tipo ID np_add_param loop_parametro
Rule 38    loop_parametro -> epsilon
Rule 39    np_add_param -> epsilon
Rule 40    tipo -> INT
Rule 41    tipo -> FLOAT
Rule 42    tipo -> CHAR
Rule 43    tipo -> BOOL
Rule 44    estatuto -> asignacion
Rule 45    estatuto -> func_llamada ;
Rule 46    estatuto -> read
Rule 47    estatuto -> write
Rule 48    estatuto -> decision
Rule 49    estatuto -> repeticion
Rule 50    estatuto -> func_return
Rule 51    asignacion -> variable = hyper_exp ;
Rule 52    func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
Rule 53    np_fc_1 -> epsilon
Rule 54    argumento_loop -> hyper_exp np_fc_2 argumento_loop_1
Rule 55    argumento_loop -> epsilon
Rule 56    argumento_loop_1 -> , hyper_exp np_fc_2 argumento_loop_1
Rule 57    argumento_loop_1 -> epsilon
Rule 58    hyper_exp_loop -> hyper_exp np_add_to_input_counter hyper_exp_loop_1
Rule 59    hyper_exp_loop_1 -> , hyper_exp np_add_to_input_counter hyper_exp_loop_1
Rule 60    hyper_exp_loop_1 -> epsilon
Rule 61    np_fc_2 -> epsilon
Rule 62    func_return -> RETURN ( hyper_exp ) ;
Rule 63    read -> READ ( variable_loop ) ;
Rule 64    variable_loop -> variable np_add_to_input_counter variable_loop_1
Rule 65    variable_loop_1 -> , variable np_add_to_input_counter variable_loop_1
Rule 66    variable_loop_1 -> epsilon
Rule 67    np_add_to_input_counter -> epsilon
Rule 68    write -> WRITE ( hyper_exp_loop ) ;
Rule 69    decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
Rule 70    decision_else -> ELSE np_decision_2 { loop_estatuto }
Rule 71    decision_else -> epsilon
Rule 72    np_decision_1 -> epsilon
Rule 73    np_decision_2 -> epsilon
Rule 74    loop_estatuto -> estatuto loop_estatuto
Rule 75    loop_estatuto -> epsilon
Rule 76    repeticion -> condicional
Rule 77    repeticion -> no_condicional
Rule 78    condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
Rule 79    np_cond_1 -> epsilon
Rule 80    np_cond_2 -> epsilon
Rule 81    np_cond_3 -> epsilon
Rule 82    no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }
Rule 83    np_for_1 -> epsilon
Rule 84    np_for_2 -> epsilon
Rule 85    np_for_3 -> epsilon
Rule 86    hyper_exp -> super_exp hyper_exp_1
Rule 87    hyper_exp_1 -> & np_push_operator_stack super_exp
Rule 88    hyper_exp_1 -> | np_push_operator_stack super_exp
Rule 89    hyper_exp_1 -> epsilon
Rule 90    super_exp -> exp super_exp_1
Rule 91    super_exp_1 -> < np_push_operator_stack exp
Rule 92    super_exp_1 -> > np_push_operator_stack exp
Rule 93    super_exp_1 -> EQUAL_TO np_push_operator_stack exp
Rule 94    super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp
Rule 95    super_exp_1 -> epsilon
Rule 96    exp -> term exp_1
Rule 97    exp_1 -> + np_push_operator_stack term
Rule 98    exp_1 -> - np_push_operator_stack term
Rule 99    exp_1 -> epsilon
Rule 100   term -> factor term_1
Rule 101   term_1 -> * np_push_operator_stack factor
Rule 102   term_1 -> / np_push_operator_stack factor
Rule 103   term_1 -> epsilon
Rule 104   np_push_operator_stack -> epsilon
Rule 105   np_pop_operator_stack -> epsilon
Rule 106   factor -> constant
Rule 107   factor -> variable
Rule 108   factor -> ( hyper_exp )
Rule 109   factor -> func_llamada
Rule 110   factor -> read
Rule 111   factor -> func_mat
Rule 112   constant -> VAL_INT np_push_const_int
Rule 113   constant -> VAL_FLOAT np_push_const_float
Rule 114   constant -> VAL_CHAR np_push_const_char
Rule 115   np_push_const_int -> epsilon
Rule 116   np_push_const_float -> epsilon
Rule 117   np_push_const_char -> epsilon
Rule 118   np_single_var_process -> epsilon
Rule 119   np_array_var_process -> epsilon
Rule 120   func_mat -> fm_1_param
Rule 121   func_mat -> fm_2_param
Rule 122   fm_1_param -> MEDIA ( ID ) np_arr_input
Rule 123   fm_1_param -> MEDIANA ( ID ) np_arr_input
Rule 124   fm_1_param -> MODA ( ID ) np_arr_input
Rule 125   fm_1_param -> LEN ( ID ) np_arr_input
Rule 126   fm_1_param -> VARIANZA ( ID ) np_arr_input
Rule 127   fm_1_param -> SEN ( hyper_exp ) np_he_input
Rule 128   fm_1_param -> COS ( hyper_exp ) np_he_input
Rule 129   fm_1_param -> TAN ( hyper_exp ) np_he_input
Rule 130   fm_1_param -> SENH ( hyper_exp ) np_he_input
Rule 131   fm_1_param -> COSH ( hyper_exp ) np_he_input
Rule 132   fm_1_param -> TANH ( hyper_exp ) np_he_input
Rule 133   fm_1_param -> LOG ( hyper_exp ) np_he_input
Rule 134   fm_1_param -> ABS ( hyper_exp ) np_he_input
Rule 135   fm_1_param -> FLOOR ( hyper_exp ) np_he_input
Rule 136   fm_1_param -> CEIL ( hyper_exp ) np_he_input
Rule 137   np_he_input -> epsilon
Rule 138   np_arr_input -> epsilon
Rule 139   fm_2_param -> RAND ( hyper_exp , hyper_exp ) np_int_input
Rule 140   fm_2_param -> POW ( hyper_exp , hyper_exp ) np_int_input
Rule 141   fm_2_param -> MIN ( hyper_exp , hyper_exp ) np_same_input
Rule 142   fm_2_param -> MAX ( hyper_exp , hyper_exp ) np_same_input
Rule 143   np_int_input -> epsilon
Rule 144   np_same_input -> epsilon
Rule 145   epsilon -> <empty>

Terminals, with rules where they appear

&                    : 87
(                    : 4 25 52 62 63 68 69 78 108 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 139 140 141 142
)                    : 4 25 52 62 63 68 69 78 108 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 139 140 141 142
*                    : 101
+                    : 97
,                    : 18 37 56 59 65 139 140 141 142
-                    : 98
/                    : 102
;                    : 1 15 25 45 51 62 63 68
<                    : 91
=                    : 51 82
>                    : 92
ABS                  : 134
BOOL                 : 43
CEIL                 : 136
CHAR                 : 42
COS                  : 128
COSH                 : 131
DO                   : 78 82
ELSE                 : 70
EQUAL_TO             : 93
FLOAT                : 41
FLOOR                : 135
FOR                  : 82
FUNCTION             : 25
ID                   : 1 9 10 15 18 25 36 37 52 122 123 124 125 126
IF                   : 69
INT                  : 40
LEN                  : 125
LOG                  : 133
MAIN                 : 4
MAX                  : 142
MEDIA                : 122
MEDIANA              : 123
MIN                  : 141
MODA                 : 124
NOT_EQUAL_TO         : 94
POW                  : 140
PROGRAM              : 1
RAND                 : 139
READ                 : 63
RETURN               : 62
SEN                  : 127
SENH                 : 130
STRING               : 
TAN                  : 129
TANH                 : 132
THEN                 : 69
TO                   : 82
VAL_CHAR             : 114
VAL_FLOAT            : 113
VAL_INT              : 16 112
VAL_STRING           : 
VARIANZA             : 126
VARS                 : 11
VOID                 : 27
WHILE                : 78
WRITE                : 68
[                    : 10 16
]                    : 10 16
error                : 
{                    : 4 25 69 70 78 82
|                    : 88
}                    : 4 25 69 70 78 82

Nonterminals, with rules where they appear

argumento_loop       : 52
argumento_loop_1     : 54 56
array_opcional       : 15 18
asignacion           : 44
condicional          : 76
constant             : 106
decision             : 48
decision_else        : 69
epsilon              : 2 3 5 6 8 12 14 17 19 20 21 22 24 28 29 30 31 32 33 35 38 39 53 55 57 60 61 66 67 71 72 73 75 79 80 81 83 84 85 89 95 99 103 104 105 115 116 117 118 119 137 138 143 144
estatuto             : 74
exp                  : 90 91 92 93 94
exp_1                : 96
factor               : 100 101 102
fm_1_param           : 120
fm_2_param           : 121
func_definicion      : 23
func_llamada         : 45 109
func_mat             : 111
func_parametro       : 25
func_programa_loop   : 1 23
func_return          : 50
func_tipo_retorno    : 25
hyper_exp            : 10 51 54 56 58 59 62 69 78 82 82 108 127 128 129 130 131 132 133 134 135 136 139 139 140 140 141 141 142 142
hyper_exp_1          : 86
hyper_exp_loop       : 68
hyper_exp_loop_1     : 58 59
loop_estatuto        : 4 25 69 70 74 78 82
loop_parametro       : 36 37
loop_var_decl_mismo_tipo : 15 18
loop_var_declaracion : 11 13
main                 : 1
no_condicional       : 77
np_add_param         : 36 37
np_add_to_func_dir   : 25
np_add_to_input_counter : 58 59 64 65
np_add_var_to_varstable : 15 18
np_arr_input         : 122 123 124 125 126
np_array_var_process : 10
np_cond_1            : 78
np_cond_2            : 78
np_cond_3            : 78
np_decision_1        : 69
np_decision_2        : 70
np_fc_1              : 52
np_fc_2              : 54 56
np_fin_total         : 4
np_for_1             : 82
np_for_2             : 82
np_for_3             : 82
np_func_id           : 25
np_func_tipo_retorno : 25
np_he_input          : 127 128 129 130 131 132 133 134 135 136
np_int_input         : 139 140
np_kill_func         : 25
np_pop_operator_stack : 10 52
np_prep_func_params  : 25
np_prep_main         : 4
np_program_start     : 1
np_push_const_char   : 114
np_push_const_float  : 113
np_push_const_int    : 16 112
np_push_operator_stack : 10 52 87 88 91 92 93 94 97 98 101 102
np_same_input        : 141 142
np_save_curr_func_quad : 25
np_set_curr_var_name : 15 18
np_set_curr_var_type : 15
np_single_var_process : 9
np_start_dirfunc     : 1
np_var_prep          : 11
parametro            : 34
programa             : 0
read                 : 46 110
repeticion           : 49
super_exp            : 86 87 88
super_exp_1          : 90
term                 : 96 97 98
term_1               : 100
tipo                 : 15 26 36 37
var_declaracion      : 7
var_declaracion_mismo_tipo : 11 13
var_opcional         : 1 25
variable             : 51 64 65 82 107
variable_loop        : 63
variable_loop_1      : 64 65
write                : 47

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main
    (2) np_program_start -> . epsilon
    (145) epsilon -> .

    ID              reduce using rule 145 (epsilon -> .)

    np_program_start               shift and go to state 3
    epsilon                        shift and go to state 4

state 3

    (1) programa -> PROGRAM np_program_start . ID np_start_dirfunc ; var_opcional func_programa_loop main

    ID              shift and go to state 5


state 4

    (2) np_program_start -> epsilon .

    ID              reduce using rule 2 (np_program_start -> epsilon .)


state 5

    (1) programa -> PROGRAM np_program_start ID . np_start_dirfunc ; var_opcional func_programa_loop main
    (3) np_start_dirfunc -> . epsilon
    (145) epsilon -> .

    ;               reduce using rule 145 (epsilon -> .)

    np_start_dirfunc               shift and go to state 6
    epsilon                        shift and go to state 7

state 6

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc . ; var_opcional func_programa_loop main

    ;               shift and go to state 8


state 7

    (3) np_start_dirfunc -> epsilon .

    ;               reduce using rule 3 (np_start_dirfunc -> epsilon .)


state 8

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc ; . var_opcional func_programa_loop main
    (7) var_opcional -> . var_declaracion
    (8) var_opcional -> . epsilon
    (11) var_declaracion -> . VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion
    (145) epsilon -> .

    VARS            shift and go to state 12
    FUNCTION        reduce using rule 145 (epsilon -> .)
    MAIN            reduce using rule 145 (epsilon -> .)

    var_opcional                   shift and go to state 9
    var_declaracion                shift and go to state 10
    epsilon                        shift and go to state 11

state 9

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional . func_programa_loop main
    (23) func_programa_loop -> . func_definicion func_programa_loop
    (24) func_programa_loop -> . epsilon
    (25) func_definicion -> . FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (145) epsilon -> .

    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 145 (epsilon -> .)

    func_programa_loop             shift and go to state 13
    func_definicion                shift and go to state 14
    epsilon                        shift and go to state 15

state 10

    (7) var_opcional -> var_declaracion .

    FUNCTION        reduce using rule 7 (var_opcional -> var_declaracion .)
    MAIN            reduce using rule 7 (var_opcional -> var_declaracion .)
    {               reduce using rule 7 (var_opcional -> var_declaracion .)


state 11

    (8) var_opcional -> epsilon .

    FUNCTION        reduce using rule 8 (var_opcional -> epsilon .)
    MAIN            reduce using rule 8 (var_opcional -> epsilon .)
    {               reduce using rule 8 (var_opcional -> epsilon .)


state 12

    (11) var_declaracion -> VARS . np_var_prep var_declaracion_mismo_tipo loop_var_declaracion
    (12) np_var_prep -> . epsilon
    (145) epsilon -> .

    INT             reduce using rule 145 (epsilon -> .)
    FLOAT           reduce using rule 145 (epsilon -> .)
    CHAR            reduce using rule 145 (epsilon -> .)
    BOOL            reduce using rule 145 (epsilon -> .)

    np_var_prep                    shift and go to state 17
    epsilon                        shift and go to state 18

state 13

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop . main
    (4) main -> . MAIN np_prep_main ( ) { loop_estatuto } np_fin_total

    MAIN            shift and go to state 20

    main                           shift and go to state 19

state 14

    (23) func_programa_loop -> func_definicion . func_programa_loop
    (23) func_programa_loop -> . func_definicion func_programa_loop
    (24) func_programa_loop -> . epsilon
    (25) func_definicion -> . FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (145) epsilon -> .

    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 145 (epsilon -> .)

    func_definicion                shift and go to state 14
    func_programa_loop             shift and go to state 21
    epsilon                        shift and go to state 15

state 15

    (24) func_programa_loop -> epsilon .

    MAIN            reduce using rule 24 (func_programa_loop -> epsilon .)


state 16

    (25) func_definicion -> FUNCTION . func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (26) func_tipo_retorno -> . tipo
    (27) func_tipo_retorno -> . VOID
    (40) tipo -> . INT
    (41) tipo -> . FLOAT
    (42) tipo -> . CHAR
    (43) tipo -> . BOOL

    VOID            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOL            shift and go to state 28

    func_tipo_retorno              shift and go to state 22
    tipo                           shift and go to state 23

state 17

    (11) var_declaracion -> VARS np_var_prep . var_declaracion_mismo_tipo loop_var_declaracion
    (15) var_declaracion_mismo_tipo -> . tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (40) tipo -> . INT
    (41) tipo -> . FLOAT
    (42) tipo -> . CHAR
    (43) tipo -> . BOOL

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOL            shift and go to state 28

    var_declaracion_mismo_tipo     shift and go to state 29
    tipo                           shift and go to state 30

state 18

    (12) np_var_prep -> epsilon .

    INT             reduce using rule 12 (np_var_prep -> epsilon .)
    FLOAT           reduce using rule 12 (np_var_prep -> epsilon .)
    CHAR            reduce using rule 12 (np_var_prep -> epsilon .)
    BOOL            reduce using rule 12 (np_var_prep -> epsilon .)


state 19

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main .

    $end            reduce using rule 1 (programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main .)


state 20

    (4) main -> MAIN . np_prep_main ( ) { loop_estatuto } np_fin_total
    (5) np_prep_main -> . epsilon
    (145) epsilon -> .

    (               reduce using rule 145 (epsilon -> .)

    np_prep_main                   shift and go to state 31
    epsilon                        shift and go to state 32

state 21

    (23) func_programa_loop -> func_definicion func_programa_loop .

    MAIN            reduce using rule 23 (func_programa_loop -> func_definicion func_programa_loop .)


state 22

    (25) func_definicion -> FUNCTION func_tipo_retorno . np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (28) np_func_tipo_retorno -> . epsilon
    (145) epsilon -> .

    ID              reduce using rule 145 (epsilon -> .)

    np_func_tipo_retorno           shift and go to state 33
    epsilon                        shift and go to state 34

state 23

    (26) func_tipo_retorno -> tipo .

    ID              reduce using rule 26 (func_tipo_retorno -> tipo .)


state 24

    (27) func_tipo_retorno -> VOID .

    ID              reduce using rule 27 (func_tipo_retorno -> VOID .)


state 25

    (40) tipo -> INT .

    ID              reduce using rule 40 (tipo -> INT .)


state 26

    (41) tipo -> FLOAT .

    ID              reduce using rule 41 (tipo -> FLOAT .)


state 27

    (42) tipo -> CHAR .

    ID              reduce using rule 42 (tipo -> CHAR .)


state 28

    (43) tipo -> BOOL .

    ID              reduce using rule 43 (tipo -> BOOL .)


state 29

    (11) var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo . loop_var_declaracion
    (13) loop_var_declaracion -> . var_declaracion_mismo_tipo loop_var_declaracion
    (14) loop_var_declaracion -> . epsilon
    (15) var_declaracion_mismo_tipo -> . tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (145) epsilon -> .
    (40) tipo -> . INT
    (41) tipo -> . FLOAT
    (42) tipo -> . CHAR
    (43) tipo -> . BOOL

    FUNCTION        reduce using rule 145 (epsilon -> .)
    MAIN            reduce using rule 145 (epsilon -> .)
    {               reduce using rule 145 (epsilon -> .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOL            shift and go to state 28

    var_declaracion_mismo_tipo     shift and go to state 35
    loop_var_declaracion           shift and go to state 36
    epsilon                        shift and go to state 37
    tipo                           shift and go to state 30

state 30

    (15) var_declaracion_mismo_tipo -> tipo . np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (20) np_set_curr_var_type -> . epsilon
    (145) epsilon -> .

    ID              reduce using rule 145 (epsilon -> .)

    np_set_curr_var_type           shift and go to state 38
    epsilon                        shift and go to state 39

state 31

    (4) main -> MAIN np_prep_main . ( ) { loop_estatuto } np_fin_total

    (               shift and go to state 40


state 32

    (5) np_prep_main -> epsilon .

    (               reduce using rule 5 (np_prep_main -> epsilon .)


state 33

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno . ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func

    ID              shift and go to state 41


state 34

    (28) np_func_tipo_retorno -> epsilon .

    ID              reduce using rule 28 (np_func_tipo_retorno -> epsilon .)


state 35

    (13) loop_var_declaracion -> var_declaracion_mismo_tipo . loop_var_declaracion
    (13) loop_var_declaracion -> . var_declaracion_mismo_tipo loop_var_declaracion
    (14) loop_var_declaracion -> . epsilon
    (15) var_declaracion_mismo_tipo -> . tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (145) epsilon -> .
    (40) tipo -> . INT
    (41) tipo -> . FLOAT
    (42) tipo -> . CHAR
    (43) tipo -> . BOOL

    FUNCTION        reduce using rule 145 (epsilon -> .)
    MAIN            reduce using rule 145 (epsilon -> .)
    {               reduce using rule 145 (epsilon -> .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOL            shift and go to state 28

    var_declaracion_mismo_tipo     shift and go to state 35
    loop_var_declaracion           shift and go to state 42
    epsilon                        shift and go to state 37
    tipo                           shift and go to state 30

state 36

    (11) var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion .

    FUNCTION        reduce using rule 11 (var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion .)
    MAIN            reduce using rule 11 (var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion .)
    {               reduce using rule 11 (var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion .)


state 37

    (14) loop_var_declaracion -> epsilon .

    FUNCTION        reduce using rule 14 (loop_var_declaracion -> epsilon .)
    MAIN            reduce using rule 14 (loop_var_declaracion -> epsilon .)
    {               reduce using rule 14 (loop_var_declaracion -> epsilon .)


state 38

    (15) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type . ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ;

    ID              shift and go to state 43


state 39

    (20) np_set_curr_var_type -> epsilon .

    ID              reduce using rule 20 (np_set_curr_var_type -> epsilon .)


state 40

    (4) main -> MAIN np_prep_main ( . ) { loop_estatuto } np_fin_total

    )               shift and go to state 44


state 41

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID . np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (29) np_func_id -> . epsilon
    (145) epsilon -> .

    (               reduce using rule 145 (epsilon -> .)

    np_func_id                     shift and go to state 45
    epsilon                        shift and go to state 46

state 42

    (13) loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion .

    FUNCTION        reduce using rule 13 (loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion .)
    MAIN            reduce using rule 13 (loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion .)
    {               reduce using rule 13 (loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion .)


state 43

    (15) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID . np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (21) np_set_curr_var_name -> . epsilon
    (145) epsilon -> .

    [               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)

    np_set_curr_var_name           shift and go to state 47
    epsilon                        shift and go to state 48

state 44

    (4) main -> MAIN np_prep_main ( ) . { loop_estatuto } np_fin_total

    {               shift and go to state 49


state 45

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id . np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (30) np_add_to_func_dir -> . epsilon
    (145) epsilon -> .

    (               reduce using rule 145 (epsilon -> .)

    np_add_to_func_dir             shift and go to state 50
    epsilon                        shift and go to state 51

state 46

    (29) np_func_id -> epsilon .

    (               reduce using rule 29 (np_func_id -> epsilon .)


state 47

    (15) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name . array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (16) array_opcional -> . [ VAL_INT np_push_const_int ]
    (17) array_opcional -> . epsilon
    (145) epsilon -> .

    [               shift and go to state 53
    ,               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)

    array_opcional                 shift and go to state 52
    epsilon                        shift and go to state 54

state 48

    (21) np_set_curr_var_name -> epsilon .

    [               reduce using rule 21 (np_set_curr_var_name -> epsilon .)
    ,               reduce using rule 21 (np_set_curr_var_name -> epsilon .)
    ;               reduce using rule 21 (np_set_curr_var_name -> epsilon .)


state 49

    (4) main -> MAIN np_prep_main ( ) { . loop_estatuto } np_fin_total
    (74) loop_estatuto -> . estatuto loop_estatuto
    (75) loop_estatuto -> . epsilon
    (44) estatuto -> . asignacion
    (45) estatuto -> . func_llamada ;
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . decision
    (49) estatuto -> . repeticion
    (50) estatuto -> . func_return
    (145) epsilon -> .
    (51) asignacion -> . variable = hyper_exp ;
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (68) write -> . WRITE ( hyper_exp_loop ) ;
    (69) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (76) repeticion -> . condicional
    (77) repeticion -> . no_condicional
    (62) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (78) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (82) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 145 (epsilon -> .)
    ID              shift and go to state 66
    READ            shift and go to state 67
    WRITE           shift and go to state 68
    IF              shift and go to state 69
    RETURN          shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74

    loop_estatuto                  shift and go to state 55
    estatuto                       shift and go to state 56
    epsilon                        shift and go to state 57
    asignacion                     shift and go to state 58
    func_llamada                   shift and go to state 59
    read                           shift and go to state 60
    write                          shift and go to state 61
    decision                       shift and go to state 62
    repeticion                     shift and go to state 63
    func_return                    shift and go to state 64
    variable                       shift and go to state 65
    condicional                    shift and go to state 70
    no_condicional                 shift and go to state 71

state 50

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir . ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func

    (               shift and go to state 75


state 51

    (30) np_add_to_func_dir -> epsilon .

    (               reduce using rule 30 (np_add_to_func_dir -> epsilon .)


state 52

    (15) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional . np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (22) np_add_var_to_varstable -> . epsilon
    (145) epsilon -> .

    ,               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)

    np_add_var_to_varstable        shift and go to state 76
    epsilon                        shift and go to state 77

state 53

    (16) array_opcional -> [ . VAL_INT np_push_const_int ]

    VAL_INT         shift and go to state 78


state 54

    (17) array_opcional -> epsilon .

    ,               reduce using rule 17 (array_opcional -> epsilon .)
    ;               reduce using rule 17 (array_opcional -> epsilon .)


state 55

    (4) main -> MAIN np_prep_main ( ) { loop_estatuto . } np_fin_total

    }               shift and go to state 79


state 56

    (74) loop_estatuto -> estatuto . loop_estatuto
    (74) loop_estatuto -> . estatuto loop_estatuto
    (75) loop_estatuto -> . epsilon
    (44) estatuto -> . asignacion
    (45) estatuto -> . func_llamada ;
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . decision
    (49) estatuto -> . repeticion
    (50) estatuto -> . func_return
    (145) epsilon -> .
    (51) asignacion -> . variable = hyper_exp ;
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (68) write -> . WRITE ( hyper_exp_loop ) ;
    (69) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (76) repeticion -> . condicional
    (77) repeticion -> . no_condicional
    (62) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (78) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (82) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 145 (epsilon -> .)
    ID              shift and go to state 66
    READ            shift and go to state 67
    WRITE           shift and go to state 68
    IF              shift and go to state 69
    RETURN          shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74

    estatuto                       shift and go to state 56
    loop_estatuto                  shift and go to state 80
    epsilon                        shift and go to state 57
    asignacion                     shift and go to state 58
    func_llamada                   shift and go to state 59
    read                           shift and go to state 60
    write                          shift and go to state 61
    decision                       shift and go to state 62
    repeticion                     shift and go to state 63
    func_return                    shift and go to state 64
    variable                       shift and go to state 65
    condicional                    shift and go to state 70
    no_condicional                 shift and go to state 71

state 57

    (75) loop_estatuto -> epsilon .

    }               reduce using rule 75 (loop_estatuto -> epsilon .)


state 58

    (44) estatuto -> asignacion .

    ID              reduce using rule 44 (estatuto -> asignacion .)
    READ            reduce using rule 44 (estatuto -> asignacion .)
    WRITE           reduce using rule 44 (estatuto -> asignacion .)
    IF              reduce using rule 44 (estatuto -> asignacion .)
    RETURN          reduce using rule 44 (estatuto -> asignacion .)
    WHILE           reduce using rule 44 (estatuto -> asignacion .)
    FOR             reduce using rule 44 (estatuto -> asignacion .)
    }               reduce using rule 44 (estatuto -> asignacion .)


state 59

    (45) estatuto -> func_llamada . ;

    ;               shift and go to state 81


state 60

    (46) estatuto -> read .

    ID              reduce using rule 46 (estatuto -> read .)
    READ            reduce using rule 46 (estatuto -> read .)
    WRITE           reduce using rule 46 (estatuto -> read .)
    IF              reduce using rule 46 (estatuto -> read .)
    RETURN          reduce using rule 46 (estatuto -> read .)
    WHILE           reduce using rule 46 (estatuto -> read .)
    FOR             reduce using rule 46 (estatuto -> read .)
    }               reduce using rule 46 (estatuto -> read .)


state 61

    (47) estatuto -> write .

    ID              reduce using rule 47 (estatuto -> write .)
    READ            reduce using rule 47 (estatuto -> write .)
    WRITE           reduce using rule 47 (estatuto -> write .)
    IF              reduce using rule 47 (estatuto -> write .)
    RETURN          reduce using rule 47 (estatuto -> write .)
    WHILE           reduce using rule 47 (estatuto -> write .)
    FOR             reduce using rule 47 (estatuto -> write .)
    }               reduce using rule 47 (estatuto -> write .)


state 62

    (48) estatuto -> decision .

    ID              reduce using rule 48 (estatuto -> decision .)
    READ            reduce using rule 48 (estatuto -> decision .)
    WRITE           reduce using rule 48 (estatuto -> decision .)
    IF              reduce using rule 48 (estatuto -> decision .)
    RETURN          reduce using rule 48 (estatuto -> decision .)
    WHILE           reduce using rule 48 (estatuto -> decision .)
    FOR             reduce using rule 48 (estatuto -> decision .)
    }               reduce using rule 48 (estatuto -> decision .)


state 63

    (49) estatuto -> repeticion .

    ID              reduce using rule 49 (estatuto -> repeticion .)
    READ            reduce using rule 49 (estatuto -> repeticion .)
    WRITE           reduce using rule 49 (estatuto -> repeticion .)
    IF              reduce using rule 49 (estatuto -> repeticion .)
    RETURN          reduce using rule 49 (estatuto -> repeticion .)
    WHILE           reduce using rule 49 (estatuto -> repeticion .)
    FOR             reduce using rule 49 (estatuto -> repeticion .)
    }               reduce using rule 49 (estatuto -> repeticion .)


state 64

    (50) estatuto -> func_return .

    ID              reduce using rule 50 (estatuto -> func_return .)
    READ            reduce using rule 50 (estatuto -> func_return .)
    WRITE           reduce using rule 50 (estatuto -> func_return .)
    IF              reduce using rule 50 (estatuto -> func_return .)
    RETURN          reduce using rule 50 (estatuto -> func_return .)
    WHILE           reduce using rule 50 (estatuto -> func_return .)
    FOR             reduce using rule 50 (estatuto -> func_return .)
    }               reduce using rule 50 (estatuto -> func_return .)


state 65

    (51) asignacion -> variable . = hyper_exp ;

    =               shift and go to state 82


state 66

    (52) func_llamada -> ID . np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (9) variable -> ID . np_single_var_process
    (10) variable -> ID . [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (53) np_fc_1 -> . epsilon
    (118) np_single_var_process -> . epsilon
    (145) epsilon -> .

    [               shift and go to state 85
    (               reduce using rule 145 (epsilon -> .)
    =               reduce using rule 145 (epsilon -> .)

    np_fc_1                        shift and go to state 83
    np_single_var_process          shift and go to state 84
    epsilon                        shift and go to state 86

state 67

    (63) read -> READ . ( variable_loop ) ;

    (               shift and go to state 87


state 68

    (68) write -> WRITE . ( hyper_exp_loop ) ;

    (               shift and go to state 88


state 69

    (69) decision -> IF . ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else

    (               shift and go to state 89


state 70

    (76) repeticion -> condicional .

    ID              reduce using rule 76 (repeticion -> condicional .)
    READ            reduce using rule 76 (repeticion -> condicional .)
    WRITE           reduce using rule 76 (repeticion -> condicional .)
    IF              reduce using rule 76 (repeticion -> condicional .)
    RETURN          reduce using rule 76 (repeticion -> condicional .)
    WHILE           reduce using rule 76 (repeticion -> condicional .)
    FOR             reduce using rule 76 (repeticion -> condicional .)
    }               reduce using rule 76 (repeticion -> condicional .)


state 71

    (77) repeticion -> no_condicional .

    ID              reduce using rule 77 (repeticion -> no_condicional .)
    READ            reduce using rule 77 (repeticion -> no_condicional .)
    WRITE           reduce using rule 77 (repeticion -> no_condicional .)
    IF              reduce using rule 77 (repeticion -> no_condicional .)
    RETURN          reduce using rule 77 (repeticion -> no_condicional .)
    WHILE           reduce using rule 77 (repeticion -> no_condicional .)
    FOR             reduce using rule 77 (repeticion -> no_condicional .)
    }               reduce using rule 77 (repeticion -> no_condicional .)


state 72

    (62) func_return -> RETURN . ( hyper_exp ) ;

    (               shift and go to state 90


state 73

    (78) condicional -> WHILE . np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (79) np_cond_1 -> . epsilon
    (145) epsilon -> .

    (               reduce using rule 145 (epsilon -> .)

    np_cond_1                      shift and go to state 91
    epsilon                        shift and go to state 92

state 74

    (82) no_condicional -> FOR . variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process

    ID              shift and go to state 94

    variable                       shift and go to state 93

state 75

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( . np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (33) np_prep_func_params -> . epsilon
    (145) epsilon -> .

    INT             reduce using rule 145 (epsilon -> .)
    FLOAT           reduce using rule 145 (epsilon -> .)
    CHAR            reduce using rule 145 (epsilon -> .)
    BOOL            reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)

    np_prep_func_params            shift and go to state 95
    epsilon                        shift and go to state 96

state 76

    (15) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable . loop_var_decl_mismo_tipo ;
    (18) loop_var_decl_mismo_tipo -> . , ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo
    (19) loop_var_decl_mismo_tipo -> . epsilon
    (145) epsilon -> .

    ,               shift and go to state 98
    ;               reduce using rule 145 (epsilon -> .)

    loop_var_decl_mismo_tipo       shift and go to state 97
    epsilon                        shift and go to state 99

state 77

    (22) np_add_var_to_varstable -> epsilon .

    ,               reduce using rule 22 (np_add_var_to_varstable -> epsilon .)
    ;               reduce using rule 22 (np_add_var_to_varstable -> epsilon .)


state 78

    (16) array_opcional -> [ VAL_INT . np_push_const_int ]
    (115) np_push_const_int -> . epsilon
    (145) epsilon -> .

    ]               reduce using rule 145 (epsilon -> .)

    np_push_const_int              shift and go to state 100
    epsilon                        shift and go to state 101

state 79

    (4) main -> MAIN np_prep_main ( ) { loop_estatuto } . np_fin_total
    (6) np_fin_total -> . epsilon
    (145) epsilon -> .

    $end            reduce using rule 145 (epsilon -> .)

    np_fin_total                   shift and go to state 102
    epsilon                        shift and go to state 103

state 80

    (74) loop_estatuto -> estatuto loop_estatuto .

    }               reduce using rule 74 (loop_estatuto -> estatuto loop_estatuto .)


state 81

    (45) estatuto -> func_llamada ; .

    ID              reduce using rule 45 (estatuto -> func_llamada ; .)
    READ            reduce using rule 45 (estatuto -> func_llamada ; .)
    WRITE           reduce using rule 45 (estatuto -> func_llamada ; .)
    IF              reduce using rule 45 (estatuto -> func_llamada ; .)
    RETURN          reduce using rule 45 (estatuto -> func_llamada ; .)
    WHILE           reduce using rule 45 (estatuto -> func_llamada ; .)
    FOR             reduce using rule 45 (estatuto -> func_llamada ; .)
    }               reduce using rule 45 (estatuto -> func_llamada ; .)


state 82

    (51) asignacion -> variable = . hyper_exp ;
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    variable                       shift and go to state 104
    hyper_exp                      shift and go to state 105
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 83

    (52) func_llamada -> ID np_fc_1 . ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 140


state 84

    (9) variable -> ID np_single_var_process .

    =               reduce using rule 9 (variable -> ID np_single_var_process .)
    *               reduce using rule 9 (variable -> ID np_single_var_process .)
    /               reduce using rule 9 (variable -> ID np_single_var_process .)
    +               reduce using rule 9 (variable -> ID np_single_var_process .)
    -               reduce using rule 9 (variable -> ID np_single_var_process .)
    <               reduce using rule 9 (variable -> ID np_single_var_process .)
    >               reduce using rule 9 (variable -> ID np_single_var_process .)
    EQUAL_TO        reduce using rule 9 (variable -> ID np_single_var_process .)
    NOT_EQUAL_TO    reduce using rule 9 (variable -> ID np_single_var_process .)
    &               reduce using rule 9 (variable -> ID np_single_var_process .)
    |               reduce using rule 9 (variable -> ID np_single_var_process .)
    ;               reduce using rule 9 (variable -> ID np_single_var_process .)
    ,               reduce using rule 9 (variable -> ID np_single_var_process .)
    )               reduce using rule 9 (variable -> ID np_single_var_process .)
    ]               reduce using rule 9 (variable -> ID np_single_var_process .)
    TO              reduce using rule 9 (variable -> ID np_single_var_process .)
    DO              reduce using rule 9 (variable -> ID np_single_var_process .)


state 85

    (10) variable -> ID [ . np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (104) np_push_operator_stack -> . epsilon
    (145) epsilon -> .

    (               reduce using rule 145 (epsilon -> .)
    VAL_INT         reduce using rule 145 (epsilon -> .)
    VAL_FLOAT       reduce using rule 145 (epsilon -> .)
    VAL_CHAR        reduce using rule 145 (epsilon -> .)
    ID              reduce using rule 145 (epsilon -> .)
    READ            reduce using rule 145 (epsilon -> .)
    MEDIA           reduce using rule 145 (epsilon -> .)
    MEDIANA         reduce using rule 145 (epsilon -> .)
    MODA            reduce using rule 145 (epsilon -> .)
    LEN             reduce using rule 145 (epsilon -> .)
    VARIANZA        reduce using rule 145 (epsilon -> .)
    SEN             reduce using rule 145 (epsilon -> .)
    COS             reduce using rule 145 (epsilon -> .)
    TAN             reduce using rule 145 (epsilon -> .)
    SENH            reduce using rule 145 (epsilon -> .)
    COSH            reduce using rule 145 (epsilon -> .)
    TANH            reduce using rule 145 (epsilon -> .)
    LOG             reduce using rule 145 (epsilon -> .)
    ABS             reduce using rule 145 (epsilon -> .)
    FLOOR           reduce using rule 145 (epsilon -> .)
    CEIL            reduce using rule 145 (epsilon -> .)
    RAND            reduce using rule 145 (epsilon -> .)
    POW             reduce using rule 145 (epsilon -> .)
    MIN             reduce using rule 145 (epsilon -> .)
    MAX             reduce using rule 145 (epsilon -> .)

    np_push_operator_stack         shift and go to state 141
    epsilon                        shift and go to state 142

state 86

    (53) np_fc_1 -> epsilon .
    (118) np_single_var_process -> epsilon .

    (               reduce using rule 53 (np_fc_1 -> epsilon .)
    =               reduce using rule 118 (np_single_var_process -> epsilon .)


state 87

    (63) read -> READ ( . variable_loop ) ;
    (64) variable_loop -> . variable np_add_to_input_counter variable_loop_1
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process

    ID              shift and go to state 94

    variable_loop                  shift and go to state 143
    variable                       shift and go to state 144

state 88

    (68) write -> WRITE ( . hyper_exp_loop ) ;
    (58) hyper_exp_loop -> . hyper_exp np_add_to_input_counter hyper_exp_loop_1
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    hyper_exp_loop                 shift and go to state 145
    hyper_exp                      shift and go to state 146
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 89

    (69) decision -> IF ( . hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    hyper_exp                      shift and go to state 147
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 90

    (62) func_return -> RETURN ( . hyper_exp ) ;
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    hyper_exp                      shift and go to state 148
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 91

    (78) condicional -> WHILE np_cond_1 . ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3

    (               shift and go to state 149


state 92

    (79) np_cond_1 -> epsilon .

    (               reduce using rule 79 (np_cond_1 -> epsilon .)


state 93

    (82) no_condicional -> FOR variable . = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    =               shift and go to state 150


state 94

    (9) variable -> ID . np_single_var_process
    (10) variable -> ID . [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (118) np_single_var_process -> . epsilon
    (145) epsilon -> .

    [               shift and go to state 85
    =               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)

    np_single_var_process          shift and go to state 84
    epsilon                        shift and go to state 151

state 95

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params . func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (34) func_parametro -> . parametro
    (35) func_parametro -> . epsilon
    (36) parametro -> . tipo ID np_add_param loop_parametro
    (145) epsilon -> .
    (40) tipo -> . INT
    (41) tipo -> . FLOAT
    (42) tipo -> . CHAR
    (43) tipo -> . BOOL

    )               reduce using rule 145 (epsilon -> .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOL            shift and go to state 28

    func_parametro                 shift and go to state 152
    parametro                      shift and go to state 153
    epsilon                        shift and go to state 154
    tipo                           shift and go to state 155

state 96

    (33) np_prep_func_params -> epsilon .

    INT             reduce using rule 33 (np_prep_func_params -> epsilon .)
    FLOAT           reduce using rule 33 (np_prep_func_params -> epsilon .)
    CHAR            reduce using rule 33 (np_prep_func_params -> epsilon .)
    BOOL            reduce using rule 33 (np_prep_func_params -> epsilon .)
    )               reduce using rule 33 (np_prep_func_params -> epsilon .)


state 97

    (15) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo . ;

    ;               shift and go to state 156


state 98

    (18) loop_var_decl_mismo_tipo -> , . ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo

    ID              shift and go to state 157


state 99

    (19) loop_var_decl_mismo_tipo -> epsilon .

    ;               reduce using rule 19 (loop_var_decl_mismo_tipo -> epsilon .)


state 100

    (16) array_opcional -> [ VAL_INT np_push_const_int . ]

    ]               shift and go to state 158


state 101

    (115) np_push_const_int -> epsilon .

    ]               reduce using rule 115 (np_push_const_int -> epsilon .)
    *               reduce using rule 115 (np_push_const_int -> epsilon .)
    /               reduce using rule 115 (np_push_const_int -> epsilon .)
    +               reduce using rule 115 (np_push_const_int -> epsilon .)
    -               reduce using rule 115 (np_push_const_int -> epsilon .)
    <               reduce using rule 115 (np_push_const_int -> epsilon .)
    >               reduce using rule 115 (np_push_const_int -> epsilon .)
    EQUAL_TO        reduce using rule 115 (np_push_const_int -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 115 (np_push_const_int -> epsilon .)
    &               reduce using rule 115 (np_push_const_int -> epsilon .)
    |               reduce using rule 115 (np_push_const_int -> epsilon .)
    ;               reduce using rule 115 (np_push_const_int -> epsilon .)
    ,               reduce using rule 115 (np_push_const_int -> epsilon .)
    )               reduce using rule 115 (np_push_const_int -> epsilon .)
    TO              reduce using rule 115 (np_push_const_int -> epsilon .)
    DO              reduce using rule 115 (np_push_const_int -> epsilon .)


state 102

    (4) main -> MAIN np_prep_main ( ) { loop_estatuto } np_fin_total .

    $end            reduce using rule 4 (main -> MAIN np_prep_main ( ) { loop_estatuto } np_fin_total .)


state 103

    (6) np_fin_total -> epsilon .

    $end            reduce using rule 6 (np_fin_total -> epsilon .)


state 104

    (107) factor -> variable .

    *               reduce using rule 107 (factor -> variable .)
    /               reduce using rule 107 (factor -> variable .)
    +               reduce using rule 107 (factor -> variable .)
    -               reduce using rule 107 (factor -> variable .)
    <               reduce using rule 107 (factor -> variable .)
    >               reduce using rule 107 (factor -> variable .)
    EQUAL_TO        reduce using rule 107 (factor -> variable .)
    NOT_EQUAL_TO    reduce using rule 107 (factor -> variable .)
    &               reduce using rule 107 (factor -> variable .)
    |               reduce using rule 107 (factor -> variable .)
    ;               reduce using rule 107 (factor -> variable .)
    ,               reduce using rule 107 (factor -> variable .)
    )               reduce using rule 107 (factor -> variable .)
    ]               reduce using rule 107 (factor -> variable .)
    TO              reduce using rule 107 (factor -> variable .)
    DO              reduce using rule 107 (factor -> variable .)


state 105

    (51) asignacion -> variable = hyper_exp . ;

    ;               shift and go to state 159


state 106

    (86) hyper_exp -> super_exp . hyper_exp_1
    (87) hyper_exp_1 -> . & np_push_operator_stack super_exp
    (88) hyper_exp_1 -> . | np_push_operator_stack super_exp
    (89) hyper_exp_1 -> . epsilon
    (145) epsilon -> .

    &               shift and go to state 161
    |               shift and go to state 162
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    hyper_exp_1                    shift and go to state 160
    epsilon                        shift and go to state 163

state 107

    (90) super_exp -> exp . super_exp_1
    (91) super_exp_1 -> . < np_push_operator_stack exp
    (92) super_exp_1 -> . > np_push_operator_stack exp
    (93) super_exp_1 -> . EQUAL_TO np_push_operator_stack exp
    (94) super_exp_1 -> . NOT_EQUAL_TO np_push_operator_stack exp
    (95) super_exp_1 -> . epsilon
    (145) epsilon -> .

    <               shift and go to state 165
    >               shift and go to state 166
    EQUAL_TO        shift and go to state 167
    NOT_EQUAL_TO    shift and go to state 168
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    super_exp_1                    shift and go to state 164
    epsilon                        shift and go to state 169

state 108

    (96) exp -> term . exp_1
    (97) exp_1 -> . + np_push_operator_stack term
    (98) exp_1 -> . - np_push_operator_stack term
    (99) exp_1 -> . epsilon
    (145) epsilon -> .

    +               shift and go to state 171
    -               shift and go to state 172
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    exp_1                          shift and go to state 170
    epsilon                        shift and go to state 173

state 109

    (100) term -> factor . term_1
    (101) term_1 -> . * np_push_operator_stack factor
    (102) term_1 -> . / np_push_operator_stack factor
    (103) term_1 -> . epsilon
    (145) epsilon -> .

    *               shift and go to state 175
    /               shift and go to state 176
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    term_1                         shift and go to state 174
    epsilon                        shift and go to state 177

state 110

    (106) factor -> constant .

    *               reduce using rule 106 (factor -> constant .)
    /               reduce using rule 106 (factor -> constant .)
    +               reduce using rule 106 (factor -> constant .)
    -               reduce using rule 106 (factor -> constant .)
    <               reduce using rule 106 (factor -> constant .)
    >               reduce using rule 106 (factor -> constant .)
    EQUAL_TO        reduce using rule 106 (factor -> constant .)
    NOT_EQUAL_TO    reduce using rule 106 (factor -> constant .)
    &               reduce using rule 106 (factor -> constant .)
    |               reduce using rule 106 (factor -> constant .)
    ;               reduce using rule 106 (factor -> constant .)
    ,               reduce using rule 106 (factor -> constant .)
    )               reduce using rule 106 (factor -> constant .)
    ]               reduce using rule 106 (factor -> constant .)
    TO              reduce using rule 106 (factor -> constant .)
    DO              reduce using rule 106 (factor -> constant .)


state 111

    (108) factor -> ( . hyper_exp )
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    hyper_exp                      shift and go to state 178
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 112

    (109) factor -> func_llamada .

    *               reduce using rule 109 (factor -> func_llamada .)
    /               reduce using rule 109 (factor -> func_llamada .)
    +               reduce using rule 109 (factor -> func_llamada .)
    -               reduce using rule 109 (factor -> func_llamada .)
    <               reduce using rule 109 (factor -> func_llamada .)
    >               reduce using rule 109 (factor -> func_llamada .)
    EQUAL_TO        reduce using rule 109 (factor -> func_llamada .)
    NOT_EQUAL_TO    reduce using rule 109 (factor -> func_llamada .)
    &               reduce using rule 109 (factor -> func_llamada .)
    |               reduce using rule 109 (factor -> func_llamada .)
    ;               reduce using rule 109 (factor -> func_llamada .)
    ,               reduce using rule 109 (factor -> func_llamada .)
    )               reduce using rule 109 (factor -> func_llamada .)
    ]               reduce using rule 109 (factor -> func_llamada .)
    TO              reduce using rule 109 (factor -> func_llamada .)
    DO              reduce using rule 109 (factor -> func_llamada .)


state 113

    (110) factor -> read .

    *               reduce using rule 110 (factor -> read .)
    /               reduce using rule 110 (factor -> read .)
    +               reduce using rule 110 (factor -> read .)
    -               reduce using rule 110 (factor -> read .)
    <               reduce using rule 110 (factor -> read .)
    >               reduce using rule 110 (factor -> read .)
    EQUAL_TO        reduce using rule 110 (factor -> read .)
    NOT_EQUAL_TO    reduce using rule 110 (factor -> read .)
    &               reduce using rule 110 (factor -> read .)
    |               reduce using rule 110 (factor -> read .)
    ;               reduce using rule 110 (factor -> read .)
    ,               reduce using rule 110 (factor -> read .)
    )               reduce using rule 110 (factor -> read .)
    ]               reduce using rule 110 (factor -> read .)
    TO              reduce using rule 110 (factor -> read .)
    DO              reduce using rule 110 (factor -> read .)


state 114

    (111) factor -> func_mat .

    *               reduce using rule 111 (factor -> func_mat .)
    /               reduce using rule 111 (factor -> func_mat .)
    +               reduce using rule 111 (factor -> func_mat .)
    -               reduce using rule 111 (factor -> func_mat .)
    <               reduce using rule 111 (factor -> func_mat .)
    >               reduce using rule 111 (factor -> func_mat .)
    EQUAL_TO        reduce using rule 111 (factor -> func_mat .)
    NOT_EQUAL_TO    reduce using rule 111 (factor -> func_mat .)
    &               reduce using rule 111 (factor -> func_mat .)
    |               reduce using rule 111 (factor -> func_mat .)
    ;               reduce using rule 111 (factor -> func_mat .)
    ,               reduce using rule 111 (factor -> func_mat .)
    )               reduce using rule 111 (factor -> func_mat .)
    ]               reduce using rule 111 (factor -> func_mat .)
    TO              reduce using rule 111 (factor -> func_mat .)
    DO              reduce using rule 111 (factor -> func_mat .)


state 115

    (112) constant -> VAL_INT . np_push_const_int
    (115) np_push_const_int -> . epsilon
    (145) epsilon -> .

    *               reduce using rule 145 (epsilon -> .)
    /               reduce using rule 145 (epsilon -> .)
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    np_push_const_int              shift and go to state 179
    epsilon                        shift and go to state 101

state 116

    (113) constant -> VAL_FLOAT . np_push_const_float
    (116) np_push_const_float -> . epsilon
    (145) epsilon -> .

    *               reduce using rule 145 (epsilon -> .)
    /               reduce using rule 145 (epsilon -> .)
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    np_push_const_float            shift and go to state 180
    epsilon                        shift and go to state 181

state 117

    (114) constant -> VAL_CHAR . np_push_const_char
    (117) np_push_const_char -> . epsilon
    (145) epsilon -> .

    *               reduce using rule 145 (epsilon -> .)
    /               reduce using rule 145 (epsilon -> .)
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    np_push_const_char             shift and go to state 182
    epsilon                        shift and go to state 183

state 118

    (9) variable -> ID . np_single_var_process
    (10) variable -> ID . [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> ID . np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (118) np_single_var_process -> . epsilon
    (53) np_fc_1 -> . epsilon
    (145) epsilon -> .

    [               shift and go to state 85
    *               reduce using rule 145 (epsilon -> .)
    /               reduce using rule 145 (epsilon -> .)
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)
    (               reduce using rule 145 (epsilon -> .)

    np_single_var_process          shift and go to state 84
    np_fc_1                        shift and go to state 83
    epsilon                        shift and go to state 184

state 119

    (120) func_mat -> fm_1_param .

    *               reduce using rule 120 (func_mat -> fm_1_param .)
    /               reduce using rule 120 (func_mat -> fm_1_param .)
    +               reduce using rule 120 (func_mat -> fm_1_param .)
    -               reduce using rule 120 (func_mat -> fm_1_param .)
    <               reduce using rule 120 (func_mat -> fm_1_param .)
    >               reduce using rule 120 (func_mat -> fm_1_param .)
    EQUAL_TO        reduce using rule 120 (func_mat -> fm_1_param .)
    NOT_EQUAL_TO    reduce using rule 120 (func_mat -> fm_1_param .)
    &               reduce using rule 120 (func_mat -> fm_1_param .)
    |               reduce using rule 120 (func_mat -> fm_1_param .)
    ;               reduce using rule 120 (func_mat -> fm_1_param .)
    ,               reduce using rule 120 (func_mat -> fm_1_param .)
    )               reduce using rule 120 (func_mat -> fm_1_param .)
    ]               reduce using rule 120 (func_mat -> fm_1_param .)
    TO              reduce using rule 120 (func_mat -> fm_1_param .)
    DO              reduce using rule 120 (func_mat -> fm_1_param .)


state 120

    (121) func_mat -> fm_2_param .

    *               reduce using rule 121 (func_mat -> fm_2_param .)
    /               reduce using rule 121 (func_mat -> fm_2_param .)
    +               reduce using rule 121 (func_mat -> fm_2_param .)
    -               reduce using rule 121 (func_mat -> fm_2_param .)
    <               reduce using rule 121 (func_mat -> fm_2_param .)
    >               reduce using rule 121 (func_mat -> fm_2_param .)
    EQUAL_TO        reduce using rule 121 (func_mat -> fm_2_param .)
    NOT_EQUAL_TO    reduce using rule 121 (func_mat -> fm_2_param .)
    &               reduce using rule 121 (func_mat -> fm_2_param .)
    |               reduce using rule 121 (func_mat -> fm_2_param .)
    ;               reduce using rule 121 (func_mat -> fm_2_param .)
    ,               reduce using rule 121 (func_mat -> fm_2_param .)
    )               reduce using rule 121 (func_mat -> fm_2_param .)
    ]               reduce using rule 121 (func_mat -> fm_2_param .)
    TO              reduce using rule 121 (func_mat -> fm_2_param .)
    DO              reduce using rule 121 (func_mat -> fm_2_param .)


state 121

    (122) fm_1_param -> MEDIA . ( ID ) np_arr_input

    (               shift and go to state 185


state 122

    (123) fm_1_param -> MEDIANA . ( ID ) np_arr_input

    (               shift and go to state 186


state 123

    (124) fm_1_param -> MODA . ( ID ) np_arr_input

    (               shift and go to state 187


state 124

    (125) fm_1_param -> LEN . ( ID ) np_arr_input

    (               shift and go to state 188


state 125

    (126) fm_1_param -> VARIANZA . ( ID ) np_arr_input

    (               shift and go to state 189


state 126

    (127) fm_1_param -> SEN . ( hyper_exp ) np_he_input

    (               shift and go to state 190


state 127

    (128) fm_1_param -> COS . ( hyper_exp ) np_he_input

    (               shift and go to state 191


state 128

    (129) fm_1_param -> TAN . ( hyper_exp ) np_he_input

    (               shift and go to state 192


state 129

    (130) fm_1_param -> SENH . ( hyper_exp ) np_he_input

    (               shift and go to state 193


state 130

    (131) fm_1_param -> COSH . ( hyper_exp ) np_he_input

    (               shift and go to state 194


state 131

    (132) fm_1_param -> TANH . ( hyper_exp ) np_he_input

    (               shift and go to state 195


state 132

    (133) fm_1_param -> LOG . ( hyper_exp ) np_he_input

    (               shift and go to state 196


state 133

    (134) fm_1_param -> ABS . ( hyper_exp ) np_he_input

    (               shift and go to state 197


state 134

    (135) fm_1_param -> FLOOR . ( hyper_exp ) np_he_input

    (               shift and go to state 198


state 135

    (136) fm_1_param -> CEIL . ( hyper_exp ) np_he_input

    (               shift and go to state 199


state 136

    (139) fm_2_param -> RAND . ( hyper_exp , hyper_exp ) np_int_input

    (               shift and go to state 200


state 137

    (140) fm_2_param -> POW . ( hyper_exp , hyper_exp ) np_int_input

    (               shift and go to state 201


state 138

    (141) fm_2_param -> MIN . ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 202


state 139

    (142) fm_2_param -> MAX . ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 203


state 140

    (52) func_llamada -> ID np_fc_1 ( . np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (104) np_push_operator_stack -> . epsilon
    (145) epsilon -> .

    (               reduce using rule 145 (epsilon -> .)
    VAL_INT         reduce using rule 145 (epsilon -> .)
    VAL_FLOAT       reduce using rule 145 (epsilon -> .)
    VAL_CHAR        reduce using rule 145 (epsilon -> .)
    ID              reduce using rule 145 (epsilon -> .)
    READ            reduce using rule 145 (epsilon -> .)
    MEDIA           reduce using rule 145 (epsilon -> .)
    MEDIANA         reduce using rule 145 (epsilon -> .)
    MODA            reduce using rule 145 (epsilon -> .)
    LEN             reduce using rule 145 (epsilon -> .)
    VARIANZA        reduce using rule 145 (epsilon -> .)
    SEN             reduce using rule 145 (epsilon -> .)
    COS             reduce using rule 145 (epsilon -> .)
    TAN             reduce using rule 145 (epsilon -> .)
    SENH            reduce using rule 145 (epsilon -> .)
    COSH            reduce using rule 145 (epsilon -> .)
    TANH            reduce using rule 145 (epsilon -> .)
    LOG             reduce using rule 145 (epsilon -> .)
    ABS             reduce using rule 145 (epsilon -> .)
    FLOOR           reduce using rule 145 (epsilon -> .)
    CEIL            reduce using rule 145 (epsilon -> .)
    RAND            reduce using rule 145 (epsilon -> .)
    POW             reduce using rule 145 (epsilon -> .)
    MIN             reduce using rule 145 (epsilon -> .)
    MAX             reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)

    np_push_operator_stack         shift and go to state 204
    epsilon                        shift and go to state 142

state 141

    (10) variable -> ID [ np_push_operator_stack . hyper_exp ] np_pop_operator_stack np_array_var_process
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    hyper_exp                      shift and go to state 205
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 142

    (104) np_push_operator_stack -> epsilon .

    (               reduce using rule 104 (np_push_operator_stack -> epsilon .)
    VAL_INT         reduce using rule 104 (np_push_operator_stack -> epsilon .)
    VAL_FLOAT       reduce using rule 104 (np_push_operator_stack -> epsilon .)
    VAL_CHAR        reduce using rule 104 (np_push_operator_stack -> epsilon .)
    ID              reduce using rule 104 (np_push_operator_stack -> epsilon .)
    READ            reduce using rule 104 (np_push_operator_stack -> epsilon .)
    MEDIA           reduce using rule 104 (np_push_operator_stack -> epsilon .)
    MEDIANA         reduce using rule 104 (np_push_operator_stack -> epsilon .)
    MODA            reduce using rule 104 (np_push_operator_stack -> epsilon .)
    LEN             reduce using rule 104 (np_push_operator_stack -> epsilon .)
    VARIANZA        reduce using rule 104 (np_push_operator_stack -> epsilon .)
    SEN             reduce using rule 104 (np_push_operator_stack -> epsilon .)
    COS             reduce using rule 104 (np_push_operator_stack -> epsilon .)
    TAN             reduce using rule 104 (np_push_operator_stack -> epsilon .)
    SENH            reduce using rule 104 (np_push_operator_stack -> epsilon .)
    COSH            reduce using rule 104 (np_push_operator_stack -> epsilon .)
    TANH            reduce using rule 104 (np_push_operator_stack -> epsilon .)
    LOG             reduce using rule 104 (np_push_operator_stack -> epsilon .)
    ABS             reduce using rule 104 (np_push_operator_stack -> epsilon .)
    FLOOR           reduce using rule 104 (np_push_operator_stack -> epsilon .)
    CEIL            reduce using rule 104 (np_push_operator_stack -> epsilon .)
    RAND            reduce using rule 104 (np_push_operator_stack -> epsilon .)
    POW             reduce using rule 104 (np_push_operator_stack -> epsilon .)
    MIN             reduce using rule 104 (np_push_operator_stack -> epsilon .)
    MAX             reduce using rule 104 (np_push_operator_stack -> epsilon .)
    )               reduce using rule 104 (np_push_operator_stack -> epsilon .)


state 143

    (63) read -> READ ( variable_loop . ) ;

    )               shift and go to state 206


state 144

    (64) variable_loop -> variable . np_add_to_input_counter variable_loop_1
    (67) np_add_to_input_counter -> . epsilon
    (145) epsilon -> .

    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)

    np_add_to_input_counter        shift and go to state 207
    epsilon                        shift and go to state 208

state 145

    (68) write -> WRITE ( hyper_exp_loop . ) ;

    )               shift and go to state 209


state 146

    (58) hyper_exp_loop -> hyper_exp . np_add_to_input_counter hyper_exp_loop_1
    (67) np_add_to_input_counter -> . epsilon
    (145) epsilon -> .

    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)

    np_add_to_input_counter        shift and go to state 210
    epsilon                        shift and go to state 208

state 147

    (69) decision -> IF ( hyper_exp . ) np_decision_1 THEN { loop_estatuto } decision_else

    )               shift and go to state 211


state 148

    (62) func_return -> RETURN ( hyper_exp . ) ;

    )               shift and go to state 212


state 149

    (78) condicional -> WHILE np_cond_1 ( . hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    hyper_exp                      shift and go to state 213
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 150

    (82) no_condicional -> FOR variable = . hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    variable                       shift and go to state 104
    hyper_exp                      shift and go to state 214
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 151

    (118) np_single_var_process -> epsilon .

    =               reduce using rule 118 (np_single_var_process -> epsilon .)
    ,               reduce using rule 118 (np_single_var_process -> epsilon .)
    )               reduce using rule 118 (np_single_var_process -> epsilon .)


state 152

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro . ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func

    )               shift and go to state 215


state 153

    (34) func_parametro -> parametro .

    )               reduce using rule 34 (func_parametro -> parametro .)


state 154

    (35) func_parametro -> epsilon .

    )               reduce using rule 35 (func_parametro -> epsilon .)


state 155

    (36) parametro -> tipo . ID np_add_param loop_parametro

    ID              shift and go to state 216


state 156

    (15) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ; .

    INT             reduce using rule 15 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    FLOAT           reduce using rule 15 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    CHAR            reduce using rule 15 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    BOOL            reduce using rule 15 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    FUNCTION        reduce using rule 15 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    MAIN            reduce using rule 15 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    {               reduce using rule 15 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)


state 157

    (18) loop_var_decl_mismo_tipo -> , ID . np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo
    (21) np_set_curr_var_name -> . epsilon
    (145) epsilon -> .

    [               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)

    np_set_curr_var_name           shift and go to state 217
    epsilon                        shift and go to state 48

state 158

    (16) array_opcional -> [ VAL_INT np_push_const_int ] .

    ,               reduce using rule 16 (array_opcional -> [ VAL_INT np_push_const_int ] .)
    ;               reduce using rule 16 (array_opcional -> [ VAL_INT np_push_const_int ] .)


state 159

    (51) asignacion -> variable = hyper_exp ; .

    ID              reduce using rule 51 (asignacion -> variable = hyper_exp ; .)
    READ            reduce using rule 51 (asignacion -> variable = hyper_exp ; .)
    WRITE           reduce using rule 51 (asignacion -> variable = hyper_exp ; .)
    IF              reduce using rule 51 (asignacion -> variable = hyper_exp ; .)
    RETURN          reduce using rule 51 (asignacion -> variable = hyper_exp ; .)
    WHILE           reduce using rule 51 (asignacion -> variable = hyper_exp ; .)
    FOR             reduce using rule 51 (asignacion -> variable = hyper_exp ; .)
    }               reduce using rule 51 (asignacion -> variable = hyper_exp ; .)


state 160

    (86) hyper_exp -> super_exp hyper_exp_1 .

    ;               reduce using rule 86 (hyper_exp -> super_exp hyper_exp_1 .)
    ,               reduce using rule 86 (hyper_exp -> super_exp hyper_exp_1 .)
    )               reduce using rule 86 (hyper_exp -> super_exp hyper_exp_1 .)
    ]               reduce using rule 86 (hyper_exp -> super_exp hyper_exp_1 .)
    TO              reduce using rule 86 (hyper_exp -> super_exp hyper_exp_1 .)
    DO              reduce using rule 86 (hyper_exp -> super_exp hyper_exp_1 .)


state 161

    (87) hyper_exp_1 -> & . np_push_operator_stack super_exp
    (104) np_push_operator_stack -> . epsilon
    (145) epsilon -> .

    (               reduce using rule 145 (epsilon -> .)
    VAL_INT         reduce using rule 145 (epsilon -> .)
    VAL_FLOAT       reduce using rule 145 (epsilon -> .)
    VAL_CHAR        reduce using rule 145 (epsilon -> .)
    ID              reduce using rule 145 (epsilon -> .)
    READ            reduce using rule 145 (epsilon -> .)
    MEDIA           reduce using rule 145 (epsilon -> .)
    MEDIANA         reduce using rule 145 (epsilon -> .)
    MODA            reduce using rule 145 (epsilon -> .)
    LEN             reduce using rule 145 (epsilon -> .)
    VARIANZA        reduce using rule 145 (epsilon -> .)
    SEN             reduce using rule 145 (epsilon -> .)
    COS             reduce using rule 145 (epsilon -> .)
    TAN             reduce using rule 145 (epsilon -> .)
    SENH            reduce using rule 145 (epsilon -> .)
    COSH            reduce using rule 145 (epsilon -> .)
    TANH            reduce using rule 145 (epsilon -> .)
    LOG             reduce using rule 145 (epsilon -> .)
    ABS             reduce using rule 145 (epsilon -> .)
    FLOOR           reduce using rule 145 (epsilon -> .)
    CEIL            reduce using rule 145 (epsilon -> .)
    RAND            reduce using rule 145 (epsilon -> .)
    POW             reduce using rule 145 (epsilon -> .)
    MIN             reduce using rule 145 (epsilon -> .)
    MAX             reduce using rule 145 (epsilon -> .)

    np_push_operator_stack         shift and go to state 218
    epsilon                        shift and go to state 142

state 162

    (88) hyper_exp_1 -> | . np_push_operator_stack super_exp
    (104) np_push_operator_stack -> . epsilon
    (145) epsilon -> .

    (               reduce using rule 145 (epsilon -> .)
    VAL_INT         reduce using rule 145 (epsilon -> .)
    VAL_FLOAT       reduce using rule 145 (epsilon -> .)
    VAL_CHAR        reduce using rule 145 (epsilon -> .)
    ID              reduce using rule 145 (epsilon -> .)
    READ            reduce using rule 145 (epsilon -> .)
    MEDIA           reduce using rule 145 (epsilon -> .)
    MEDIANA         reduce using rule 145 (epsilon -> .)
    MODA            reduce using rule 145 (epsilon -> .)
    LEN             reduce using rule 145 (epsilon -> .)
    VARIANZA        reduce using rule 145 (epsilon -> .)
    SEN             reduce using rule 145 (epsilon -> .)
    COS             reduce using rule 145 (epsilon -> .)
    TAN             reduce using rule 145 (epsilon -> .)
    SENH            reduce using rule 145 (epsilon -> .)
    COSH            reduce using rule 145 (epsilon -> .)
    TANH            reduce using rule 145 (epsilon -> .)
    LOG             reduce using rule 145 (epsilon -> .)
    ABS             reduce using rule 145 (epsilon -> .)
    FLOOR           reduce using rule 145 (epsilon -> .)
    CEIL            reduce using rule 145 (epsilon -> .)
    RAND            reduce using rule 145 (epsilon -> .)
    POW             reduce using rule 145 (epsilon -> .)
    MIN             reduce using rule 145 (epsilon -> .)
    MAX             reduce using rule 145 (epsilon -> .)

    np_push_operator_stack         shift and go to state 219
    epsilon                        shift and go to state 142

state 163

    (89) hyper_exp_1 -> epsilon .

    ;               reduce using rule 89 (hyper_exp_1 -> epsilon .)
    ,               reduce using rule 89 (hyper_exp_1 -> epsilon .)
    )               reduce using rule 89 (hyper_exp_1 -> epsilon .)
    ]               reduce using rule 89 (hyper_exp_1 -> epsilon .)
    TO              reduce using rule 89 (hyper_exp_1 -> epsilon .)
    DO              reduce using rule 89 (hyper_exp_1 -> epsilon .)


state 164

    (90) super_exp -> exp super_exp_1 .

    &               reduce using rule 90 (super_exp -> exp super_exp_1 .)
    |               reduce using rule 90 (super_exp -> exp super_exp_1 .)
    ;               reduce using rule 90 (super_exp -> exp super_exp_1 .)
    ,               reduce using rule 90 (super_exp -> exp super_exp_1 .)
    )               reduce using rule 90 (super_exp -> exp super_exp_1 .)
    ]               reduce using rule 90 (super_exp -> exp super_exp_1 .)
    TO              reduce using rule 90 (super_exp -> exp super_exp_1 .)
    DO              reduce using rule 90 (super_exp -> exp super_exp_1 .)


state 165

    (91) super_exp_1 -> < . np_push_operator_stack exp
    (104) np_push_operator_stack -> . epsilon
    (145) epsilon -> .

    (               reduce using rule 145 (epsilon -> .)
    VAL_INT         reduce using rule 145 (epsilon -> .)
    VAL_FLOAT       reduce using rule 145 (epsilon -> .)
    VAL_CHAR        reduce using rule 145 (epsilon -> .)
    ID              reduce using rule 145 (epsilon -> .)
    READ            reduce using rule 145 (epsilon -> .)
    MEDIA           reduce using rule 145 (epsilon -> .)
    MEDIANA         reduce using rule 145 (epsilon -> .)
    MODA            reduce using rule 145 (epsilon -> .)
    LEN             reduce using rule 145 (epsilon -> .)
    VARIANZA        reduce using rule 145 (epsilon -> .)
    SEN             reduce using rule 145 (epsilon -> .)
    COS             reduce using rule 145 (epsilon -> .)
    TAN             reduce using rule 145 (epsilon -> .)
    SENH            reduce using rule 145 (epsilon -> .)
    COSH            reduce using rule 145 (epsilon -> .)
    TANH            reduce using rule 145 (epsilon -> .)
    LOG             reduce using rule 145 (epsilon -> .)
    ABS             reduce using rule 145 (epsilon -> .)
    FLOOR           reduce using rule 145 (epsilon -> .)
    CEIL            reduce using rule 145 (epsilon -> .)
    RAND            reduce using rule 145 (epsilon -> .)
    POW             reduce using rule 145 (epsilon -> .)
    MIN             reduce using rule 145 (epsilon -> .)
    MAX             reduce using rule 145 (epsilon -> .)

    np_push_operator_stack         shift and go to state 220
    epsilon                        shift and go to state 142

state 166

    (92) super_exp_1 -> > . np_push_operator_stack exp
    (104) np_push_operator_stack -> . epsilon
    (145) epsilon -> .

    (               reduce using rule 145 (epsilon -> .)
    VAL_INT         reduce using rule 145 (epsilon -> .)
    VAL_FLOAT       reduce using rule 145 (epsilon -> .)
    VAL_CHAR        reduce using rule 145 (epsilon -> .)
    ID              reduce using rule 145 (epsilon -> .)
    READ            reduce using rule 145 (epsilon -> .)
    MEDIA           reduce using rule 145 (epsilon -> .)
    MEDIANA         reduce using rule 145 (epsilon -> .)
    MODA            reduce using rule 145 (epsilon -> .)
    LEN             reduce using rule 145 (epsilon -> .)
    VARIANZA        reduce using rule 145 (epsilon -> .)
    SEN             reduce using rule 145 (epsilon -> .)
    COS             reduce using rule 145 (epsilon -> .)
    TAN             reduce using rule 145 (epsilon -> .)
    SENH            reduce using rule 145 (epsilon -> .)
    COSH            reduce using rule 145 (epsilon -> .)
    TANH            reduce using rule 145 (epsilon -> .)
    LOG             reduce using rule 145 (epsilon -> .)
    ABS             reduce using rule 145 (epsilon -> .)
    FLOOR           reduce using rule 145 (epsilon -> .)
    CEIL            reduce using rule 145 (epsilon -> .)
    RAND            reduce using rule 145 (epsilon -> .)
    POW             reduce using rule 145 (epsilon -> .)
    MIN             reduce using rule 145 (epsilon -> .)
    MAX             reduce using rule 145 (epsilon -> .)

    np_push_operator_stack         shift and go to state 221
    epsilon                        shift and go to state 142

state 167

    (93) super_exp_1 -> EQUAL_TO . np_push_operator_stack exp
    (104) np_push_operator_stack -> . epsilon
    (145) epsilon -> .

    (               reduce using rule 145 (epsilon -> .)
    VAL_INT         reduce using rule 145 (epsilon -> .)
    VAL_FLOAT       reduce using rule 145 (epsilon -> .)
    VAL_CHAR        reduce using rule 145 (epsilon -> .)
    ID              reduce using rule 145 (epsilon -> .)
    READ            reduce using rule 145 (epsilon -> .)
    MEDIA           reduce using rule 145 (epsilon -> .)
    MEDIANA         reduce using rule 145 (epsilon -> .)
    MODA            reduce using rule 145 (epsilon -> .)
    LEN             reduce using rule 145 (epsilon -> .)
    VARIANZA        reduce using rule 145 (epsilon -> .)
    SEN             reduce using rule 145 (epsilon -> .)
    COS             reduce using rule 145 (epsilon -> .)
    TAN             reduce using rule 145 (epsilon -> .)
    SENH            reduce using rule 145 (epsilon -> .)
    COSH            reduce using rule 145 (epsilon -> .)
    TANH            reduce using rule 145 (epsilon -> .)
    LOG             reduce using rule 145 (epsilon -> .)
    ABS             reduce using rule 145 (epsilon -> .)
    FLOOR           reduce using rule 145 (epsilon -> .)
    CEIL            reduce using rule 145 (epsilon -> .)
    RAND            reduce using rule 145 (epsilon -> .)
    POW             reduce using rule 145 (epsilon -> .)
    MIN             reduce using rule 145 (epsilon -> .)
    MAX             reduce using rule 145 (epsilon -> .)

    np_push_operator_stack         shift and go to state 222
    epsilon                        shift and go to state 142

state 168

    (94) super_exp_1 -> NOT_EQUAL_TO . np_push_operator_stack exp
    (104) np_push_operator_stack -> . epsilon
    (145) epsilon -> .

    (               reduce using rule 145 (epsilon -> .)
    VAL_INT         reduce using rule 145 (epsilon -> .)
    VAL_FLOAT       reduce using rule 145 (epsilon -> .)
    VAL_CHAR        reduce using rule 145 (epsilon -> .)
    ID              reduce using rule 145 (epsilon -> .)
    READ            reduce using rule 145 (epsilon -> .)
    MEDIA           reduce using rule 145 (epsilon -> .)
    MEDIANA         reduce using rule 145 (epsilon -> .)
    MODA            reduce using rule 145 (epsilon -> .)
    LEN             reduce using rule 145 (epsilon -> .)
    VARIANZA        reduce using rule 145 (epsilon -> .)
    SEN             reduce using rule 145 (epsilon -> .)
    COS             reduce using rule 145 (epsilon -> .)
    TAN             reduce using rule 145 (epsilon -> .)
    SENH            reduce using rule 145 (epsilon -> .)
    COSH            reduce using rule 145 (epsilon -> .)
    TANH            reduce using rule 145 (epsilon -> .)
    LOG             reduce using rule 145 (epsilon -> .)
    ABS             reduce using rule 145 (epsilon -> .)
    FLOOR           reduce using rule 145 (epsilon -> .)
    CEIL            reduce using rule 145 (epsilon -> .)
    RAND            reduce using rule 145 (epsilon -> .)
    POW             reduce using rule 145 (epsilon -> .)
    MIN             reduce using rule 145 (epsilon -> .)
    MAX             reduce using rule 145 (epsilon -> .)

    np_push_operator_stack         shift and go to state 223
    epsilon                        shift and go to state 142

state 169

    (95) super_exp_1 -> epsilon .

    &               reduce using rule 95 (super_exp_1 -> epsilon .)
    |               reduce using rule 95 (super_exp_1 -> epsilon .)
    ;               reduce using rule 95 (super_exp_1 -> epsilon .)
    ,               reduce using rule 95 (super_exp_1 -> epsilon .)
    )               reduce using rule 95 (super_exp_1 -> epsilon .)
    ]               reduce using rule 95 (super_exp_1 -> epsilon .)
    TO              reduce using rule 95 (super_exp_1 -> epsilon .)
    DO              reduce using rule 95 (super_exp_1 -> epsilon .)


state 170

    (96) exp -> term exp_1 .

    <               reduce using rule 96 (exp -> term exp_1 .)
    >               reduce using rule 96 (exp -> term exp_1 .)
    EQUAL_TO        reduce using rule 96 (exp -> term exp_1 .)
    NOT_EQUAL_TO    reduce using rule 96 (exp -> term exp_1 .)
    &               reduce using rule 96 (exp -> term exp_1 .)
    |               reduce using rule 96 (exp -> term exp_1 .)
    ;               reduce using rule 96 (exp -> term exp_1 .)
    ,               reduce using rule 96 (exp -> term exp_1 .)
    )               reduce using rule 96 (exp -> term exp_1 .)
    ]               reduce using rule 96 (exp -> term exp_1 .)
    TO              reduce using rule 96 (exp -> term exp_1 .)
    DO              reduce using rule 96 (exp -> term exp_1 .)


state 171

    (97) exp_1 -> + . np_push_operator_stack term
    (104) np_push_operator_stack -> . epsilon
    (145) epsilon -> .

    (               reduce using rule 145 (epsilon -> .)
    VAL_INT         reduce using rule 145 (epsilon -> .)
    VAL_FLOAT       reduce using rule 145 (epsilon -> .)
    VAL_CHAR        reduce using rule 145 (epsilon -> .)
    ID              reduce using rule 145 (epsilon -> .)
    READ            reduce using rule 145 (epsilon -> .)
    MEDIA           reduce using rule 145 (epsilon -> .)
    MEDIANA         reduce using rule 145 (epsilon -> .)
    MODA            reduce using rule 145 (epsilon -> .)
    LEN             reduce using rule 145 (epsilon -> .)
    VARIANZA        reduce using rule 145 (epsilon -> .)
    SEN             reduce using rule 145 (epsilon -> .)
    COS             reduce using rule 145 (epsilon -> .)
    TAN             reduce using rule 145 (epsilon -> .)
    SENH            reduce using rule 145 (epsilon -> .)
    COSH            reduce using rule 145 (epsilon -> .)
    TANH            reduce using rule 145 (epsilon -> .)
    LOG             reduce using rule 145 (epsilon -> .)
    ABS             reduce using rule 145 (epsilon -> .)
    FLOOR           reduce using rule 145 (epsilon -> .)
    CEIL            reduce using rule 145 (epsilon -> .)
    RAND            reduce using rule 145 (epsilon -> .)
    POW             reduce using rule 145 (epsilon -> .)
    MIN             reduce using rule 145 (epsilon -> .)
    MAX             reduce using rule 145 (epsilon -> .)

    np_push_operator_stack         shift and go to state 224
    epsilon                        shift and go to state 142

state 172

    (98) exp_1 -> - . np_push_operator_stack term
    (104) np_push_operator_stack -> . epsilon
    (145) epsilon -> .

    (               reduce using rule 145 (epsilon -> .)
    VAL_INT         reduce using rule 145 (epsilon -> .)
    VAL_FLOAT       reduce using rule 145 (epsilon -> .)
    VAL_CHAR        reduce using rule 145 (epsilon -> .)
    ID              reduce using rule 145 (epsilon -> .)
    READ            reduce using rule 145 (epsilon -> .)
    MEDIA           reduce using rule 145 (epsilon -> .)
    MEDIANA         reduce using rule 145 (epsilon -> .)
    MODA            reduce using rule 145 (epsilon -> .)
    LEN             reduce using rule 145 (epsilon -> .)
    VARIANZA        reduce using rule 145 (epsilon -> .)
    SEN             reduce using rule 145 (epsilon -> .)
    COS             reduce using rule 145 (epsilon -> .)
    TAN             reduce using rule 145 (epsilon -> .)
    SENH            reduce using rule 145 (epsilon -> .)
    COSH            reduce using rule 145 (epsilon -> .)
    TANH            reduce using rule 145 (epsilon -> .)
    LOG             reduce using rule 145 (epsilon -> .)
    ABS             reduce using rule 145 (epsilon -> .)
    FLOOR           reduce using rule 145 (epsilon -> .)
    CEIL            reduce using rule 145 (epsilon -> .)
    RAND            reduce using rule 145 (epsilon -> .)
    POW             reduce using rule 145 (epsilon -> .)
    MIN             reduce using rule 145 (epsilon -> .)
    MAX             reduce using rule 145 (epsilon -> .)

    np_push_operator_stack         shift and go to state 225
    epsilon                        shift and go to state 142

state 173

    (99) exp_1 -> epsilon .

    <               reduce using rule 99 (exp_1 -> epsilon .)
    >               reduce using rule 99 (exp_1 -> epsilon .)
    EQUAL_TO        reduce using rule 99 (exp_1 -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 99 (exp_1 -> epsilon .)
    &               reduce using rule 99 (exp_1 -> epsilon .)
    |               reduce using rule 99 (exp_1 -> epsilon .)
    ;               reduce using rule 99 (exp_1 -> epsilon .)
    ,               reduce using rule 99 (exp_1 -> epsilon .)
    )               reduce using rule 99 (exp_1 -> epsilon .)
    ]               reduce using rule 99 (exp_1 -> epsilon .)
    TO              reduce using rule 99 (exp_1 -> epsilon .)
    DO              reduce using rule 99 (exp_1 -> epsilon .)


state 174

    (100) term -> factor term_1 .

    +               reduce using rule 100 (term -> factor term_1 .)
    -               reduce using rule 100 (term -> factor term_1 .)
    <               reduce using rule 100 (term -> factor term_1 .)
    >               reduce using rule 100 (term -> factor term_1 .)
    EQUAL_TO        reduce using rule 100 (term -> factor term_1 .)
    NOT_EQUAL_TO    reduce using rule 100 (term -> factor term_1 .)
    &               reduce using rule 100 (term -> factor term_1 .)
    |               reduce using rule 100 (term -> factor term_1 .)
    ;               reduce using rule 100 (term -> factor term_1 .)
    ,               reduce using rule 100 (term -> factor term_1 .)
    )               reduce using rule 100 (term -> factor term_1 .)
    ]               reduce using rule 100 (term -> factor term_1 .)
    TO              reduce using rule 100 (term -> factor term_1 .)
    DO              reduce using rule 100 (term -> factor term_1 .)


state 175

    (101) term_1 -> * . np_push_operator_stack factor
    (104) np_push_operator_stack -> . epsilon
    (145) epsilon -> .

    (               reduce using rule 145 (epsilon -> .)
    VAL_INT         reduce using rule 145 (epsilon -> .)
    VAL_FLOAT       reduce using rule 145 (epsilon -> .)
    VAL_CHAR        reduce using rule 145 (epsilon -> .)
    ID              reduce using rule 145 (epsilon -> .)
    READ            reduce using rule 145 (epsilon -> .)
    MEDIA           reduce using rule 145 (epsilon -> .)
    MEDIANA         reduce using rule 145 (epsilon -> .)
    MODA            reduce using rule 145 (epsilon -> .)
    LEN             reduce using rule 145 (epsilon -> .)
    VARIANZA        reduce using rule 145 (epsilon -> .)
    SEN             reduce using rule 145 (epsilon -> .)
    COS             reduce using rule 145 (epsilon -> .)
    TAN             reduce using rule 145 (epsilon -> .)
    SENH            reduce using rule 145 (epsilon -> .)
    COSH            reduce using rule 145 (epsilon -> .)
    TANH            reduce using rule 145 (epsilon -> .)
    LOG             reduce using rule 145 (epsilon -> .)
    ABS             reduce using rule 145 (epsilon -> .)
    FLOOR           reduce using rule 145 (epsilon -> .)
    CEIL            reduce using rule 145 (epsilon -> .)
    RAND            reduce using rule 145 (epsilon -> .)
    POW             reduce using rule 145 (epsilon -> .)
    MIN             reduce using rule 145 (epsilon -> .)
    MAX             reduce using rule 145 (epsilon -> .)

    np_push_operator_stack         shift and go to state 226
    epsilon                        shift and go to state 142

state 176

    (102) term_1 -> / . np_push_operator_stack factor
    (104) np_push_operator_stack -> . epsilon
    (145) epsilon -> .

    (               reduce using rule 145 (epsilon -> .)
    VAL_INT         reduce using rule 145 (epsilon -> .)
    VAL_FLOAT       reduce using rule 145 (epsilon -> .)
    VAL_CHAR        reduce using rule 145 (epsilon -> .)
    ID              reduce using rule 145 (epsilon -> .)
    READ            reduce using rule 145 (epsilon -> .)
    MEDIA           reduce using rule 145 (epsilon -> .)
    MEDIANA         reduce using rule 145 (epsilon -> .)
    MODA            reduce using rule 145 (epsilon -> .)
    LEN             reduce using rule 145 (epsilon -> .)
    VARIANZA        reduce using rule 145 (epsilon -> .)
    SEN             reduce using rule 145 (epsilon -> .)
    COS             reduce using rule 145 (epsilon -> .)
    TAN             reduce using rule 145 (epsilon -> .)
    SENH            reduce using rule 145 (epsilon -> .)
    COSH            reduce using rule 145 (epsilon -> .)
    TANH            reduce using rule 145 (epsilon -> .)
    LOG             reduce using rule 145 (epsilon -> .)
    ABS             reduce using rule 145 (epsilon -> .)
    FLOOR           reduce using rule 145 (epsilon -> .)
    CEIL            reduce using rule 145 (epsilon -> .)
    RAND            reduce using rule 145 (epsilon -> .)
    POW             reduce using rule 145 (epsilon -> .)
    MIN             reduce using rule 145 (epsilon -> .)
    MAX             reduce using rule 145 (epsilon -> .)

    np_push_operator_stack         shift and go to state 227
    epsilon                        shift and go to state 142

state 177

    (103) term_1 -> epsilon .

    +               reduce using rule 103 (term_1 -> epsilon .)
    -               reduce using rule 103 (term_1 -> epsilon .)
    <               reduce using rule 103 (term_1 -> epsilon .)
    >               reduce using rule 103 (term_1 -> epsilon .)
    EQUAL_TO        reduce using rule 103 (term_1 -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 103 (term_1 -> epsilon .)
    &               reduce using rule 103 (term_1 -> epsilon .)
    |               reduce using rule 103 (term_1 -> epsilon .)
    ;               reduce using rule 103 (term_1 -> epsilon .)
    ,               reduce using rule 103 (term_1 -> epsilon .)
    )               reduce using rule 103 (term_1 -> epsilon .)
    ]               reduce using rule 103 (term_1 -> epsilon .)
    TO              reduce using rule 103 (term_1 -> epsilon .)
    DO              reduce using rule 103 (term_1 -> epsilon .)


state 178

    (108) factor -> ( hyper_exp . )

    )               shift and go to state 228


state 179

    (112) constant -> VAL_INT np_push_const_int .

    *               reduce using rule 112 (constant -> VAL_INT np_push_const_int .)
    /               reduce using rule 112 (constant -> VAL_INT np_push_const_int .)
    +               reduce using rule 112 (constant -> VAL_INT np_push_const_int .)
    -               reduce using rule 112 (constant -> VAL_INT np_push_const_int .)
    <               reduce using rule 112 (constant -> VAL_INT np_push_const_int .)
    >               reduce using rule 112 (constant -> VAL_INT np_push_const_int .)
    EQUAL_TO        reduce using rule 112 (constant -> VAL_INT np_push_const_int .)
    NOT_EQUAL_TO    reduce using rule 112 (constant -> VAL_INT np_push_const_int .)
    &               reduce using rule 112 (constant -> VAL_INT np_push_const_int .)
    |               reduce using rule 112 (constant -> VAL_INT np_push_const_int .)
    ;               reduce using rule 112 (constant -> VAL_INT np_push_const_int .)
    ,               reduce using rule 112 (constant -> VAL_INT np_push_const_int .)
    )               reduce using rule 112 (constant -> VAL_INT np_push_const_int .)
    ]               reduce using rule 112 (constant -> VAL_INT np_push_const_int .)
    TO              reduce using rule 112 (constant -> VAL_INT np_push_const_int .)
    DO              reduce using rule 112 (constant -> VAL_INT np_push_const_int .)


state 180

    (113) constant -> VAL_FLOAT np_push_const_float .

    *               reduce using rule 113 (constant -> VAL_FLOAT np_push_const_float .)
    /               reduce using rule 113 (constant -> VAL_FLOAT np_push_const_float .)
    +               reduce using rule 113 (constant -> VAL_FLOAT np_push_const_float .)
    -               reduce using rule 113 (constant -> VAL_FLOAT np_push_const_float .)
    <               reduce using rule 113 (constant -> VAL_FLOAT np_push_const_float .)
    >               reduce using rule 113 (constant -> VAL_FLOAT np_push_const_float .)
    EQUAL_TO        reduce using rule 113 (constant -> VAL_FLOAT np_push_const_float .)
    NOT_EQUAL_TO    reduce using rule 113 (constant -> VAL_FLOAT np_push_const_float .)
    &               reduce using rule 113 (constant -> VAL_FLOAT np_push_const_float .)
    |               reduce using rule 113 (constant -> VAL_FLOAT np_push_const_float .)
    ;               reduce using rule 113 (constant -> VAL_FLOAT np_push_const_float .)
    ,               reduce using rule 113 (constant -> VAL_FLOAT np_push_const_float .)
    )               reduce using rule 113 (constant -> VAL_FLOAT np_push_const_float .)
    ]               reduce using rule 113 (constant -> VAL_FLOAT np_push_const_float .)
    TO              reduce using rule 113 (constant -> VAL_FLOAT np_push_const_float .)
    DO              reduce using rule 113 (constant -> VAL_FLOAT np_push_const_float .)


state 181

    (116) np_push_const_float -> epsilon .

    *               reduce using rule 116 (np_push_const_float -> epsilon .)
    /               reduce using rule 116 (np_push_const_float -> epsilon .)
    +               reduce using rule 116 (np_push_const_float -> epsilon .)
    -               reduce using rule 116 (np_push_const_float -> epsilon .)
    <               reduce using rule 116 (np_push_const_float -> epsilon .)
    >               reduce using rule 116 (np_push_const_float -> epsilon .)
    EQUAL_TO        reduce using rule 116 (np_push_const_float -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 116 (np_push_const_float -> epsilon .)
    &               reduce using rule 116 (np_push_const_float -> epsilon .)
    |               reduce using rule 116 (np_push_const_float -> epsilon .)
    ;               reduce using rule 116 (np_push_const_float -> epsilon .)
    ,               reduce using rule 116 (np_push_const_float -> epsilon .)
    )               reduce using rule 116 (np_push_const_float -> epsilon .)
    ]               reduce using rule 116 (np_push_const_float -> epsilon .)
    TO              reduce using rule 116 (np_push_const_float -> epsilon .)
    DO              reduce using rule 116 (np_push_const_float -> epsilon .)


state 182

    (114) constant -> VAL_CHAR np_push_const_char .

    *               reduce using rule 114 (constant -> VAL_CHAR np_push_const_char .)
    /               reduce using rule 114 (constant -> VAL_CHAR np_push_const_char .)
    +               reduce using rule 114 (constant -> VAL_CHAR np_push_const_char .)
    -               reduce using rule 114 (constant -> VAL_CHAR np_push_const_char .)
    <               reduce using rule 114 (constant -> VAL_CHAR np_push_const_char .)
    >               reduce using rule 114 (constant -> VAL_CHAR np_push_const_char .)
    EQUAL_TO        reduce using rule 114 (constant -> VAL_CHAR np_push_const_char .)
    NOT_EQUAL_TO    reduce using rule 114 (constant -> VAL_CHAR np_push_const_char .)
    &               reduce using rule 114 (constant -> VAL_CHAR np_push_const_char .)
    |               reduce using rule 114 (constant -> VAL_CHAR np_push_const_char .)
    ;               reduce using rule 114 (constant -> VAL_CHAR np_push_const_char .)
    ,               reduce using rule 114 (constant -> VAL_CHAR np_push_const_char .)
    )               reduce using rule 114 (constant -> VAL_CHAR np_push_const_char .)
    ]               reduce using rule 114 (constant -> VAL_CHAR np_push_const_char .)
    TO              reduce using rule 114 (constant -> VAL_CHAR np_push_const_char .)
    DO              reduce using rule 114 (constant -> VAL_CHAR np_push_const_char .)


state 183

    (117) np_push_const_char -> epsilon .

    *               reduce using rule 117 (np_push_const_char -> epsilon .)
    /               reduce using rule 117 (np_push_const_char -> epsilon .)
    +               reduce using rule 117 (np_push_const_char -> epsilon .)
    -               reduce using rule 117 (np_push_const_char -> epsilon .)
    <               reduce using rule 117 (np_push_const_char -> epsilon .)
    >               reduce using rule 117 (np_push_const_char -> epsilon .)
    EQUAL_TO        reduce using rule 117 (np_push_const_char -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 117 (np_push_const_char -> epsilon .)
    &               reduce using rule 117 (np_push_const_char -> epsilon .)
    |               reduce using rule 117 (np_push_const_char -> epsilon .)
    ;               reduce using rule 117 (np_push_const_char -> epsilon .)
    ,               reduce using rule 117 (np_push_const_char -> epsilon .)
    )               reduce using rule 117 (np_push_const_char -> epsilon .)
    ]               reduce using rule 117 (np_push_const_char -> epsilon .)
    TO              reduce using rule 117 (np_push_const_char -> epsilon .)
    DO              reduce using rule 117 (np_push_const_char -> epsilon .)


state 184

    (118) np_single_var_process -> epsilon .
    (53) np_fc_1 -> epsilon .

    *               reduce using rule 118 (np_single_var_process -> epsilon .)
    /               reduce using rule 118 (np_single_var_process -> epsilon .)
    +               reduce using rule 118 (np_single_var_process -> epsilon .)
    -               reduce using rule 118 (np_single_var_process -> epsilon .)
    <               reduce using rule 118 (np_single_var_process -> epsilon .)
    >               reduce using rule 118 (np_single_var_process -> epsilon .)
    EQUAL_TO        reduce using rule 118 (np_single_var_process -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 118 (np_single_var_process -> epsilon .)
    &               reduce using rule 118 (np_single_var_process -> epsilon .)
    |               reduce using rule 118 (np_single_var_process -> epsilon .)
    ;               reduce using rule 118 (np_single_var_process -> epsilon .)
    ,               reduce using rule 118 (np_single_var_process -> epsilon .)
    )               reduce using rule 118 (np_single_var_process -> epsilon .)
    ]               reduce using rule 118 (np_single_var_process -> epsilon .)
    TO              reduce using rule 118 (np_single_var_process -> epsilon .)
    DO              reduce using rule 118 (np_single_var_process -> epsilon .)
    (               reduce using rule 53 (np_fc_1 -> epsilon .)


state 185

    (122) fm_1_param -> MEDIA ( . ID ) np_arr_input

    ID              shift and go to state 229


state 186

    (123) fm_1_param -> MEDIANA ( . ID ) np_arr_input

    ID              shift and go to state 230


state 187

    (124) fm_1_param -> MODA ( . ID ) np_arr_input

    ID              shift and go to state 231


state 188

    (125) fm_1_param -> LEN ( . ID ) np_arr_input

    ID              shift and go to state 232


state 189

    (126) fm_1_param -> VARIANZA ( . ID ) np_arr_input

    ID              shift and go to state 233


state 190

    (127) fm_1_param -> SEN ( . hyper_exp ) np_he_input
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    hyper_exp                      shift and go to state 234
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 191

    (128) fm_1_param -> COS ( . hyper_exp ) np_he_input
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    hyper_exp                      shift and go to state 235
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 192

    (129) fm_1_param -> TAN ( . hyper_exp ) np_he_input
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    hyper_exp                      shift and go to state 236
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 193

    (130) fm_1_param -> SENH ( . hyper_exp ) np_he_input
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    hyper_exp                      shift and go to state 237
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 194

    (131) fm_1_param -> COSH ( . hyper_exp ) np_he_input
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    hyper_exp                      shift and go to state 238
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 195

    (132) fm_1_param -> TANH ( . hyper_exp ) np_he_input
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    hyper_exp                      shift and go to state 239
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 196

    (133) fm_1_param -> LOG ( . hyper_exp ) np_he_input
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    hyper_exp                      shift and go to state 240
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 197

    (134) fm_1_param -> ABS ( . hyper_exp ) np_he_input
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    hyper_exp                      shift and go to state 241
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 198

    (135) fm_1_param -> FLOOR ( . hyper_exp ) np_he_input
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    hyper_exp                      shift and go to state 242
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 199

    (136) fm_1_param -> CEIL ( . hyper_exp ) np_he_input
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    hyper_exp                      shift and go to state 243
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 200

    (139) fm_2_param -> RAND ( . hyper_exp , hyper_exp ) np_int_input
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    hyper_exp                      shift and go to state 244
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 201

    (140) fm_2_param -> POW ( . hyper_exp , hyper_exp ) np_int_input
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    hyper_exp                      shift and go to state 245
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 202

    (141) fm_2_param -> MIN ( . hyper_exp , hyper_exp ) np_same_input
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    hyper_exp                      shift and go to state 246
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 203

    (142) fm_2_param -> MAX ( . hyper_exp , hyper_exp ) np_same_input
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    hyper_exp                      shift and go to state 247
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 204

    (52) func_llamada -> ID np_fc_1 ( np_push_operator_stack . argumento_loop ) np_pop_operator_stack
    (54) argumento_loop -> . hyper_exp np_fc_2 argumento_loop_1
    (55) argumento_loop -> . epsilon
    (86) hyper_exp -> . super_exp hyper_exp_1
    (145) epsilon -> .
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    )               reduce using rule 145 (epsilon -> .)
    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    argumento_loop                 shift and go to state 248
    hyper_exp                      shift and go to state 249
    epsilon                        shift and go to state 250
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 205

    (10) variable -> ID [ np_push_operator_stack hyper_exp . ] np_pop_operator_stack np_array_var_process

    ]               shift and go to state 251


state 206

    (63) read -> READ ( variable_loop ) . ;

    ;               shift and go to state 252


state 207

    (64) variable_loop -> variable np_add_to_input_counter . variable_loop_1
    (65) variable_loop_1 -> . , variable np_add_to_input_counter variable_loop_1
    (66) variable_loop_1 -> . epsilon
    (145) epsilon -> .

    ,               shift and go to state 254
    )               reduce using rule 145 (epsilon -> .)

    variable_loop_1                shift and go to state 253
    epsilon                        shift and go to state 255

state 208

    (67) np_add_to_input_counter -> epsilon .

    ,               reduce using rule 67 (np_add_to_input_counter -> epsilon .)
    )               reduce using rule 67 (np_add_to_input_counter -> epsilon .)


state 209

    (68) write -> WRITE ( hyper_exp_loop ) . ;

    ;               shift and go to state 256


state 210

    (58) hyper_exp_loop -> hyper_exp np_add_to_input_counter . hyper_exp_loop_1
    (59) hyper_exp_loop_1 -> . , hyper_exp np_add_to_input_counter hyper_exp_loop_1
    (60) hyper_exp_loop_1 -> . epsilon
    (145) epsilon -> .

    ,               shift and go to state 258
    )               reduce using rule 145 (epsilon -> .)

    hyper_exp_loop_1               shift and go to state 257
    epsilon                        shift and go to state 259

state 211

    (69) decision -> IF ( hyper_exp ) . np_decision_1 THEN { loop_estatuto } decision_else
    (72) np_decision_1 -> . epsilon
    (145) epsilon -> .

    THEN            reduce using rule 145 (epsilon -> .)

    np_decision_1                  shift and go to state 260
    epsilon                        shift and go to state 261

state 212

    (62) func_return -> RETURN ( hyper_exp ) . ;

    ;               shift and go to state 262


state 213

    (78) condicional -> WHILE np_cond_1 ( hyper_exp . ) np_cond_2 DO { loop_estatuto } np_cond_3

    )               shift and go to state 263


state 214

    (82) no_condicional -> FOR variable = hyper_exp . np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }
    (83) np_for_1 -> . epsilon
    (145) epsilon -> .

    TO              reduce using rule 145 (epsilon -> .)

    np_for_1                       shift and go to state 264
    epsilon                        shift and go to state 265

state 215

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) . ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func

    ;               shift and go to state 266


state 216

    (36) parametro -> tipo ID . np_add_param loop_parametro
    (39) np_add_param -> . epsilon
    (145) epsilon -> .

    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)

    np_add_param                   shift and go to state 267
    epsilon                        shift and go to state 268

state 217

    (18) loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name . array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo
    (16) array_opcional -> . [ VAL_INT np_push_const_int ]
    (17) array_opcional -> . epsilon
    (145) epsilon -> .

    [               shift and go to state 53
    ,               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)

    array_opcional                 shift and go to state 269
    epsilon                        shift and go to state 54

state 218

    (87) hyper_exp_1 -> & np_push_operator_stack . super_exp
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    super_exp                      shift and go to state 270
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 219

    (88) hyper_exp_1 -> | np_push_operator_stack . super_exp
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    super_exp                      shift and go to state 271
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 220

    (91) super_exp_1 -> < np_push_operator_stack . exp
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    exp                            shift and go to state 272
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 221

    (92) super_exp_1 -> > np_push_operator_stack . exp
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    exp                            shift and go to state 273
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 222

    (93) super_exp_1 -> EQUAL_TO np_push_operator_stack . exp
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    exp                            shift and go to state 274
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 223

    (94) super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack . exp
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    exp                            shift and go to state 275
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 224

    (97) exp_1 -> + np_push_operator_stack . term
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    term                           shift and go to state 276
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 225

    (98) exp_1 -> - np_push_operator_stack . term
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    term                           shift and go to state 277
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 226

    (101) term_1 -> * np_push_operator_stack . factor
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    factor                         shift and go to state 278
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 227

    (102) term_1 -> / np_push_operator_stack . factor
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    factor                         shift and go to state 279
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 228

    (108) factor -> ( hyper_exp ) .

    *               reduce using rule 108 (factor -> ( hyper_exp ) .)
    /               reduce using rule 108 (factor -> ( hyper_exp ) .)
    +               reduce using rule 108 (factor -> ( hyper_exp ) .)
    -               reduce using rule 108 (factor -> ( hyper_exp ) .)
    <               reduce using rule 108 (factor -> ( hyper_exp ) .)
    >               reduce using rule 108 (factor -> ( hyper_exp ) .)
    EQUAL_TO        reduce using rule 108 (factor -> ( hyper_exp ) .)
    NOT_EQUAL_TO    reduce using rule 108 (factor -> ( hyper_exp ) .)
    &               reduce using rule 108 (factor -> ( hyper_exp ) .)
    |               reduce using rule 108 (factor -> ( hyper_exp ) .)
    ;               reduce using rule 108 (factor -> ( hyper_exp ) .)
    ,               reduce using rule 108 (factor -> ( hyper_exp ) .)
    )               reduce using rule 108 (factor -> ( hyper_exp ) .)
    ]               reduce using rule 108 (factor -> ( hyper_exp ) .)
    TO              reduce using rule 108 (factor -> ( hyper_exp ) .)
    DO              reduce using rule 108 (factor -> ( hyper_exp ) .)


state 229

    (122) fm_1_param -> MEDIA ( ID . ) np_arr_input

    )               shift and go to state 280


state 230

    (123) fm_1_param -> MEDIANA ( ID . ) np_arr_input

    )               shift and go to state 281


state 231

    (124) fm_1_param -> MODA ( ID . ) np_arr_input

    )               shift and go to state 282


state 232

    (125) fm_1_param -> LEN ( ID . ) np_arr_input

    )               shift and go to state 283


state 233

    (126) fm_1_param -> VARIANZA ( ID . ) np_arr_input

    )               shift and go to state 284


state 234

    (127) fm_1_param -> SEN ( hyper_exp . ) np_he_input

    )               shift and go to state 285


state 235

    (128) fm_1_param -> COS ( hyper_exp . ) np_he_input

    )               shift and go to state 286


state 236

    (129) fm_1_param -> TAN ( hyper_exp . ) np_he_input

    )               shift and go to state 287


state 237

    (130) fm_1_param -> SENH ( hyper_exp . ) np_he_input

    )               shift and go to state 288


state 238

    (131) fm_1_param -> COSH ( hyper_exp . ) np_he_input

    )               shift and go to state 289


state 239

    (132) fm_1_param -> TANH ( hyper_exp . ) np_he_input

    )               shift and go to state 290


state 240

    (133) fm_1_param -> LOG ( hyper_exp . ) np_he_input

    )               shift and go to state 291


state 241

    (134) fm_1_param -> ABS ( hyper_exp . ) np_he_input

    )               shift and go to state 292


state 242

    (135) fm_1_param -> FLOOR ( hyper_exp . ) np_he_input

    )               shift and go to state 293


state 243

    (136) fm_1_param -> CEIL ( hyper_exp . ) np_he_input

    )               shift and go to state 294


state 244

    (139) fm_2_param -> RAND ( hyper_exp . , hyper_exp ) np_int_input

    ,               shift and go to state 295


state 245

    (140) fm_2_param -> POW ( hyper_exp . , hyper_exp ) np_int_input

    ,               shift and go to state 296


state 246

    (141) fm_2_param -> MIN ( hyper_exp . , hyper_exp ) np_same_input

    ,               shift and go to state 297


state 247

    (142) fm_2_param -> MAX ( hyper_exp . , hyper_exp ) np_same_input

    ,               shift and go to state 298


state 248

    (52) func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop . ) np_pop_operator_stack

    )               shift and go to state 299


state 249

    (54) argumento_loop -> hyper_exp . np_fc_2 argumento_loop_1
    (61) np_fc_2 -> . epsilon
    (145) epsilon -> .

    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)

    np_fc_2                        shift and go to state 300
    epsilon                        shift and go to state 301

state 250

    (55) argumento_loop -> epsilon .

    )               reduce using rule 55 (argumento_loop -> epsilon .)


state 251

    (10) variable -> ID [ np_push_operator_stack hyper_exp ] . np_pop_operator_stack np_array_var_process
    (105) np_pop_operator_stack -> . epsilon
    (145) epsilon -> .

    =               reduce using rule 145 (epsilon -> .)
    *               reduce using rule 145 (epsilon -> .)
    /               reduce using rule 145 (epsilon -> .)
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    np_pop_operator_stack          shift and go to state 302
    epsilon                        shift and go to state 303

state 252

    (63) read -> READ ( variable_loop ) ; .

    ID              reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    READ            reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    WRITE           reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    IF              reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    RETURN          reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    WHILE           reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    FOR             reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    }               reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    *               reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    /               reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    +               reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    -               reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    <               reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    >               reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    EQUAL_TO        reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    NOT_EQUAL_TO    reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    &               reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    |               reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    ;               reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    ,               reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    )               reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    ]               reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    TO              reduce using rule 63 (read -> READ ( variable_loop ) ; .)
    DO              reduce using rule 63 (read -> READ ( variable_loop ) ; .)


state 253

    (64) variable_loop -> variable np_add_to_input_counter variable_loop_1 .

    )               reduce using rule 64 (variable_loop -> variable np_add_to_input_counter variable_loop_1 .)


state 254

    (65) variable_loop_1 -> , . variable np_add_to_input_counter variable_loop_1
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process

    ID              shift and go to state 94

    variable                       shift and go to state 304

state 255

    (66) variable_loop_1 -> epsilon .

    )               reduce using rule 66 (variable_loop_1 -> epsilon .)


state 256

    (68) write -> WRITE ( hyper_exp_loop ) ; .

    ID              reduce using rule 68 (write -> WRITE ( hyper_exp_loop ) ; .)
    READ            reduce using rule 68 (write -> WRITE ( hyper_exp_loop ) ; .)
    WRITE           reduce using rule 68 (write -> WRITE ( hyper_exp_loop ) ; .)
    IF              reduce using rule 68 (write -> WRITE ( hyper_exp_loop ) ; .)
    RETURN          reduce using rule 68 (write -> WRITE ( hyper_exp_loop ) ; .)
    WHILE           reduce using rule 68 (write -> WRITE ( hyper_exp_loop ) ; .)
    FOR             reduce using rule 68 (write -> WRITE ( hyper_exp_loop ) ; .)
    }               reduce using rule 68 (write -> WRITE ( hyper_exp_loop ) ; .)


state 257

    (58) hyper_exp_loop -> hyper_exp np_add_to_input_counter hyper_exp_loop_1 .

    )               reduce using rule 58 (hyper_exp_loop -> hyper_exp np_add_to_input_counter hyper_exp_loop_1 .)


state 258

    (59) hyper_exp_loop_1 -> , . hyper_exp np_add_to_input_counter hyper_exp_loop_1
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    hyper_exp                      shift and go to state 305
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 259

    (60) hyper_exp_loop_1 -> epsilon .

    )               reduce using rule 60 (hyper_exp_loop_1 -> epsilon .)


state 260

    (69) decision -> IF ( hyper_exp ) np_decision_1 . THEN { loop_estatuto } decision_else

    THEN            shift and go to state 306


state 261

    (72) np_decision_1 -> epsilon .

    THEN            reduce using rule 72 (np_decision_1 -> epsilon .)


state 262

    (62) func_return -> RETURN ( hyper_exp ) ; .

    ID              reduce using rule 62 (func_return -> RETURN ( hyper_exp ) ; .)
    READ            reduce using rule 62 (func_return -> RETURN ( hyper_exp ) ; .)
    WRITE           reduce using rule 62 (func_return -> RETURN ( hyper_exp ) ; .)
    IF              reduce using rule 62 (func_return -> RETURN ( hyper_exp ) ; .)
    RETURN          reduce using rule 62 (func_return -> RETURN ( hyper_exp ) ; .)
    WHILE           reduce using rule 62 (func_return -> RETURN ( hyper_exp ) ; .)
    FOR             reduce using rule 62 (func_return -> RETURN ( hyper_exp ) ; .)
    }               reduce using rule 62 (func_return -> RETURN ( hyper_exp ) ; .)


state 263

    (78) condicional -> WHILE np_cond_1 ( hyper_exp ) . np_cond_2 DO { loop_estatuto } np_cond_3
    (80) np_cond_2 -> . epsilon
    (145) epsilon -> .

    DO              reduce using rule 145 (epsilon -> .)

    np_cond_2                      shift and go to state 307
    epsilon                        shift and go to state 308

state 264

    (82) no_condicional -> FOR variable = hyper_exp np_for_1 . TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    TO              shift and go to state 309


state 265

    (83) np_for_1 -> epsilon .

    TO              reduce using rule 83 (np_for_1 -> epsilon .)


state 266

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; . var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (7) var_opcional -> . var_declaracion
    (8) var_opcional -> . epsilon
    (11) var_declaracion -> . VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion
    (145) epsilon -> .

    VARS            shift and go to state 12
    {               reduce using rule 145 (epsilon -> .)

    var_opcional                   shift and go to state 310
    var_declaracion                shift and go to state 10
    epsilon                        shift and go to state 11

state 267

    (36) parametro -> tipo ID np_add_param . loop_parametro
    (37) loop_parametro -> . , tipo ID np_add_param loop_parametro
    (38) loop_parametro -> . epsilon
    (145) epsilon -> .

    ,               shift and go to state 312
    )               reduce using rule 145 (epsilon -> .)

    loop_parametro                 shift and go to state 311
    epsilon                        shift and go to state 313

state 268

    (39) np_add_param -> epsilon .

    ,               reduce using rule 39 (np_add_param -> epsilon .)
    )               reduce using rule 39 (np_add_param -> epsilon .)


state 269

    (18) loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name array_opcional . np_add_var_to_varstable loop_var_decl_mismo_tipo
    (22) np_add_var_to_varstable -> . epsilon
    (145) epsilon -> .

    ,               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)

    np_add_var_to_varstable        shift and go to state 314
    epsilon                        shift and go to state 77

state 270

    (87) hyper_exp_1 -> & np_push_operator_stack super_exp .

    ;               reduce using rule 87 (hyper_exp_1 -> & np_push_operator_stack super_exp .)
    ,               reduce using rule 87 (hyper_exp_1 -> & np_push_operator_stack super_exp .)
    )               reduce using rule 87 (hyper_exp_1 -> & np_push_operator_stack super_exp .)
    ]               reduce using rule 87 (hyper_exp_1 -> & np_push_operator_stack super_exp .)
    TO              reduce using rule 87 (hyper_exp_1 -> & np_push_operator_stack super_exp .)
    DO              reduce using rule 87 (hyper_exp_1 -> & np_push_operator_stack super_exp .)


state 271

    (88) hyper_exp_1 -> | np_push_operator_stack super_exp .

    ;               reduce using rule 88 (hyper_exp_1 -> | np_push_operator_stack super_exp .)
    ,               reduce using rule 88 (hyper_exp_1 -> | np_push_operator_stack super_exp .)
    )               reduce using rule 88 (hyper_exp_1 -> | np_push_operator_stack super_exp .)
    ]               reduce using rule 88 (hyper_exp_1 -> | np_push_operator_stack super_exp .)
    TO              reduce using rule 88 (hyper_exp_1 -> | np_push_operator_stack super_exp .)
    DO              reduce using rule 88 (hyper_exp_1 -> | np_push_operator_stack super_exp .)


state 272

    (91) super_exp_1 -> < np_push_operator_stack exp .

    &               reduce using rule 91 (super_exp_1 -> < np_push_operator_stack exp .)
    |               reduce using rule 91 (super_exp_1 -> < np_push_operator_stack exp .)
    ;               reduce using rule 91 (super_exp_1 -> < np_push_operator_stack exp .)
    ,               reduce using rule 91 (super_exp_1 -> < np_push_operator_stack exp .)
    )               reduce using rule 91 (super_exp_1 -> < np_push_operator_stack exp .)
    ]               reduce using rule 91 (super_exp_1 -> < np_push_operator_stack exp .)
    TO              reduce using rule 91 (super_exp_1 -> < np_push_operator_stack exp .)
    DO              reduce using rule 91 (super_exp_1 -> < np_push_operator_stack exp .)


state 273

    (92) super_exp_1 -> > np_push_operator_stack exp .

    &               reduce using rule 92 (super_exp_1 -> > np_push_operator_stack exp .)
    |               reduce using rule 92 (super_exp_1 -> > np_push_operator_stack exp .)
    ;               reduce using rule 92 (super_exp_1 -> > np_push_operator_stack exp .)
    ,               reduce using rule 92 (super_exp_1 -> > np_push_operator_stack exp .)
    )               reduce using rule 92 (super_exp_1 -> > np_push_operator_stack exp .)
    ]               reduce using rule 92 (super_exp_1 -> > np_push_operator_stack exp .)
    TO              reduce using rule 92 (super_exp_1 -> > np_push_operator_stack exp .)
    DO              reduce using rule 92 (super_exp_1 -> > np_push_operator_stack exp .)


state 274

    (93) super_exp_1 -> EQUAL_TO np_push_operator_stack exp .

    &               reduce using rule 93 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    |               reduce using rule 93 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    ;               reduce using rule 93 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    ,               reduce using rule 93 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    )               reduce using rule 93 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    ]               reduce using rule 93 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    TO              reduce using rule 93 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    DO              reduce using rule 93 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)


state 275

    (94) super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .

    &               reduce using rule 94 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    |               reduce using rule 94 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    ;               reduce using rule 94 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    ,               reduce using rule 94 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    )               reduce using rule 94 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    ]               reduce using rule 94 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    TO              reduce using rule 94 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    DO              reduce using rule 94 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)


state 276

    (97) exp_1 -> + np_push_operator_stack term .

    <               reduce using rule 97 (exp_1 -> + np_push_operator_stack term .)
    >               reduce using rule 97 (exp_1 -> + np_push_operator_stack term .)
    EQUAL_TO        reduce using rule 97 (exp_1 -> + np_push_operator_stack term .)
    NOT_EQUAL_TO    reduce using rule 97 (exp_1 -> + np_push_operator_stack term .)
    &               reduce using rule 97 (exp_1 -> + np_push_operator_stack term .)
    |               reduce using rule 97 (exp_1 -> + np_push_operator_stack term .)
    ;               reduce using rule 97 (exp_1 -> + np_push_operator_stack term .)
    ,               reduce using rule 97 (exp_1 -> + np_push_operator_stack term .)
    )               reduce using rule 97 (exp_1 -> + np_push_operator_stack term .)
    ]               reduce using rule 97 (exp_1 -> + np_push_operator_stack term .)
    TO              reduce using rule 97 (exp_1 -> + np_push_operator_stack term .)
    DO              reduce using rule 97 (exp_1 -> + np_push_operator_stack term .)


state 277

    (98) exp_1 -> - np_push_operator_stack term .

    <               reduce using rule 98 (exp_1 -> - np_push_operator_stack term .)
    >               reduce using rule 98 (exp_1 -> - np_push_operator_stack term .)
    EQUAL_TO        reduce using rule 98 (exp_1 -> - np_push_operator_stack term .)
    NOT_EQUAL_TO    reduce using rule 98 (exp_1 -> - np_push_operator_stack term .)
    &               reduce using rule 98 (exp_1 -> - np_push_operator_stack term .)
    |               reduce using rule 98 (exp_1 -> - np_push_operator_stack term .)
    ;               reduce using rule 98 (exp_1 -> - np_push_operator_stack term .)
    ,               reduce using rule 98 (exp_1 -> - np_push_operator_stack term .)
    )               reduce using rule 98 (exp_1 -> - np_push_operator_stack term .)
    ]               reduce using rule 98 (exp_1 -> - np_push_operator_stack term .)
    TO              reduce using rule 98 (exp_1 -> - np_push_operator_stack term .)
    DO              reduce using rule 98 (exp_1 -> - np_push_operator_stack term .)


state 278

    (101) term_1 -> * np_push_operator_stack factor .

    +               reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)
    -               reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)
    <               reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)
    >               reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)
    EQUAL_TO        reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)
    NOT_EQUAL_TO    reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)
    &               reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)
    |               reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)
    ;               reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)
    ,               reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)
    )               reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)
    ]               reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)
    TO              reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)
    DO              reduce using rule 101 (term_1 -> * np_push_operator_stack factor .)


state 279

    (102) term_1 -> / np_push_operator_stack factor .

    +               reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)
    -               reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)
    <               reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)
    >               reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)
    EQUAL_TO        reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)
    NOT_EQUAL_TO    reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)
    &               reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)
    |               reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)
    ;               reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)
    ,               reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)
    )               reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)
    ]               reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)
    TO              reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)
    DO              reduce using rule 102 (term_1 -> / np_push_operator_stack factor .)


state 280

    (122) fm_1_param -> MEDIA ( ID ) . np_arr_input
    (138) np_arr_input -> . epsilon
    (145) epsilon -> .

    *               reduce using rule 145 (epsilon -> .)
    /               reduce using rule 145 (epsilon -> .)
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    np_arr_input                   shift and go to state 315
    epsilon                        shift and go to state 316

state 281

    (123) fm_1_param -> MEDIANA ( ID ) . np_arr_input
    (138) np_arr_input -> . epsilon
    (145) epsilon -> .

    *               reduce using rule 145 (epsilon -> .)
    /               reduce using rule 145 (epsilon -> .)
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    np_arr_input                   shift and go to state 317
    epsilon                        shift and go to state 316

state 282

    (124) fm_1_param -> MODA ( ID ) . np_arr_input
    (138) np_arr_input -> . epsilon
    (145) epsilon -> .

    *               reduce using rule 145 (epsilon -> .)
    /               reduce using rule 145 (epsilon -> .)
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    np_arr_input                   shift and go to state 318
    epsilon                        shift and go to state 316

state 283

    (125) fm_1_param -> LEN ( ID ) . np_arr_input
    (138) np_arr_input -> . epsilon
    (145) epsilon -> .

    *               reduce using rule 145 (epsilon -> .)
    /               reduce using rule 145 (epsilon -> .)
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    np_arr_input                   shift and go to state 319
    epsilon                        shift and go to state 316

state 284

    (126) fm_1_param -> VARIANZA ( ID ) . np_arr_input
    (138) np_arr_input -> . epsilon
    (145) epsilon -> .

    *               reduce using rule 145 (epsilon -> .)
    /               reduce using rule 145 (epsilon -> .)
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    np_arr_input                   shift and go to state 320
    epsilon                        shift and go to state 316

state 285

    (127) fm_1_param -> SEN ( hyper_exp ) . np_he_input
    (137) np_he_input -> . epsilon
    (145) epsilon -> .

    *               reduce using rule 145 (epsilon -> .)
    /               reduce using rule 145 (epsilon -> .)
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    np_he_input                    shift and go to state 321
    epsilon                        shift and go to state 322

state 286

    (128) fm_1_param -> COS ( hyper_exp ) . np_he_input
    (137) np_he_input -> . epsilon
    (145) epsilon -> .

    *               reduce using rule 145 (epsilon -> .)
    /               reduce using rule 145 (epsilon -> .)
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    np_he_input                    shift and go to state 323
    epsilon                        shift and go to state 322

state 287

    (129) fm_1_param -> TAN ( hyper_exp ) . np_he_input
    (137) np_he_input -> . epsilon
    (145) epsilon -> .

    *               reduce using rule 145 (epsilon -> .)
    /               reduce using rule 145 (epsilon -> .)
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    np_he_input                    shift and go to state 324
    epsilon                        shift and go to state 322

state 288

    (130) fm_1_param -> SENH ( hyper_exp ) . np_he_input
    (137) np_he_input -> . epsilon
    (145) epsilon -> .

    *               reduce using rule 145 (epsilon -> .)
    /               reduce using rule 145 (epsilon -> .)
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    np_he_input                    shift and go to state 325
    epsilon                        shift and go to state 322

state 289

    (131) fm_1_param -> COSH ( hyper_exp ) . np_he_input
    (137) np_he_input -> . epsilon
    (145) epsilon -> .

    *               reduce using rule 145 (epsilon -> .)
    /               reduce using rule 145 (epsilon -> .)
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    np_he_input                    shift and go to state 326
    epsilon                        shift and go to state 322

state 290

    (132) fm_1_param -> TANH ( hyper_exp ) . np_he_input
    (137) np_he_input -> . epsilon
    (145) epsilon -> .

    *               reduce using rule 145 (epsilon -> .)
    /               reduce using rule 145 (epsilon -> .)
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    np_he_input                    shift and go to state 327
    epsilon                        shift and go to state 322

state 291

    (133) fm_1_param -> LOG ( hyper_exp ) . np_he_input
    (137) np_he_input -> . epsilon
    (145) epsilon -> .

    *               reduce using rule 145 (epsilon -> .)
    /               reduce using rule 145 (epsilon -> .)
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    np_he_input                    shift and go to state 328
    epsilon                        shift and go to state 322

state 292

    (134) fm_1_param -> ABS ( hyper_exp ) . np_he_input
    (137) np_he_input -> . epsilon
    (145) epsilon -> .

    *               reduce using rule 145 (epsilon -> .)
    /               reduce using rule 145 (epsilon -> .)
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    np_he_input                    shift and go to state 329
    epsilon                        shift and go to state 322

state 293

    (135) fm_1_param -> FLOOR ( hyper_exp ) . np_he_input
    (137) np_he_input -> . epsilon
    (145) epsilon -> .

    *               reduce using rule 145 (epsilon -> .)
    /               reduce using rule 145 (epsilon -> .)
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    np_he_input                    shift and go to state 330
    epsilon                        shift and go to state 322

state 294

    (136) fm_1_param -> CEIL ( hyper_exp ) . np_he_input
    (137) np_he_input -> . epsilon
    (145) epsilon -> .

    *               reduce using rule 145 (epsilon -> .)
    /               reduce using rule 145 (epsilon -> .)
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    np_he_input                    shift and go to state 331
    epsilon                        shift and go to state 322

state 295

    (139) fm_2_param -> RAND ( hyper_exp , . hyper_exp ) np_int_input
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    hyper_exp                      shift and go to state 332
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 296

    (140) fm_2_param -> POW ( hyper_exp , . hyper_exp ) np_int_input
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    hyper_exp                      shift and go to state 333
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 297

    (141) fm_2_param -> MIN ( hyper_exp , . hyper_exp ) np_same_input
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    hyper_exp                      shift and go to state 334
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 298

    (142) fm_2_param -> MAX ( hyper_exp , . hyper_exp ) np_same_input
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    hyper_exp                      shift and go to state 335
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 299

    (52) func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) . np_pop_operator_stack
    (105) np_pop_operator_stack -> . epsilon
    (145) epsilon -> .

    ;               reduce using rule 145 (epsilon -> .)
    *               reduce using rule 145 (epsilon -> .)
    /               reduce using rule 145 (epsilon -> .)
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    np_pop_operator_stack          shift and go to state 336
    epsilon                        shift and go to state 303

state 300

    (54) argumento_loop -> hyper_exp np_fc_2 . argumento_loop_1
    (56) argumento_loop_1 -> . , hyper_exp np_fc_2 argumento_loop_1
    (57) argumento_loop_1 -> . epsilon
    (145) epsilon -> .

    ,               shift and go to state 338
    )               reduce using rule 145 (epsilon -> .)

    argumento_loop_1               shift and go to state 337
    epsilon                        shift and go to state 339

state 301

    (61) np_fc_2 -> epsilon .

    ,               reduce using rule 61 (np_fc_2 -> epsilon .)
    )               reduce using rule 61 (np_fc_2 -> epsilon .)


state 302

    (10) variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack . np_array_var_process
    (119) np_array_var_process -> . epsilon
    (145) epsilon -> .

    =               reduce using rule 145 (epsilon -> .)
    *               reduce using rule 145 (epsilon -> .)
    /               reduce using rule 145 (epsilon -> .)
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    np_array_var_process           shift and go to state 340
    epsilon                        shift and go to state 341

state 303

    (105) np_pop_operator_stack -> epsilon .

    =               reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    *               reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    /               reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    +               reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    -               reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    <               reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    >               reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    EQUAL_TO        reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    &               reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    |               reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    ;               reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    ,               reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    )               reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    ]               reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    TO              reduce using rule 105 (np_pop_operator_stack -> epsilon .)
    DO              reduce using rule 105 (np_pop_operator_stack -> epsilon .)


state 304

    (65) variable_loop_1 -> , variable . np_add_to_input_counter variable_loop_1
    (67) np_add_to_input_counter -> . epsilon
    (145) epsilon -> .

    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)

    np_add_to_input_counter        shift and go to state 342
    epsilon                        shift and go to state 208

state 305

    (59) hyper_exp_loop_1 -> , hyper_exp . np_add_to_input_counter hyper_exp_loop_1
    (67) np_add_to_input_counter -> . epsilon
    (145) epsilon -> .

    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)

    np_add_to_input_counter        shift and go to state 343
    epsilon                        shift and go to state 208

state 306

    (69) decision -> IF ( hyper_exp ) np_decision_1 THEN . { loop_estatuto } decision_else

    {               shift and go to state 344


state 307

    (78) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 . DO { loop_estatuto } np_cond_3

    DO              shift and go to state 345


state 308

    (80) np_cond_2 -> epsilon .

    DO              reduce using rule 80 (np_cond_2 -> epsilon .)


state 309

    (82) no_condicional -> FOR variable = hyper_exp np_for_1 TO . hyper_exp np_for_2 DO np_for_3 { loop_estatuto }
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    variable                       shift and go to state 104
    hyper_exp                      shift and go to state 346
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 310

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional . np_save_curr_func_quad { loop_estatuto } np_kill_func
    (31) np_save_curr_func_quad -> . epsilon
    (145) epsilon -> .

    {               reduce using rule 145 (epsilon -> .)

    np_save_curr_func_quad         shift and go to state 347
    epsilon                        shift and go to state 348

state 311

    (36) parametro -> tipo ID np_add_param loop_parametro .

    )               reduce using rule 36 (parametro -> tipo ID np_add_param loop_parametro .)


state 312

    (37) loop_parametro -> , . tipo ID np_add_param loop_parametro
    (40) tipo -> . INT
    (41) tipo -> . FLOAT
    (42) tipo -> . CHAR
    (43) tipo -> . BOOL

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOL            shift and go to state 28

    tipo                           shift and go to state 349

state 313

    (38) loop_parametro -> epsilon .

    )               reduce using rule 38 (loop_parametro -> epsilon .)


state 314

    (18) loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name array_opcional np_add_var_to_varstable . loop_var_decl_mismo_tipo
    (18) loop_var_decl_mismo_tipo -> . , ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo
    (19) loop_var_decl_mismo_tipo -> . epsilon
    (145) epsilon -> .

    ,               shift and go to state 98
    ;               reduce using rule 145 (epsilon -> .)

    loop_var_decl_mismo_tipo       shift and go to state 350
    epsilon                        shift and go to state 99

state 315

    (122) fm_1_param -> MEDIA ( ID ) np_arr_input .

    *               reduce using rule 122 (fm_1_param -> MEDIA ( ID ) np_arr_input .)
    /               reduce using rule 122 (fm_1_param -> MEDIA ( ID ) np_arr_input .)
    +               reduce using rule 122 (fm_1_param -> MEDIA ( ID ) np_arr_input .)
    -               reduce using rule 122 (fm_1_param -> MEDIA ( ID ) np_arr_input .)
    <               reduce using rule 122 (fm_1_param -> MEDIA ( ID ) np_arr_input .)
    >               reduce using rule 122 (fm_1_param -> MEDIA ( ID ) np_arr_input .)
    EQUAL_TO        reduce using rule 122 (fm_1_param -> MEDIA ( ID ) np_arr_input .)
    NOT_EQUAL_TO    reduce using rule 122 (fm_1_param -> MEDIA ( ID ) np_arr_input .)
    &               reduce using rule 122 (fm_1_param -> MEDIA ( ID ) np_arr_input .)
    |               reduce using rule 122 (fm_1_param -> MEDIA ( ID ) np_arr_input .)
    ;               reduce using rule 122 (fm_1_param -> MEDIA ( ID ) np_arr_input .)
    ,               reduce using rule 122 (fm_1_param -> MEDIA ( ID ) np_arr_input .)
    )               reduce using rule 122 (fm_1_param -> MEDIA ( ID ) np_arr_input .)
    ]               reduce using rule 122 (fm_1_param -> MEDIA ( ID ) np_arr_input .)
    TO              reduce using rule 122 (fm_1_param -> MEDIA ( ID ) np_arr_input .)
    DO              reduce using rule 122 (fm_1_param -> MEDIA ( ID ) np_arr_input .)


state 316

    (138) np_arr_input -> epsilon .

    *               reduce using rule 138 (np_arr_input -> epsilon .)
    /               reduce using rule 138 (np_arr_input -> epsilon .)
    +               reduce using rule 138 (np_arr_input -> epsilon .)
    -               reduce using rule 138 (np_arr_input -> epsilon .)
    <               reduce using rule 138 (np_arr_input -> epsilon .)
    >               reduce using rule 138 (np_arr_input -> epsilon .)
    EQUAL_TO        reduce using rule 138 (np_arr_input -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 138 (np_arr_input -> epsilon .)
    &               reduce using rule 138 (np_arr_input -> epsilon .)
    |               reduce using rule 138 (np_arr_input -> epsilon .)
    ;               reduce using rule 138 (np_arr_input -> epsilon .)
    ,               reduce using rule 138 (np_arr_input -> epsilon .)
    )               reduce using rule 138 (np_arr_input -> epsilon .)
    ]               reduce using rule 138 (np_arr_input -> epsilon .)
    TO              reduce using rule 138 (np_arr_input -> epsilon .)
    DO              reduce using rule 138 (np_arr_input -> epsilon .)


state 317

    (123) fm_1_param -> MEDIANA ( ID ) np_arr_input .

    *               reduce using rule 123 (fm_1_param -> MEDIANA ( ID ) np_arr_input .)
    /               reduce using rule 123 (fm_1_param -> MEDIANA ( ID ) np_arr_input .)
    +               reduce using rule 123 (fm_1_param -> MEDIANA ( ID ) np_arr_input .)
    -               reduce using rule 123 (fm_1_param -> MEDIANA ( ID ) np_arr_input .)
    <               reduce using rule 123 (fm_1_param -> MEDIANA ( ID ) np_arr_input .)
    >               reduce using rule 123 (fm_1_param -> MEDIANA ( ID ) np_arr_input .)
    EQUAL_TO        reduce using rule 123 (fm_1_param -> MEDIANA ( ID ) np_arr_input .)
    NOT_EQUAL_TO    reduce using rule 123 (fm_1_param -> MEDIANA ( ID ) np_arr_input .)
    &               reduce using rule 123 (fm_1_param -> MEDIANA ( ID ) np_arr_input .)
    |               reduce using rule 123 (fm_1_param -> MEDIANA ( ID ) np_arr_input .)
    ;               reduce using rule 123 (fm_1_param -> MEDIANA ( ID ) np_arr_input .)
    ,               reduce using rule 123 (fm_1_param -> MEDIANA ( ID ) np_arr_input .)
    )               reduce using rule 123 (fm_1_param -> MEDIANA ( ID ) np_arr_input .)
    ]               reduce using rule 123 (fm_1_param -> MEDIANA ( ID ) np_arr_input .)
    TO              reduce using rule 123 (fm_1_param -> MEDIANA ( ID ) np_arr_input .)
    DO              reduce using rule 123 (fm_1_param -> MEDIANA ( ID ) np_arr_input .)


state 318

    (124) fm_1_param -> MODA ( ID ) np_arr_input .

    *               reduce using rule 124 (fm_1_param -> MODA ( ID ) np_arr_input .)
    /               reduce using rule 124 (fm_1_param -> MODA ( ID ) np_arr_input .)
    +               reduce using rule 124 (fm_1_param -> MODA ( ID ) np_arr_input .)
    -               reduce using rule 124 (fm_1_param -> MODA ( ID ) np_arr_input .)
    <               reduce using rule 124 (fm_1_param -> MODA ( ID ) np_arr_input .)
    >               reduce using rule 124 (fm_1_param -> MODA ( ID ) np_arr_input .)
    EQUAL_TO        reduce using rule 124 (fm_1_param -> MODA ( ID ) np_arr_input .)
    NOT_EQUAL_TO    reduce using rule 124 (fm_1_param -> MODA ( ID ) np_arr_input .)
    &               reduce using rule 124 (fm_1_param -> MODA ( ID ) np_arr_input .)
    |               reduce using rule 124 (fm_1_param -> MODA ( ID ) np_arr_input .)
    ;               reduce using rule 124 (fm_1_param -> MODA ( ID ) np_arr_input .)
    ,               reduce using rule 124 (fm_1_param -> MODA ( ID ) np_arr_input .)
    )               reduce using rule 124 (fm_1_param -> MODA ( ID ) np_arr_input .)
    ]               reduce using rule 124 (fm_1_param -> MODA ( ID ) np_arr_input .)
    TO              reduce using rule 124 (fm_1_param -> MODA ( ID ) np_arr_input .)
    DO              reduce using rule 124 (fm_1_param -> MODA ( ID ) np_arr_input .)


state 319

    (125) fm_1_param -> LEN ( ID ) np_arr_input .

    *               reduce using rule 125 (fm_1_param -> LEN ( ID ) np_arr_input .)
    /               reduce using rule 125 (fm_1_param -> LEN ( ID ) np_arr_input .)
    +               reduce using rule 125 (fm_1_param -> LEN ( ID ) np_arr_input .)
    -               reduce using rule 125 (fm_1_param -> LEN ( ID ) np_arr_input .)
    <               reduce using rule 125 (fm_1_param -> LEN ( ID ) np_arr_input .)
    >               reduce using rule 125 (fm_1_param -> LEN ( ID ) np_arr_input .)
    EQUAL_TO        reduce using rule 125 (fm_1_param -> LEN ( ID ) np_arr_input .)
    NOT_EQUAL_TO    reduce using rule 125 (fm_1_param -> LEN ( ID ) np_arr_input .)
    &               reduce using rule 125 (fm_1_param -> LEN ( ID ) np_arr_input .)
    |               reduce using rule 125 (fm_1_param -> LEN ( ID ) np_arr_input .)
    ;               reduce using rule 125 (fm_1_param -> LEN ( ID ) np_arr_input .)
    ,               reduce using rule 125 (fm_1_param -> LEN ( ID ) np_arr_input .)
    )               reduce using rule 125 (fm_1_param -> LEN ( ID ) np_arr_input .)
    ]               reduce using rule 125 (fm_1_param -> LEN ( ID ) np_arr_input .)
    TO              reduce using rule 125 (fm_1_param -> LEN ( ID ) np_arr_input .)
    DO              reduce using rule 125 (fm_1_param -> LEN ( ID ) np_arr_input .)


state 320

    (126) fm_1_param -> VARIANZA ( ID ) np_arr_input .

    *               reduce using rule 126 (fm_1_param -> VARIANZA ( ID ) np_arr_input .)
    /               reduce using rule 126 (fm_1_param -> VARIANZA ( ID ) np_arr_input .)
    +               reduce using rule 126 (fm_1_param -> VARIANZA ( ID ) np_arr_input .)
    -               reduce using rule 126 (fm_1_param -> VARIANZA ( ID ) np_arr_input .)
    <               reduce using rule 126 (fm_1_param -> VARIANZA ( ID ) np_arr_input .)
    >               reduce using rule 126 (fm_1_param -> VARIANZA ( ID ) np_arr_input .)
    EQUAL_TO        reduce using rule 126 (fm_1_param -> VARIANZA ( ID ) np_arr_input .)
    NOT_EQUAL_TO    reduce using rule 126 (fm_1_param -> VARIANZA ( ID ) np_arr_input .)
    &               reduce using rule 126 (fm_1_param -> VARIANZA ( ID ) np_arr_input .)
    |               reduce using rule 126 (fm_1_param -> VARIANZA ( ID ) np_arr_input .)
    ;               reduce using rule 126 (fm_1_param -> VARIANZA ( ID ) np_arr_input .)
    ,               reduce using rule 126 (fm_1_param -> VARIANZA ( ID ) np_arr_input .)
    )               reduce using rule 126 (fm_1_param -> VARIANZA ( ID ) np_arr_input .)
    ]               reduce using rule 126 (fm_1_param -> VARIANZA ( ID ) np_arr_input .)
    TO              reduce using rule 126 (fm_1_param -> VARIANZA ( ID ) np_arr_input .)
    DO              reduce using rule 126 (fm_1_param -> VARIANZA ( ID ) np_arr_input .)


state 321

    (127) fm_1_param -> SEN ( hyper_exp ) np_he_input .

    *               reduce using rule 127 (fm_1_param -> SEN ( hyper_exp ) np_he_input .)
    /               reduce using rule 127 (fm_1_param -> SEN ( hyper_exp ) np_he_input .)
    +               reduce using rule 127 (fm_1_param -> SEN ( hyper_exp ) np_he_input .)
    -               reduce using rule 127 (fm_1_param -> SEN ( hyper_exp ) np_he_input .)
    <               reduce using rule 127 (fm_1_param -> SEN ( hyper_exp ) np_he_input .)
    >               reduce using rule 127 (fm_1_param -> SEN ( hyper_exp ) np_he_input .)
    EQUAL_TO        reduce using rule 127 (fm_1_param -> SEN ( hyper_exp ) np_he_input .)
    NOT_EQUAL_TO    reduce using rule 127 (fm_1_param -> SEN ( hyper_exp ) np_he_input .)
    &               reduce using rule 127 (fm_1_param -> SEN ( hyper_exp ) np_he_input .)
    |               reduce using rule 127 (fm_1_param -> SEN ( hyper_exp ) np_he_input .)
    ;               reduce using rule 127 (fm_1_param -> SEN ( hyper_exp ) np_he_input .)
    ,               reduce using rule 127 (fm_1_param -> SEN ( hyper_exp ) np_he_input .)
    )               reduce using rule 127 (fm_1_param -> SEN ( hyper_exp ) np_he_input .)
    ]               reduce using rule 127 (fm_1_param -> SEN ( hyper_exp ) np_he_input .)
    TO              reduce using rule 127 (fm_1_param -> SEN ( hyper_exp ) np_he_input .)
    DO              reduce using rule 127 (fm_1_param -> SEN ( hyper_exp ) np_he_input .)


state 322

    (137) np_he_input -> epsilon .

    *               reduce using rule 137 (np_he_input -> epsilon .)
    /               reduce using rule 137 (np_he_input -> epsilon .)
    +               reduce using rule 137 (np_he_input -> epsilon .)
    -               reduce using rule 137 (np_he_input -> epsilon .)
    <               reduce using rule 137 (np_he_input -> epsilon .)
    >               reduce using rule 137 (np_he_input -> epsilon .)
    EQUAL_TO        reduce using rule 137 (np_he_input -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 137 (np_he_input -> epsilon .)
    &               reduce using rule 137 (np_he_input -> epsilon .)
    |               reduce using rule 137 (np_he_input -> epsilon .)
    ;               reduce using rule 137 (np_he_input -> epsilon .)
    ,               reduce using rule 137 (np_he_input -> epsilon .)
    )               reduce using rule 137 (np_he_input -> epsilon .)
    ]               reduce using rule 137 (np_he_input -> epsilon .)
    TO              reduce using rule 137 (np_he_input -> epsilon .)
    DO              reduce using rule 137 (np_he_input -> epsilon .)


state 323

    (128) fm_1_param -> COS ( hyper_exp ) np_he_input .

    *               reduce using rule 128 (fm_1_param -> COS ( hyper_exp ) np_he_input .)
    /               reduce using rule 128 (fm_1_param -> COS ( hyper_exp ) np_he_input .)
    +               reduce using rule 128 (fm_1_param -> COS ( hyper_exp ) np_he_input .)
    -               reduce using rule 128 (fm_1_param -> COS ( hyper_exp ) np_he_input .)
    <               reduce using rule 128 (fm_1_param -> COS ( hyper_exp ) np_he_input .)
    >               reduce using rule 128 (fm_1_param -> COS ( hyper_exp ) np_he_input .)
    EQUAL_TO        reduce using rule 128 (fm_1_param -> COS ( hyper_exp ) np_he_input .)
    NOT_EQUAL_TO    reduce using rule 128 (fm_1_param -> COS ( hyper_exp ) np_he_input .)
    &               reduce using rule 128 (fm_1_param -> COS ( hyper_exp ) np_he_input .)
    |               reduce using rule 128 (fm_1_param -> COS ( hyper_exp ) np_he_input .)
    ;               reduce using rule 128 (fm_1_param -> COS ( hyper_exp ) np_he_input .)
    ,               reduce using rule 128 (fm_1_param -> COS ( hyper_exp ) np_he_input .)
    )               reduce using rule 128 (fm_1_param -> COS ( hyper_exp ) np_he_input .)
    ]               reduce using rule 128 (fm_1_param -> COS ( hyper_exp ) np_he_input .)
    TO              reduce using rule 128 (fm_1_param -> COS ( hyper_exp ) np_he_input .)
    DO              reduce using rule 128 (fm_1_param -> COS ( hyper_exp ) np_he_input .)


state 324

    (129) fm_1_param -> TAN ( hyper_exp ) np_he_input .

    *               reduce using rule 129 (fm_1_param -> TAN ( hyper_exp ) np_he_input .)
    /               reduce using rule 129 (fm_1_param -> TAN ( hyper_exp ) np_he_input .)
    +               reduce using rule 129 (fm_1_param -> TAN ( hyper_exp ) np_he_input .)
    -               reduce using rule 129 (fm_1_param -> TAN ( hyper_exp ) np_he_input .)
    <               reduce using rule 129 (fm_1_param -> TAN ( hyper_exp ) np_he_input .)
    >               reduce using rule 129 (fm_1_param -> TAN ( hyper_exp ) np_he_input .)
    EQUAL_TO        reduce using rule 129 (fm_1_param -> TAN ( hyper_exp ) np_he_input .)
    NOT_EQUAL_TO    reduce using rule 129 (fm_1_param -> TAN ( hyper_exp ) np_he_input .)
    &               reduce using rule 129 (fm_1_param -> TAN ( hyper_exp ) np_he_input .)
    |               reduce using rule 129 (fm_1_param -> TAN ( hyper_exp ) np_he_input .)
    ;               reduce using rule 129 (fm_1_param -> TAN ( hyper_exp ) np_he_input .)
    ,               reduce using rule 129 (fm_1_param -> TAN ( hyper_exp ) np_he_input .)
    )               reduce using rule 129 (fm_1_param -> TAN ( hyper_exp ) np_he_input .)
    ]               reduce using rule 129 (fm_1_param -> TAN ( hyper_exp ) np_he_input .)
    TO              reduce using rule 129 (fm_1_param -> TAN ( hyper_exp ) np_he_input .)
    DO              reduce using rule 129 (fm_1_param -> TAN ( hyper_exp ) np_he_input .)


state 325

    (130) fm_1_param -> SENH ( hyper_exp ) np_he_input .

    *               reduce using rule 130 (fm_1_param -> SENH ( hyper_exp ) np_he_input .)
    /               reduce using rule 130 (fm_1_param -> SENH ( hyper_exp ) np_he_input .)
    +               reduce using rule 130 (fm_1_param -> SENH ( hyper_exp ) np_he_input .)
    -               reduce using rule 130 (fm_1_param -> SENH ( hyper_exp ) np_he_input .)
    <               reduce using rule 130 (fm_1_param -> SENH ( hyper_exp ) np_he_input .)
    >               reduce using rule 130 (fm_1_param -> SENH ( hyper_exp ) np_he_input .)
    EQUAL_TO        reduce using rule 130 (fm_1_param -> SENH ( hyper_exp ) np_he_input .)
    NOT_EQUAL_TO    reduce using rule 130 (fm_1_param -> SENH ( hyper_exp ) np_he_input .)
    &               reduce using rule 130 (fm_1_param -> SENH ( hyper_exp ) np_he_input .)
    |               reduce using rule 130 (fm_1_param -> SENH ( hyper_exp ) np_he_input .)
    ;               reduce using rule 130 (fm_1_param -> SENH ( hyper_exp ) np_he_input .)
    ,               reduce using rule 130 (fm_1_param -> SENH ( hyper_exp ) np_he_input .)
    )               reduce using rule 130 (fm_1_param -> SENH ( hyper_exp ) np_he_input .)
    ]               reduce using rule 130 (fm_1_param -> SENH ( hyper_exp ) np_he_input .)
    TO              reduce using rule 130 (fm_1_param -> SENH ( hyper_exp ) np_he_input .)
    DO              reduce using rule 130 (fm_1_param -> SENH ( hyper_exp ) np_he_input .)


state 326

    (131) fm_1_param -> COSH ( hyper_exp ) np_he_input .

    *               reduce using rule 131 (fm_1_param -> COSH ( hyper_exp ) np_he_input .)
    /               reduce using rule 131 (fm_1_param -> COSH ( hyper_exp ) np_he_input .)
    +               reduce using rule 131 (fm_1_param -> COSH ( hyper_exp ) np_he_input .)
    -               reduce using rule 131 (fm_1_param -> COSH ( hyper_exp ) np_he_input .)
    <               reduce using rule 131 (fm_1_param -> COSH ( hyper_exp ) np_he_input .)
    >               reduce using rule 131 (fm_1_param -> COSH ( hyper_exp ) np_he_input .)
    EQUAL_TO        reduce using rule 131 (fm_1_param -> COSH ( hyper_exp ) np_he_input .)
    NOT_EQUAL_TO    reduce using rule 131 (fm_1_param -> COSH ( hyper_exp ) np_he_input .)
    &               reduce using rule 131 (fm_1_param -> COSH ( hyper_exp ) np_he_input .)
    |               reduce using rule 131 (fm_1_param -> COSH ( hyper_exp ) np_he_input .)
    ;               reduce using rule 131 (fm_1_param -> COSH ( hyper_exp ) np_he_input .)
    ,               reduce using rule 131 (fm_1_param -> COSH ( hyper_exp ) np_he_input .)
    )               reduce using rule 131 (fm_1_param -> COSH ( hyper_exp ) np_he_input .)
    ]               reduce using rule 131 (fm_1_param -> COSH ( hyper_exp ) np_he_input .)
    TO              reduce using rule 131 (fm_1_param -> COSH ( hyper_exp ) np_he_input .)
    DO              reduce using rule 131 (fm_1_param -> COSH ( hyper_exp ) np_he_input .)


state 327

    (132) fm_1_param -> TANH ( hyper_exp ) np_he_input .

    *               reduce using rule 132 (fm_1_param -> TANH ( hyper_exp ) np_he_input .)
    /               reduce using rule 132 (fm_1_param -> TANH ( hyper_exp ) np_he_input .)
    +               reduce using rule 132 (fm_1_param -> TANH ( hyper_exp ) np_he_input .)
    -               reduce using rule 132 (fm_1_param -> TANH ( hyper_exp ) np_he_input .)
    <               reduce using rule 132 (fm_1_param -> TANH ( hyper_exp ) np_he_input .)
    >               reduce using rule 132 (fm_1_param -> TANH ( hyper_exp ) np_he_input .)
    EQUAL_TO        reduce using rule 132 (fm_1_param -> TANH ( hyper_exp ) np_he_input .)
    NOT_EQUAL_TO    reduce using rule 132 (fm_1_param -> TANH ( hyper_exp ) np_he_input .)
    &               reduce using rule 132 (fm_1_param -> TANH ( hyper_exp ) np_he_input .)
    |               reduce using rule 132 (fm_1_param -> TANH ( hyper_exp ) np_he_input .)
    ;               reduce using rule 132 (fm_1_param -> TANH ( hyper_exp ) np_he_input .)
    ,               reduce using rule 132 (fm_1_param -> TANH ( hyper_exp ) np_he_input .)
    )               reduce using rule 132 (fm_1_param -> TANH ( hyper_exp ) np_he_input .)
    ]               reduce using rule 132 (fm_1_param -> TANH ( hyper_exp ) np_he_input .)
    TO              reduce using rule 132 (fm_1_param -> TANH ( hyper_exp ) np_he_input .)
    DO              reduce using rule 132 (fm_1_param -> TANH ( hyper_exp ) np_he_input .)


state 328

    (133) fm_1_param -> LOG ( hyper_exp ) np_he_input .

    *               reduce using rule 133 (fm_1_param -> LOG ( hyper_exp ) np_he_input .)
    /               reduce using rule 133 (fm_1_param -> LOG ( hyper_exp ) np_he_input .)
    +               reduce using rule 133 (fm_1_param -> LOG ( hyper_exp ) np_he_input .)
    -               reduce using rule 133 (fm_1_param -> LOG ( hyper_exp ) np_he_input .)
    <               reduce using rule 133 (fm_1_param -> LOG ( hyper_exp ) np_he_input .)
    >               reduce using rule 133 (fm_1_param -> LOG ( hyper_exp ) np_he_input .)
    EQUAL_TO        reduce using rule 133 (fm_1_param -> LOG ( hyper_exp ) np_he_input .)
    NOT_EQUAL_TO    reduce using rule 133 (fm_1_param -> LOG ( hyper_exp ) np_he_input .)
    &               reduce using rule 133 (fm_1_param -> LOG ( hyper_exp ) np_he_input .)
    |               reduce using rule 133 (fm_1_param -> LOG ( hyper_exp ) np_he_input .)
    ;               reduce using rule 133 (fm_1_param -> LOG ( hyper_exp ) np_he_input .)
    ,               reduce using rule 133 (fm_1_param -> LOG ( hyper_exp ) np_he_input .)
    )               reduce using rule 133 (fm_1_param -> LOG ( hyper_exp ) np_he_input .)
    ]               reduce using rule 133 (fm_1_param -> LOG ( hyper_exp ) np_he_input .)
    TO              reduce using rule 133 (fm_1_param -> LOG ( hyper_exp ) np_he_input .)
    DO              reduce using rule 133 (fm_1_param -> LOG ( hyper_exp ) np_he_input .)


state 329

    (134) fm_1_param -> ABS ( hyper_exp ) np_he_input .

    *               reduce using rule 134 (fm_1_param -> ABS ( hyper_exp ) np_he_input .)
    /               reduce using rule 134 (fm_1_param -> ABS ( hyper_exp ) np_he_input .)
    +               reduce using rule 134 (fm_1_param -> ABS ( hyper_exp ) np_he_input .)
    -               reduce using rule 134 (fm_1_param -> ABS ( hyper_exp ) np_he_input .)
    <               reduce using rule 134 (fm_1_param -> ABS ( hyper_exp ) np_he_input .)
    >               reduce using rule 134 (fm_1_param -> ABS ( hyper_exp ) np_he_input .)
    EQUAL_TO        reduce using rule 134 (fm_1_param -> ABS ( hyper_exp ) np_he_input .)
    NOT_EQUAL_TO    reduce using rule 134 (fm_1_param -> ABS ( hyper_exp ) np_he_input .)
    &               reduce using rule 134 (fm_1_param -> ABS ( hyper_exp ) np_he_input .)
    |               reduce using rule 134 (fm_1_param -> ABS ( hyper_exp ) np_he_input .)
    ;               reduce using rule 134 (fm_1_param -> ABS ( hyper_exp ) np_he_input .)
    ,               reduce using rule 134 (fm_1_param -> ABS ( hyper_exp ) np_he_input .)
    )               reduce using rule 134 (fm_1_param -> ABS ( hyper_exp ) np_he_input .)
    ]               reduce using rule 134 (fm_1_param -> ABS ( hyper_exp ) np_he_input .)
    TO              reduce using rule 134 (fm_1_param -> ABS ( hyper_exp ) np_he_input .)
    DO              reduce using rule 134 (fm_1_param -> ABS ( hyper_exp ) np_he_input .)


state 330

    (135) fm_1_param -> FLOOR ( hyper_exp ) np_he_input .

    *               reduce using rule 135 (fm_1_param -> FLOOR ( hyper_exp ) np_he_input .)
    /               reduce using rule 135 (fm_1_param -> FLOOR ( hyper_exp ) np_he_input .)
    +               reduce using rule 135 (fm_1_param -> FLOOR ( hyper_exp ) np_he_input .)
    -               reduce using rule 135 (fm_1_param -> FLOOR ( hyper_exp ) np_he_input .)
    <               reduce using rule 135 (fm_1_param -> FLOOR ( hyper_exp ) np_he_input .)
    >               reduce using rule 135 (fm_1_param -> FLOOR ( hyper_exp ) np_he_input .)
    EQUAL_TO        reduce using rule 135 (fm_1_param -> FLOOR ( hyper_exp ) np_he_input .)
    NOT_EQUAL_TO    reduce using rule 135 (fm_1_param -> FLOOR ( hyper_exp ) np_he_input .)
    &               reduce using rule 135 (fm_1_param -> FLOOR ( hyper_exp ) np_he_input .)
    |               reduce using rule 135 (fm_1_param -> FLOOR ( hyper_exp ) np_he_input .)
    ;               reduce using rule 135 (fm_1_param -> FLOOR ( hyper_exp ) np_he_input .)
    ,               reduce using rule 135 (fm_1_param -> FLOOR ( hyper_exp ) np_he_input .)
    )               reduce using rule 135 (fm_1_param -> FLOOR ( hyper_exp ) np_he_input .)
    ]               reduce using rule 135 (fm_1_param -> FLOOR ( hyper_exp ) np_he_input .)
    TO              reduce using rule 135 (fm_1_param -> FLOOR ( hyper_exp ) np_he_input .)
    DO              reduce using rule 135 (fm_1_param -> FLOOR ( hyper_exp ) np_he_input .)


state 331

    (136) fm_1_param -> CEIL ( hyper_exp ) np_he_input .

    *               reduce using rule 136 (fm_1_param -> CEIL ( hyper_exp ) np_he_input .)
    /               reduce using rule 136 (fm_1_param -> CEIL ( hyper_exp ) np_he_input .)
    +               reduce using rule 136 (fm_1_param -> CEIL ( hyper_exp ) np_he_input .)
    -               reduce using rule 136 (fm_1_param -> CEIL ( hyper_exp ) np_he_input .)
    <               reduce using rule 136 (fm_1_param -> CEIL ( hyper_exp ) np_he_input .)
    >               reduce using rule 136 (fm_1_param -> CEIL ( hyper_exp ) np_he_input .)
    EQUAL_TO        reduce using rule 136 (fm_1_param -> CEIL ( hyper_exp ) np_he_input .)
    NOT_EQUAL_TO    reduce using rule 136 (fm_1_param -> CEIL ( hyper_exp ) np_he_input .)
    &               reduce using rule 136 (fm_1_param -> CEIL ( hyper_exp ) np_he_input .)
    |               reduce using rule 136 (fm_1_param -> CEIL ( hyper_exp ) np_he_input .)
    ;               reduce using rule 136 (fm_1_param -> CEIL ( hyper_exp ) np_he_input .)
    ,               reduce using rule 136 (fm_1_param -> CEIL ( hyper_exp ) np_he_input .)
    )               reduce using rule 136 (fm_1_param -> CEIL ( hyper_exp ) np_he_input .)
    ]               reduce using rule 136 (fm_1_param -> CEIL ( hyper_exp ) np_he_input .)
    TO              reduce using rule 136 (fm_1_param -> CEIL ( hyper_exp ) np_he_input .)
    DO              reduce using rule 136 (fm_1_param -> CEIL ( hyper_exp ) np_he_input .)


state 332

    (139) fm_2_param -> RAND ( hyper_exp , hyper_exp . ) np_int_input

    )               shift and go to state 351


state 333

    (140) fm_2_param -> POW ( hyper_exp , hyper_exp . ) np_int_input

    )               shift and go to state 352


state 334

    (141) fm_2_param -> MIN ( hyper_exp , hyper_exp . ) np_same_input

    )               shift and go to state 353


state 335

    (142) fm_2_param -> MAX ( hyper_exp , hyper_exp . ) np_same_input

    )               shift and go to state 354


state 336

    (52) func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .

    ;               reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    *               reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    /               reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    +               reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    -               reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    <               reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    >               reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    EQUAL_TO        reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    NOT_EQUAL_TO    reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    &               reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    |               reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    ,               reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    )               reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    ]               reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    TO              reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    DO              reduce using rule 52 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)


state 337

    (54) argumento_loop -> hyper_exp np_fc_2 argumento_loop_1 .

    )               reduce using rule 54 (argumento_loop -> hyper_exp np_fc_2 argumento_loop_1 .)


state 338

    (56) argumento_loop_1 -> , . hyper_exp np_fc_2 argumento_loop_1
    (86) hyper_exp -> . super_exp hyper_exp_1
    (90) super_exp -> . exp super_exp_1
    (96) exp -> . term exp_1
    (100) term -> . factor term_1
    (106) factor -> . constant
    (107) factor -> . variable
    (108) factor -> . ( hyper_exp )
    (109) factor -> . func_llamada
    (110) factor -> . read
    (111) factor -> . func_mat
    (112) constant -> . VAL_INT np_push_const_int
    (113) constant -> . VAL_FLOAT np_push_const_float
    (114) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (120) func_mat -> . fm_1_param
    (121) func_mat -> . fm_2_param
    (122) fm_1_param -> . MEDIA ( ID ) np_arr_input
    (123) fm_1_param -> . MEDIANA ( ID ) np_arr_input
    (124) fm_1_param -> . MODA ( ID ) np_arr_input
    (125) fm_1_param -> . LEN ( ID ) np_arr_input
    (126) fm_1_param -> . VARIANZA ( ID ) np_arr_input
    (127) fm_1_param -> . SEN ( hyper_exp ) np_he_input
    (128) fm_1_param -> . COS ( hyper_exp ) np_he_input
    (129) fm_1_param -> . TAN ( hyper_exp ) np_he_input
    (130) fm_1_param -> . SENH ( hyper_exp ) np_he_input
    (131) fm_1_param -> . COSH ( hyper_exp ) np_he_input
    (132) fm_1_param -> . TANH ( hyper_exp ) np_he_input
    (133) fm_1_param -> . LOG ( hyper_exp ) np_he_input
    (134) fm_1_param -> . ABS ( hyper_exp ) np_he_input
    (135) fm_1_param -> . FLOOR ( hyper_exp ) np_he_input
    (136) fm_1_param -> . CEIL ( hyper_exp ) np_he_input
    (139) fm_2_param -> . RAND ( hyper_exp , hyper_exp ) np_int_input
    (140) fm_2_param -> . POW ( hyper_exp , hyper_exp ) np_int_input
    (141) fm_2_param -> . MIN ( hyper_exp , hyper_exp ) np_same_input
    (142) fm_2_param -> . MAX ( hyper_exp , hyper_exp ) np_same_input

    (               shift and go to state 111
    VAL_INT         shift and go to state 115
    VAL_FLOAT       shift and go to state 116
    VAL_CHAR        shift and go to state 117
    ID              shift and go to state 118
    READ            shift and go to state 67
    MEDIA           shift and go to state 121
    MEDIANA         shift and go to state 122
    MODA            shift and go to state 123
    LEN             shift and go to state 124
    VARIANZA        shift and go to state 125
    SEN             shift and go to state 126
    COS             shift and go to state 127
    TAN             shift and go to state 128
    SENH            shift and go to state 129
    COSH            shift and go to state 130
    TANH            shift and go to state 131
    LOG             shift and go to state 132
    ABS             shift and go to state 133
    FLOOR           shift and go to state 134
    CEIL            shift and go to state 135
    RAND            shift and go to state 136
    POW             shift and go to state 137
    MIN             shift and go to state 138
    MAX             shift and go to state 139

    hyper_exp                      shift and go to state 355
    super_exp                      shift and go to state 106
    exp                            shift and go to state 107
    term                           shift and go to state 108
    factor                         shift and go to state 109
    constant                       shift and go to state 110
    variable                       shift and go to state 104
    func_llamada                   shift and go to state 112
    read                           shift and go to state 113
    func_mat                       shift and go to state 114
    fm_1_param                     shift and go to state 119
    fm_2_param                     shift and go to state 120

state 339

    (57) argumento_loop_1 -> epsilon .

    )               reduce using rule 57 (argumento_loop_1 -> epsilon .)


state 340

    (10) variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .

    =               reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    *               reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    /               reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    +               reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    -               reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    <               reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    >               reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    EQUAL_TO        reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    NOT_EQUAL_TO    reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    &               reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    |               reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    ;               reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    ,               reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    )               reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    ]               reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    TO              reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)
    DO              reduce using rule 10 (variable -> ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process .)


state 341

    (119) np_array_var_process -> epsilon .

    =               reduce using rule 119 (np_array_var_process -> epsilon .)
    *               reduce using rule 119 (np_array_var_process -> epsilon .)
    /               reduce using rule 119 (np_array_var_process -> epsilon .)
    +               reduce using rule 119 (np_array_var_process -> epsilon .)
    -               reduce using rule 119 (np_array_var_process -> epsilon .)
    <               reduce using rule 119 (np_array_var_process -> epsilon .)
    >               reduce using rule 119 (np_array_var_process -> epsilon .)
    EQUAL_TO        reduce using rule 119 (np_array_var_process -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 119 (np_array_var_process -> epsilon .)
    &               reduce using rule 119 (np_array_var_process -> epsilon .)
    |               reduce using rule 119 (np_array_var_process -> epsilon .)
    ;               reduce using rule 119 (np_array_var_process -> epsilon .)
    ,               reduce using rule 119 (np_array_var_process -> epsilon .)
    )               reduce using rule 119 (np_array_var_process -> epsilon .)
    ]               reduce using rule 119 (np_array_var_process -> epsilon .)
    TO              reduce using rule 119 (np_array_var_process -> epsilon .)
    DO              reduce using rule 119 (np_array_var_process -> epsilon .)


state 342

    (65) variable_loop_1 -> , variable np_add_to_input_counter . variable_loop_1
    (65) variable_loop_1 -> . , variable np_add_to_input_counter variable_loop_1
    (66) variable_loop_1 -> . epsilon
    (145) epsilon -> .

    ,               shift and go to state 254
    )               reduce using rule 145 (epsilon -> .)

    variable_loop_1                shift and go to state 356
    epsilon                        shift and go to state 255

state 343

    (59) hyper_exp_loop_1 -> , hyper_exp np_add_to_input_counter . hyper_exp_loop_1
    (59) hyper_exp_loop_1 -> . , hyper_exp np_add_to_input_counter hyper_exp_loop_1
    (60) hyper_exp_loop_1 -> . epsilon
    (145) epsilon -> .

    ,               shift and go to state 258
    )               reduce using rule 145 (epsilon -> .)

    hyper_exp_loop_1               shift and go to state 357
    epsilon                        shift and go to state 259

state 344

    (69) decision -> IF ( hyper_exp ) np_decision_1 THEN { . loop_estatuto } decision_else
    (74) loop_estatuto -> . estatuto loop_estatuto
    (75) loop_estatuto -> . epsilon
    (44) estatuto -> . asignacion
    (45) estatuto -> . func_llamada ;
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . decision
    (49) estatuto -> . repeticion
    (50) estatuto -> . func_return
    (145) epsilon -> .
    (51) asignacion -> . variable = hyper_exp ;
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (68) write -> . WRITE ( hyper_exp_loop ) ;
    (69) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (76) repeticion -> . condicional
    (77) repeticion -> . no_condicional
    (62) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (78) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (82) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 145 (epsilon -> .)
    ID              shift and go to state 66
    READ            shift and go to state 67
    WRITE           shift and go to state 68
    IF              shift and go to state 69
    RETURN          shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74

    loop_estatuto                  shift and go to state 358
    estatuto                       shift and go to state 56
    epsilon                        shift and go to state 57
    asignacion                     shift and go to state 58
    func_llamada                   shift and go to state 59
    read                           shift and go to state 60
    write                          shift and go to state 61
    decision                       shift and go to state 62
    repeticion                     shift and go to state 63
    func_return                    shift and go to state 64
    variable                       shift and go to state 65
    condicional                    shift and go to state 70
    no_condicional                 shift and go to state 71

state 345

    (78) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO . { loop_estatuto } np_cond_3

    {               shift and go to state 359


state 346

    (82) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp . np_for_2 DO np_for_3 { loop_estatuto }
    (84) np_for_2 -> . epsilon
    (145) epsilon -> .

    DO              reduce using rule 145 (epsilon -> .)

    np_for_2                       shift and go to state 360
    epsilon                        shift and go to state 361

state 347

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad . { loop_estatuto } np_kill_func

    {               shift and go to state 362


state 348

    (31) np_save_curr_func_quad -> epsilon .

    {               reduce using rule 31 (np_save_curr_func_quad -> epsilon .)


state 349

    (37) loop_parametro -> , tipo . ID np_add_param loop_parametro

    ID              shift and go to state 363


state 350

    (18) loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo .

    ;               reduce using rule 18 (loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name array_opcional np_add_var_to_varstable loop_var_decl_mismo_tipo .)


state 351

    (139) fm_2_param -> RAND ( hyper_exp , hyper_exp ) . np_int_input
    (143) np_int_input -> . epsilon
    (145) epsilon -> .

    *               reduce using rule 145 (epsilon -> .)
    /               reduce using rule 145 (epsilon -> .)
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    np_int_input                   shift and go to state 364
    epsilon                        shift and go to state 365

state 352

    (140) fm_2_param -> POW ( hyper_exp , hyper_exp ) . np_int_input
    (143) np_int_input -> . epsilon
    (145) epsilon -> .

    *               reduce using rule 145 (epsilon -> .)
    /               reduce using rule 145 (epsilon -> .)
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    np_int_input                   shift and go to state 366
    epsilon                        shift and go to state 365

state 353

    (141) fm_2_param -> MIN ( hyper_exp , hyper_exp ) . np_same_input
    (144) np_same_input -> . epsilon
    (145) epsilon -> .

    *               reduce using rule 145 (epsilon -> .)
    /               reduce using rule 145 (epsilon -> .)
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    np_same_input                  shift and go to state 367
    epsilon                        shift and go to state 368

state 354

    (142) fm_2_param -> MAX ( hyper_exp , hyper_exp ) . np_same_input
    (144) np_same_input -> . epsilon
    (145) epsilon -> .

    *               reduce using rule 145 (epsilon -> .)
    /               reduce using rule 145 (epsilon -> .)
    +               reduce using rule 145 (epsilon -> .)
    -               reduce using rule 145 (epsilon -> .)
    <               reduce using rule 145 (epsilon -> .)
    >               reduce using rule 145 (epsilon -> .)
    EQUAL_TO        reduce using rule 145 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 145 (epsilon -> .)
    &               reduce using rule 145 (epsilon -> .)
    |               reduce using rule 145 (epsilon -> .)
    ;               reduce using rule 145 (epsilon -> .)
    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)
    ]               reduce using rule 145 (epsilon -> .)
    TO              reduce using rule 145 (epsilon -> .)
    DO              reduce using rule 145 (epsilon -> .)

    np_same_input                  shift and go to state 369
    epsilon                        shift and go to state 368

state 355

    (56) argumento_loop_1 -> , hyper_exp . np_fc_2 argumento_loop_1
    (61) np_fc_2 -> . epsilon
    (145) epsilon -> .

    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)

    np_fc_2                        shift and go to state 370
    epsilon                        shift and go to state 301

state 356

    (65) variable_loop_1 -> , variable np_add_to_input_counter variable_loop_1 .

    )               reduce using rule 65 (variable_loop_1 -> , variable np_add_to_input_counter variable_loop_1 .)


state 357

    (59) hyper_exp_loop_1 -> , hyper_exp np_add_to_input_counter hyper_exp_loop_1 .

    )               reduce using rule 59 (hyper_exp_loop_1 -> , hyper_exp np_add_to_input_counter hyper_exp_loop_1 .)


state 358

    (69) decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto . } decision_else

    }               shift and go to state 371


state 359

    (78) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { . loop_estatuto } np_cond_3
    (74) loop_estatuto -> . estatuto loop_estatuto
    (75) loop_estatuto -> . epsilon
    (44) estatuto -> . asignacion
    (45) estatuto -> . func_llamada ;
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . decision
    (49) estatuto -> . repeticion
    (50) estatuto -> . func_return
    (145) epsilon -> .
    (51) asignacion -> . variable = hyper_exp ;
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (68) write -> . WRITE ( hyper_exp_loop ) ;
    (69) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (76) repeticion -> . condicional
    (77) repeticion -> . no_condicional
    (62) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (78) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (82) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 145 (epsilon -> .)
    ID              shift and go to state 66
    READ            shift and go to state 67
    WRITE           shift and go to state 68
    IF              shift and go to state 69
    RETURN          shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74

    loop_estatuto                  shift and go to state 372
    estatuto                       shift and go to state 56
    epsilon                        shift and go to state 57
    asignacion                     shift and go to state 58
    func_llamada                   shift and go to state 59
    read                           shift and go to state 60
    write                          shift and go to state 61
    decision                       shift and go to state 62
    repeticion                     shift and go to state 63
    func_return                    shift and go to state 64
    variable                       shift and go to state 65
    condicional                    shift and go to state 70
    no_condicional                 shift and go to state 71

state 360

    (82) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 . DO np_for_3 { loop_estatuto }

    DO              shift and go to state 373


state 361

    (84) np_for_2 -> epsilon .

    DO              reduce using rule 84 (np_for_2 -> epsilon .)


state 362

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { . loop_estatuto } np_kill_func
    (74) loop_estatuto -> . estatuto loop_estatuto
    (75) loop_estatuto -> . epsilon
    (44) estatuto -> . asignacion
    (45) estatuto -> . func_llamada ;
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . decision
    (49) estatuto -> . repeticion
    (50) estatuto -> . func_return
    (145) epsilon -> .
    (51) asignacion -> . variable = hyper_exp ;
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (68) write -> . WRITE ( hyper_exp_loop ) ;
    (69) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (76) repeticion -> . condicional
    (77) repeticion -> . no_condicional
    (62) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (78) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (82) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 145 (epsilon -> .)
    ID              shift and go to state 66
    READ            shift and go to state 67
    WRITE           shift and go to state 68
    IF              shift and go to state 69
    RETURN          shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74

    loop_estatuto                  shift and go to state 374
    estatuto                       shift and go to state 56
    epsilon                        shift and go to state 57
    asignacion                     shift and go to state 58
    func_llamada                   shift and go to state 59
    read                           shift and go to state 60
    write                          shift and go to state 61
    decision                       shift and go to state 62
    repeticion                     shift and go to state 63
    func_return                    shift and go to state 64
    variable                       shift and go to state 65
    condicional                    shift and go to state 70
    no_condicional                 shift and go to state 71

state 363

    (37) loop_parametro -> , tipo ID . np_add_param loop_parametro
    (39) np_add_param -> . epsilon
    (145) epsilon -> .

    ,               reduce using rule 145 (epsilon -> .)
    )               reduce using rule 145 (epsilon -> .)

    np_add_param                   shift and go to state 375
    epsilon                        shift and go to state 268

state 364

    (139) fm_2_param -> RAND ( hyper_exp , hyper_exp ) np_int_input .

    *               reduce using rule 139 (fm_2_param -> RAND ( hyper_exp , hyper_exp ) np_int_input .)
    /               reduce using rule 139 (fm_2_param -> RAND ( hyper_exp , hyper_exp ) np_int_input .)
    +               reduce using rule 139 (fm_2_param -> RAND ( hyper_exp , hyper_exp ) np_int_input .)
    -               reduce using rule 139 (fm_2_param -> RAND ( hyper_exp , hyper_exp ) np_int_input .)
    <               reduce using rule 139 (fm_2_param -> RAND ( hyper_exp , hyper_exp ) np_int_input .)
    >               reduce using rule 139 (fm_2_param -> RAND ( hyper_exp , hyper_exp ) np_int_input .)
    EQUAL_TO        reduce using rule 139 (fm_2_param -> RAND ( hyper_exp , hyper_exp ) np_int_input .)
    NOT_EQUAL_TO    reduce using rule 139 (fm_2_param -> RAND ( hyper_exp , hyper_exp ) np_int_input .)
    &               reduce using rule 139 (fm_2_param -> RAND ( hyper_exp , hyper_exp ) np_int_input .)
    |               reduce using rule 139 (fm_2_param -> RAND ( hyper_exp , hyper_exp ) np_int_input .)
    ;               reduce using rule 139 (fm_2_param -> RAND ( hyper_exp , hyper_exp ) np_int_input .)
    ,               reduce using rule 139 (fm_2_param -> RAND ( hyper_exp , hyper_exp ) np_int_input .)
    )               reduce using rule 139 (fm_2_param -> RAND ( hyper_exp , hyper_exp ) np_int_input .)
    ]               reduce using rule 139 (fm_2_param -> RAND ( hyper_exp , hyper_exp ) np_int_input .)
    TO              reduce using rule 139 (fm_2_param -> RAND ( hyper_exp , hyper_exp ) np_int_input .)
    DO              reduce using rule 139 (fm_2_param -> RAND ( hyper_exp , hyper_exp ) np_int_input .)


state 365

    (143) np_int_input -> epsilon .

    *               reduce using rule 143 (np_int_input -> epsilon .)
    /               reduce using rule 143 (np_int_input -> epsilon .)
    +               reduce using rule 143 (np_int_input -> epsilon .)
    -               reduce using rule 143 (np_int_input -> epsilon .)
    <               reduce using rule 143 (np_int_input -> epsilon .)
    >               reduce using rule 143 (np_int_input -> epsilon .)
    EQUAL_TO        reduce using rule 143 (np_int_input -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 143 (np_int_input -> epsilon .)
    &               reduce using rule 143 (np_int_input -> epsilon .)
    |               reduce using rule 143 (np_int_input -> epsilon .)
    ;               reduce using rule 143 (np_int_input -> epsilon .)
    ,               reduce using rule 143 (np_int_input -> epsilon .)
    )               reduce using rule 143 (np_int_input -> epsilon .)
    ]               reduce using rule 143 (np_int_input -> epsilon .)
    TO              reduce using rule 143 (np_int_input -> epsilon .)
    DO              reduce using rule 143 (np_int_input -> epsilon .)


state 366

    (140) fm_2_param -> POW ( hyper_exp , hyper_exp ) np_int_input .

    *               reduce using rule 140 (fm_2_param -> POW ( hyper_exp , hyper_exp ) np_int_input .)
    /               reduce using rule 140 (fm_2_param -> POW ( hyper_exp , hyper_exp ) np_int_input .)
    +               reduce using rule 140 (fm_2_param -> POW ( hyper_exp , hyper_exp ) np_int_input .)
    -               reduce using rule 140 (fm_2_param -> POW ( hyper_exp , hyper_exp ) np_int_input .)
    <               reduce using rule 140 (fm_2_param -> POW ( hyper_exp , hyper_exp ) np_int_input .)
    >               reduce using rule 140 (fm_2_param -> POW ( hyper_exp , hyper_exp ) np_int_input .)
    EQUAL_TO        reduce using rule 140 (fm_2_param -> POW ( hyper_exp , hyper_exp ) np_int_input .)
    NOT_EQUAL_TO    reduce using rule 140 (fm_2_param -> POW ( hyper_exp , hyper_exp ) np_int_input .)
    &               reduce using rule 140 (fm_2_param -> POW ( hyper_exp , hyper_exp ) np_int_input .)
    |               reduce using rule 140 (fm_2_param -> POW ( hyper_exp , hyper_exp ) np_int_input .)
    ;               reduce using rule 140 (fm_2_param -> POW ( hyper_exp , hyper_exp ) np_int_input .)
    ,               reduce using rule 140 (fm_2_param -> POW ( hyper_exp , hyper_exp ) np_int_input .)
    )               reduce using rule 140 (fm_2_param -> POW ( hyper_exp , hyper_exp ) np_int_input .)
    ]               reduce using rule 140 (fm_2_param -> POW ( hyper_exp , hyper_exp ) np_int_input .)
    TO              reduce using rule 140 (fm_2_param -> POW ( hyper_exp , hyper_exp ) np_int_input .)
    DO              reduce using rule 140 (fm_2_param -> POW ( hyper_exp , hyper_exp ) np_int_input .)


state 367

    (141) fm_2_param -> MIN ( hyper_exp , hyper_exp ) np_same_input .

    *               reduce using rule 141 (fm_2_param -> MIN ( hyper_exp , hyper_exp ) np_same_input .)
    /               reduce using rule 141 (fm_2_param -> MIN ( hyper_exp , hyper_exp ) np_same_input .)
    +               reduce using rule 141 (fm_2_param -> MIN ( hyper_exp , hyper_exp ) np_same_input .)
    -               reduce using rule 141 (fm_2_param -> MIN ( hyper_exp , hyper_exp ) np_same_input .)
    <               reduce using rule 141 (fm_2_param -> MIN ( hyper_exp , hyper_exp ) np_same_input .)
    >               reduce using rule 141 (fm_2_param -> MIN ( hyper_exp , hyper_exp ) np_same_input .)
    EQUAL_TO        reduce using rule 141 (fm_2_param -> MIN ( hyper_exp , hyper_exp ) np_same_input .)
    NOT_EQUAL_TO    reduce using rule 141 (fm_2_param -> MIN ( hyper_exp , hyper_exp ) np_same_input .)
    &               reduce using rule 141 (fm_2_param -> MIN ( hyper_exp , hyper_exp ) np_same_input .)
    |               reduce using rule 141 (fm_2_param -> MIN ( hyper_exp , hyper_exp ) np_same_input .)
    ;               reduce using rule 141 (fm_2_param -> MIN ( hyper_exp , hyper_exp ) np_same_input .)
    ,               reduce using rule 141 (fm_2_param -> MIN ( hyper_exp , hyper_exp ) np_same_input .)
    )               reduce using rule 141 (fm_2_param -> MIN ( hyper_exp , hyper_exp ) np_same_input .)
    ]               reduce using rule 141 (fm_2_param -> MIN ( hyper_exp , hyper_exp ) np_same_input .)
    TO              reduce using rule 141 (fm_2_param -> MIN ( hyper_exp , hyper_exp ) np_same_input .)
    DO              reduce using rule 141 (fm_2_param -> MIN ( hyper_exp , hyper_exp ) np_same_input .)


state 368

    (144) np_same_input -> epsilon .

    *               reduce using rule 144 (np_same_input -> epsilon .)
    /               reduce using rule 144 (np_same_input -> epsilon .)
    +               reduce using rule 144 (np_same_input -> epsilon .)
    -               reduce using rule 144 (np_same_input -> epsilon .)
    <               reduce using rule 144 (np_same_input -> epsilon .)
    >               reduce using rule 144 (np_same_input -> epsilon .)
    EQUAL_TO        reduce using rule 144 (np_same_input -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 144 (np_same_input -> epsilon .)
    &               reduce using rule 144 (np_same_input -> epsilon .)
    |               reduce using rule 144 (np_same_input -> epsilon .)
    ;               reduce using rule 144 (np_same_input -> epsilon .)
    ,               reduce using rule 144 (np_same_input -> epsilon .)
    )               reduce using rule 144 (np_same_input -> epsilon .)
    ]               reduce using rule 144 (np_same_input -> epsilon .)
    TO              reduce using rule 144 (np_same_input -> epsilon .)
    DO              reduce using rule 144 (np_same_input -> epsilon .)


state 369

    (142) fm_2_param -> MAX ( hyper_exp , hyper_exp ) np_same_input .

    *               reduce using rule 142 (fm_2_param -> MAX ( hyper_exp , hyper_exp ) np_same_input .)
    /               reduce using rule 142 (fm_2_param -> MAX ( hyper_exp , hyper_exp ) np_same_input .)
    +               reduce using rule 142 (fm_2_param -> MAX ( hyper_exp , hyper_exp ) np_same_input .)
    -               reduce using rule 142 (fm_2_param -> MAX ( hyper_exp , hyper_exp ) np_same_input .)
    <               reduce using rule 142 (fm_2_param -> MAX ( hyper_exp , hyper_exp ) np_same_input .)
    >               reduce using rule 142 (fm_2_param -> MAX ( hyper_exp , hyper_exp ) np_same_input .)
    EQUAL_TO        reduce using rule 142 (fm_2_param -> MAX ( hyper_exp , hyper_exp ) np_same_input .)
    NOT_EQUAL_TO    reduce using rule 142 (fm_2_param -> MAX ( hyper_exp , hyper_exp ) np_same_input .)
    &               reduce using rule 142 (fm_2_param -> MAX ( hyper_exp , hyper_exp ) np_same_input .)
    |               reduce using rule 142 (fm_2_param -> MAX ( hyper_exp , hyper_exp ) np_same_input .)
    ;               reduce using rule 142 (fm_2_param -> MAX ( hyper_exp , hyper_exp ) np_same_input .)
    ,               reduce using rule 142 (fm_2_param -> MAX ( hyper_exp , hyper_exp ) np_same_input .)
    )               reduce using rule 142 (fm_2_param -> MAX ( hyper_exp , hyper_exp ) np_same_input .)
    ]               reduce using rule 142 (fm_2_param -> MAX ( hyper_exp , hyper_exp ) np_same_input .)
    TO              reduce using rule 142 (fm_2_param -> MAX ( hyper_exp , hyper_exp ) np_same_input .)
    DO              reduce using rule 142 (fm_2_param -> MAX ( hyper_exp , hyper_exp ) np_same_input .)


state 370

    (56) argumento_loop_1 -> , hyper_exp np_fc_2 . argumento_loop_1
    (56) argumento_loop_1 -> . , hyper_exp np_fc_2 argumento_loop_1
    (57) argumento_loop_1 -> . epsilon
    (145) epsilon -> .

    ,               shift and go to state 338
    )               reduce using rule 145 (epsilon -> .)

    argumento_loop_1               shift and go to state 376
    epsilon                        shift and go to state 339

state 371

    (69) decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } . decision_else
    (70) decision_else -> . ELSE np_decision_2 { loop_estatuto }
    (71) decision_else -> . epsilon
    (145) epsilon -> .

    ELSE            shift and go to state 378
    ID              reduce using rule 145 (epsilon -> .)
    READ            reduce using rule 145 (epsilon -> .)
    WRITE           reduce using rule 145 (epsilon -> .)
    IF              reduce using rule 145 (epsilon -> .)
    RETURN          reduce using rule 145 (epsilon -> .)
    WHILE           reduce using rule 145 (epsilon -> .)
    FOR             reduce using rule 145 (epsilon -> .)
    }               reduce using rule 145 (epsilon -> .)

    decision_else                  shift and go to state 377
    epsilon                        shift and go to state 379

state 372

    (78) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto . } np_cond_3

    }               shift and go to state 380


state 373

    (82) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO . np_for_3 { loop_estatuto }
    (85) np_for_3 -> . epsilon
    (145) epsilon -> .

    {               reduce using rule 145 (epsilon -> .)

    np_for_3                       shift and go to state 381
    epsilon                        shift and go to state 382

state 374

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto . } np_kill_func

    }               shift and go to state 383


state 375

    (37) loop_parametro -> , tipo ID np_add_param . loop_parametro
    (37) loop_parametro -> . , tipo ID np_add_param loop_parametro
    (38) loop_parametro -> . epsilon
    (145) epsilon -> .

    ,               shift and go to state 312
    )               reduce using rule 145 (epsilon -> .)

    loop_parametro                 shift and go to state 384
    epsilon                        shift and go to state 313

state 376

    (56) argumento_loop_1 -> , hyper_exp np_fc_2 argumento_loop_1 .

    )               reduce using rule 56 (argumento_loop_1 -> , hyper_exp np_fc_2 argumento_loop_1 .)


state 377

    (69) decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .

    ID              reduce using rule 69 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    READ            reduce using rule 69 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    WRITE           reduce using rule 69 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    IF              reduce using rule 69 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    RETURN          reduce using rule 69 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    WHILE           reduce using rule 69 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    FOR             reduce using rule 69 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    }               reduce using rule 69 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)


state 378

    (70) decision_else -> ELSE . np_decision_2 { loop_estatuto }
    (73) np_decision_2 -> . epsilon
    (145) epsilon -> .

    {               reduce using rule 145 (epsilon -> .)

    np_decision_2                  shift and go to state 385
    epsilon                        shift and go to state 386

state 379

    (71) decision_else -> epsilon .

    ID              reduce using rule 71 (decision_else -> epsilon .)
    READ            reduce using rule 71 (decision_else -> epsilon .)
    WRITE           reduce using rule 71 (decision_else -> epsilon .)
    IF              reduce using rule 71 (decision_else -> epsilon .)
    RETURN          reduce using rule 71 (decision_else -> epsilon .)
    WHILE           reduce using rule 71 (decision_else -> epsilon .)
    FOR             reduce using rule 71 (decision_else -> epsilon .)
    }               reduce using rule 71 (decision_else -> epsilon .)


state 380

    (78) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } . np_cond_3
    (81) np_cond_3 -> . epsilon
    (145) epsilon -> .

    ID              reduce using rule 145 (epsilon -> .)
    READ            reduce using rule 145 (epsilon -> .)
    WRITE           reduce using rule 145 (epsilon -> .)
    IF              reduce using rule 145 (epsilon -> .)
    RETURN          reduce using rule 145 (epsilon -> .)
    WHILE           reduce using rule 145 (epsilon -> .)
    FOR             reduce using rule 145 (epsilon -> .)
    }               reduce using rule 145 (epsilon -> .)

    np_cond_3                      shift and go to state 387
    epsilon                        shift and go to state 388

state 381

    (82) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 . { loop_estatuto }

    {               shift and go to state 389


state 382

    (85) np_for_3 -> epsilon .

    {               reduce using rule 85 (np_for_3 -> epsilon .)


state 383

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } . np_kill_func
    (32) np_kill_func -> . epsilon
    (145) epsilon -> .

    FUNCTION        reduce using rule 145 (epsilon -> .)
    MAIN            reduce using rule 145 (epsilon -> .)

    np_kill_func                   shift and go to state 390
    epsilon                        shift and go to state 391

state 384

    (37) loop_parametro -> , tipo ID np_add_param loop_parametro .

    )               reduce using rule 37 (loop_parametro -> , tipo ID np_add_param loop_parametro .)


state 385

    (70) decision_else -> ELSE np_decision_2 . { loop_estatuto }

    {               shift and go to state 392


state 386

    (73) np_decision_2 -> epsilon .

    {               reduce using rule 73 (np_decision_2 -> epsilon .)


state 387

    (78) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .

    ID              reduce using rule 78 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    READ            reduce using rule 78 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    WRITE           reduce using rule 78 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    IF              reduce using rule 78 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    RETURN          reduce using rule 78 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    WHILE           reduce using rule 78 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    FOR             reduce using rule 78 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    }               reduce using rule 78 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)


state 388

    (81) np_cond_3 -> epsilon .

    ID              reduce using rule 81 (np_cond_3 -> epsilon .)
    READ            reduce using rule 81 (np_cond_3 -> epsilon .)
    WRITE           reduce using rule 81 (np_cond_3 -> epsilon .)
    IF              reduce using rule 81 (np_cond_3 -> epsilon .)
    RETURN          reduce using rule 81 (np_cond_3 -> epsilon .)
    WHILE           reduce using rule 81 (np_cond_3 -> epsilon .)
    FOR             reduce using rule 81 (np_cond_3 -> epsilon .)
    }               reduce using rule 81 (np_cond_3 -> epsilon .)


state 389

    (82) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { . loop_estatuto }
    (74) loop_estatuto -> . estatuto loop_estatuto
    (75) loop_estatuto -> . epsilon
    (44) estatuto -> . asignacion
    (45) estatuto -> . func_llamada ;
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . decision
    (49) estatuto -> . repeticion
    (50) estatuto -> . func_return
    (145) epsilon -> .
    (51) asignacion -> . variable = hyper_exp ;
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (68) write -> . WRITE ( hyper_exp_loop ) ;
    (69) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (76) repeticion -> . condicional
    (77) repeticion -> . no_condicional
    (62) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (78) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (82) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 145 (epsilon -> .)
    ID              shift and go to state 66
    READ            shift and go to state 67
    WRITE           shift and go to state 68
    IF              shift and go to state 69
    RETURN          shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74

    variable                       shift and go to state 65
    loop_estatuto                  shift and go to state 393
    estatuto                       shift and go to state 56
    epsilon                        shift and go to state 57
    asignacion                     shift and go to state 58
    func_llamada                   shift and go to state 59
    read                           shift and go to state 60
    write                          shift and go to state 61
    decision                       shift and go to state 62
    repeticion                     shift and go to state 63
    func_return                    shift and go to state 64
    condicional                    shift and go to state 70
    no_condicional                 shift and go to state 71

state 390

    (25) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func .

    FUNCTION        reduce using rule 25 (func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func .)
    MAIN            reduce using rule 25 (func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func .)


state 391

    (32) np_kill_func -> epsilon .

    FUNCTION        reduce using rule 32 (np_kill_func -> epsilon .)
    MAIN            reduce using rule 32 (np_kill_func -> epsilon .)


state 392

    (70) decision_else -> ELSE np_decision_2 { . loop_estatuto }
    (74) loop_estatuto -> . estatuto loop_estatuto
    (75) loop_estatuto -> . epsilon
    (44) estatuto -> . asignacion
    (45) estatuto -> . func_llamada ;
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . decision
    (49) estatuto -> . repeticion
    (50) estatuto -> . func_return
    (145) epsilon -> .
    (51) asignacion -> . variable = hyper_exp ;
    (52) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (63) read -> . READ ( variable_loop ) ;
    (68) write -> . WRITE ( hyper_exp_loop ) ;
    (69) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (76) repeticion -> . condicional
    (77) repeticion -> . no_condicional
    (62) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (10) variable -> . ID [ np_push_operator_stack hyper_exp ] np_pop_operator_stack np_array_var_process
    (78) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (82) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 145 (epsilon -> .)
    ID              shift and go to state 66
    READ            shift and go to state 67
    WRITE           shift and go to state 68
    IF              shift and go to state 69
    RETURN          shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74

    loop_estatuto                  shift and go to state 394
    estatuto                       shift and go to state 56
    epsilon                        shift and go to state 57
    asignacion                     shift and go to state 58
    func_llamada                   shift and go to state 59
    read                           shift and go to state 60
    write                          shift and go to state 61
    decision                       shift and go to state 62
    repeticion                     shift and go to state 63
    func_return                    shift and go to state 64
    variable                       shift and go to state 65
    condicional                    shift and go to state 70
    no_condicional                 shift and go to state 71

state 393

    (82) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto . }

    }               shift and go to state 395


state 394

    (70) decision_else -> ELSE np_decision_2 { loop_estatuto . }

    }               shift and go to state 396


state 395

    (82) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .

    ID              reduce using rule 82 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    READ            reduce using rule 82 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    WRITE           reduce using rule 82 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    IF              reduce using rule 82 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    RETURN          reduce using rule 82 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    WHILE           reduce using rule 82 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    FOR             reduce using rule 82 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    }               reduce using rule 82 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)


state 396

    (70) decision_else -> ELSE np_decision_2 { loop_estatuto } .

    ID              reduce using rule 70 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    READ            reduce using rule 70 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    WRITE           reduce using rule 70 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    IF              reduce using rule 70 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    RETURN          reduce using rule 70 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    WHILE           reduce using rule 70 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    FOR             reduce using rule 70 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    }               reduce using rule 70 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)

