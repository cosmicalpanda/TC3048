Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    PRINT
    STRING
    VAL_STRING

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main
Rule 2     np_program_start -> epsilon
Rule 3     np_start_dirfunc -> epsilon
Rule 4     main -> MAIN ( ) { loop_estatuto } np_fin_total
Rule 5     np_fin_total -> epsilon
Rule 6     var_opcional -> var_declaracion
Rule 7     var_opcional -> epsilon
Rule 8     variable -> ID np_single_var_process
Rule 9     var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion
Rule 10    np_var_prep -> epsilon
Rule 11    loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion
Rule 12    loop_var_declaracion -> epsilon
Rule 13    var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ;
Rule 14    loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo
Rule 15    loop_var_decl_mismo_tipo -> epsilon
Rule 16    np_set_curr_var_type -> epsilon
Rule 17    np_set_curr_var_name -> epsilon
Rule 18    np_add_var_to_varstable -> epsilon
Rule 19    func_programa_loop -> func_definicion func_programa_loop
Rule 20    func_programa_loop -> epsilon
Rule 21    func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } np_kill_func
Rule 22    func_tipo_retorno -> tipo
Rule 23    func_tipo_retorno -> VOID
Rule 24    np_func_tipo_retorno -> epsilon
Rule 25    np_func_id -> epsilon
Rule 26    np_add_to_func_dir -> epsilon
Rule 27    np_kill_func -> epsilon
Rule 28    np_prep_func_params -> epsilon
Rule 29    func_parametro -> parametro
Rule 30    func_parametro -> epsilon
Rule 31    parametro -> tipo ID loop_parametro
Rule 32    loop_parametro -> , tipo ID loop_parametro
Rule 33    loop_parametro -> epsilon
Rule 34    tipo -> INT
Rule 35    tipo -> FLOAT
Rule 36    tipo -> CHAR
Rule 37    tipo -> BOOL
Rule 38    estatuto -> asignacion
Rule 39    estatuto -> func_llamada ;
Rule 40    estatuto -> read
Rule 41    estatuto -> write
Rule 42    estatuto -> decision
Rule 43    estatuto -> repeticion
Rule 44    estatuto -> func_return
Rule 45    asignacion -> variable = hyper_exp ;
Rule 46    func_llamada -> ID ( )
Rule 47    func_llamada -> ID ( hyper_exp_loop )
Rule 48    hyper_exp_loop -> hyper_exp np_add_to_input_counter hyper_exp_loop_1
Rule 49    hyper_exp_loop_1 -> , hyper_exp np_add_to_input_counter hyper_exp_loop_1
Rule 50    hyper_exp_loop_1 -> epsilon
Rule 51    func_return -> RETURN ( hyper_exp ) ;
Rule 52    read -> READ ( variable_loop ) ;
Rule 53    variable_loop -> variable np_add_to_input_counter variable_loop_1
Rule 54    variable_loop_1 -> , variable np_add_to_input_counter variable_loop_1
Rule 55    variable_loop_1 -> epsilon
Rule 56    np_add_to_input_counter -> epsilon
Rule 57    write -> WRITE ( hyper_exp_loop ) ;
Rule 58    decision -> IF ( hyper_exp ) THEN { loop_estatuto } decision_1
Rule 59    decision_1 -> ELSE { loop_estatuto }
Rule 60    decision_1 -> epsilon
Rule 61    loop_estatuto -> estatuto loop_estatuto
Rule 62    loop_estatuto -> epsilon
Rule 63    repeticion -> condicional
Rule 64    repeticion -> no_condicional
Rule 65    condicional -> WHILE ( hyper_exp ) DO { loop_estatuto }
Rule 66    no_condicional -> FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto }
Rule 67    hyper_exp -> super_exp hyper_exp_1
Rule 68    hyper_exp_1 -> & np_push_operator_stack super_exp
Rule 69    hyper_exp_1 -> | np_push_operator_stack super_exp
Rule 70    hyper_exp_1 -> epsilon
Rule 71    super_exp -> exp super_exp_1
Rule 72    super_exp_1 -> < np_push_operator_stack exp
Rule 73    super_exp_1 -> > np_push_operator_stack exp
Rule 74    super_exp_1 -> EQUAL_TO np_push_operator_stack exp
Rule 75    super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp
Rule 76    super_exp_1 -> epsilon
Rule 77    exp -> term exp_1
Rule 78    exp_1 -> + np_push_operator_stack term
Rule 79    exp_1 -> - np_push_operator_stack term
Rule 80    exp_1 -> epsilon
Rule 81    term -> factor term_1
Rule 82    term_1 -> * np_push_operator_stack factor
Rule 83    term_1 -> / np_push_operator_stack factor
Rule 84    term_1 -> epsilon
Rule 85    np_push_operator_stack -> epsilon
Rule 86    factor -> constant
Rule 87    factor -> variable
Rule 88    factor -> ( hyper_exp )
Rule 89    constant -> VAL_INT np_push_const_int
Rule 90    constant -> VAL_FLOAT np_push_const_float
Rule 91    constant -> VAL_CHAR np_push_const_char
Rule 92    np_push_const_int -> epsilon
Rule 93    np_push_const_float -> epsilon
Rule 94    np_push_const_char -> epsilon
Rule 95    np_single_var_process -> epsilon
Rule 96    epsilon -> <empty>

Terminals, with rules where they appear

&                    : 68
(                    : 4 21 46 47 51 52 57 58 65 88
)                    : 4 21 46 47 51 52 57 58 65 88
*                    : 82
+                    : 78
,                    : 14 32 49 54
-                    : 79
/                    : 83
;                    : 1 13 21 39 45 51 52 57
<                    : 72
=                    : 45 66
>                    : 73
BOOL                 : 37
CHAR                 : 36
DO                   : 65 66
ELSE                 : 59
EQUAL_TO             : 74
FLOAT                : 35
FOR                  : 66
FUNCTION             : 21
ID                   : 1 8 13 14 21 31 32 46 47
IF                   : 58
INT                  : 34
MAIN                 : 4
NOT_EQUAL_TO         : 75
PRINT                : 
PROGRAM              : 1
READ                 : 52
RETURN               : 51
STRING               : 
THEN                 : 58
TO                   : 66
VAL_CHAR             : 91
VAL_FLOAT            : 90
VAL_INT              : 89
VAL_STRING           : 
VARS                 : 9
VOID                 : 23
WHILE                : 65
WRITE                : 57
error                : 
{                    : 4 21 58 59 65 66
|                    : 69
}                    : 4 21 58 59 65 66

Nonterminals, with rules where they appear

asignacion           : 38
condicional          : 63
constant             : 86
decision             : 42
decision_1           : 58
epsilon              : 2 3 5 7 10 12 15 16 17 18 20 24 25 26 27 28 30 33 50 55 56 60 62 70 76 80 84 85 92 93 94 95
estatuto             : 61
exp                  : 71 72 73 74 75
exp_1                : 77
factor               : 81 82 83
func_definicion      : 19
func_llamada         : 39
func_parametro       : 21
func_programa_loop   : 1 19
func_return          : 44
func_tipo_retorno    : 21
hyper_exp            : 45 48 49 51 58 65 66 66 88
hyper_exp_1          : 67
hyper_exp_loop       : 47 57
hyper_exp_loop_1     : 48 49
loop_estatuto        : 4 21 58 59 61 65 66
loop_parametro       : 31 32
loop_var_decl_mismo_tipo : 13 14
loop_var_declaracion : 9 11
main                 : 1
no_condicional       : 64
np_add_to_func_dir   : 21
np_add_to_input_counter : 48 49 53 54
np_add_var_to_varstable : 13 14
np_fin_total         : 4
np_func_id           : 21
np_func_tipo_retorno : 21
np_kill_func         : 21
np_prep_func_params  : 21
np_program_start     : 1
np_push_const_char   : 91
np_push_const_float  : 90
np_push_const_int    : 89
np_push_operator_stack : 68 69 72 73 74 75 78 79 82 83
np_set_curr_var_name : 13 14
np_set_curr_var_type : 13
np_single_var_process : 8
np_start_dirfunc     : 1
np_var_prep          : 9
parametro            : 29
programa             : 0
read                 : 40
repeticion           : 43
super_exp            : 67 68 69
super_exp_1          : 71
term                 : 77 78 79
term_1               : 81
tipo                 : 13 22 31 32
var_declaracion      : 6
var_declaracion_mismo_tipo : 9 11
var_opcional         : 1 21
variable             : 45 53 54 66 87
variable_loop        : 52
variable_loop_1      : 53 54
write                : 41

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main

    PROGRAM         shift and go to state 1

    programa                       shift and go to state 2

state 1

    (1) programa -> PROGRAM . np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main
    (2) np_program_start -> . epsilon
    (96) epsilon -> .

    ID              reduce using rule 96 (epsilon -> .)

    np_program_start               shift and go to state 3
    epsilon                        shift and go to state 4

state 2

    (0) S' -> programa .



state 3

    (1) programa -> PROGRAM np_program_start . ID np_start_dirfunc ; var_opcional func_programa_loop main

    ID              shift and go to state 5


state 4

    (2) np_program_start -> epsilon .

    ID              reduce using rule 2 (np_program_start -> epsilon .)


state 5

    (1) programa -> PROGRAM np_program_start ID . np_start_dirfunc ; var_opcional func_programa_loop main
    (3) np_start_dirfunc -> . epsilon
    (96) epsilon -> .

    ;               reduce using rule 96 (epsilon -> .)

    np_start_dirfunc               shift and go to state 6
    epsilon                        shift and go to state 7

state 6

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc . ; var_opcional func_programa_loop main

    ;               shift and go to state 8


state 7

    (3) np_start_dirfunc -> epsilon .

    ;               reduce using rule 3 (np_start_dirfunc -> epsilon .)


state 8

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc ; . var_opcional func_programa_loop main
    (6) var_opcional -> . var_declaracion
    (7) var_opcional -> . epsilon
    (9) var_declaracion -> . VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion
    (96) epsilon -> .

    VARS            shift and go to state 9
    FUNCTION        reduce using rule 96 (epsilon -> .)
    MAIN            reduce using rule 96 (epsilon -> .)

    var_declaracion                shift and go to state 10
    epsilon                        shift and go to state 11
    var_opcional                   shift and go to state 12

state 9

    (9) var_declaracion -> VARS . np_var_prep var_declaracion_mismo_tipo loop_var_declaracion
    (10) np_var_prep -> . epsilon
    (96) epsilon -> .

    INT             reduce using rule 96 (epsilon -> .)
    FLOAT           reduce using rule 96 (epsilon -> .)
    CHAR            reduce using rule 96 (epsilon -> .)
    BOOL            reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 13
    np_var_prep                    shift and go to state 14

state 10

    (6) var_opcional -> var_declaracion .

    FUNCTION        reduce using rule 6 (var_opcional -> var_declaracion .)
    MAIN            reduce using rule 6 (var_opcional -> var_declaracion .)
    {               reduce using rule 6 (var_opcional -> var_declaracion .)


state 11

    (7) var_opcional -> epsilon .

    FUNCTION        reduce using rule 7 (var_opcional -> epsilon .)
    MAIN            reduce using rule 7 (var_opcional -> epsilon .)
    {               reduce using rule 7 (var_opcional -> epsilon .)


state 12

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional . func_programa_loop main
    (19) func_programa_loop -> . func_definicion func_programa_loop
    (20) func_programa_loop -> . epsilon
    (21) func_definicion -> . FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } np_kill_func
    (96) epsilon -> .

    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 96 (epsilon -> .)

    func_definicion                shift and go to state 15
    epsilon                        shift and go to state 17
    func_programa_loop             shift and go to state 18

state 13

    (10) np_var_prep -> epsilon .

    INT             reduce using rule 10 (np_var_prep -> epsilon .)
    FLOAT           reduce using rule 10 (np_var_prep -> epsilon .)
    CHAR            reduce using rule 10 (np_var_prep -> epsilon .)
    BOOL            reduce using rule 10 (np_var_prep -> epsilon .)


state 14

    (9) var_declaracion -> VARS np_var_prep . var_declaracion_mismo_tipo loop_var_declaracion
    (13) var_declaracion_mismo_tipo -> . tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (34) tipo -> . INT
    (35) tipo -> . FLOAT
    (36) tipo -> . CHAR
    (37) tipo -> . BOOL

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 24

    tipo                           shift and go to state 19
    var_declaracion_mismo_tipo     shift and go to state 23

state 15

    (19) func_programa_loop -> func_definicion . func_programa_loop
    (19) func_programa_loop -> . func_definicion func_programa_loop
    (20) func_programa_loop -> . epsilon
    (21) func_definicion -> . FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } np_kill_func
    (96) epsilon -> .

    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 96 (epsilon -> .)

    func_definicion                shift and go to state 15
    epsilon                        shift and go to state 17
    func_programa_loop             shift and go to state 25

state 16

    (21) func_definicion -> FUNCTION . func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } np_kill_func
    (22) func_tipo_retorno -> . tipo
    (23) func_tipo_retorno -> . VOID
    (34) tipo -> . INT
    (35) tipo -> . FLOAT
    (36) tipo -> . CHAR
    (37) tipo -> . BOOL

    VOID            shift and go to state 26
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 24

    func_tipo_retorno              shift and go to state 28
    tipo                           shift and go to state 27

state 17

    (20) func_programa_loop -> epsilon .

    MAIN            reduce using rule 20 (func_programa_loop -> epsilon .)


state 18

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop . main
    (4) main -> . MAIN ( ) { loop_estatuto } np_fin_total

    MAIN            shift and go to state 29

    main                           shift and go to state 30

state 19

    (13) var_declaracion_mismo_tipo -> tipo . np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (16) np_set_curr_var_type -> . epsilon
    (96) epsilon -> .

    ID              reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 31
    np_set_curr_var_type           shift and go to state 32

state 20

    (34) tipo -> INT .

    ID              reduce using rule 34 (tipo -> INT .)


state 21

    (35) tipo -> FLOAT .

    ID              reduce using rule 35 (tipo -> FLOAT .)


state 22

    (36) tipo -> CHAR .

    ID              reduce using rule 36 (tipo -> CHAR .)


state 23

    (9) var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo . loop_var_declaracion
    (11) loop_var_declaracion -> . var_declaracion_mismo_tipo loop_var_declaracion
    (12) loop_var_declaracion -> . epsilon
    (13) var_declaracion_mismo_tipo -> . tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (96) epsilon -> .
    (34) tipo -> . INT
    (35) tipo -> . FLOAT
    (36) tipo -> . CHAR
    (37) tipo -> . BOOL

    FUNCTION        reduce using rule 96 (epsilon -> .)
    MAIN            reduce using rule 96 (epsilon -> .)
    {               reduce using rule 96 (epsilon -> .)
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 24

    tipo                           shift and go to state 19
    epsilon                        shift and go to state 33
    var_declaracion_mismo_tipo     shift and go to state 34
    loop_var_declaracion           shift and go to state 35

state 24

    (37) tipo -> BOOL .

    ID              reduce using rule 37 (tipo -> BOOL .)


state 25

    (19) func_programa_loop -> func_definicion func_programa_loop .

    MAIN            reduce using rule 19 (func_programa_loop -> func_definicion func_programa_loop .)


state 26

    (23) func_tipo_retorno -> VOID .

    ID              reduce using rule 23 (func_tipo_retorno -> VOID .)


state 27

    (22) func_tipo_retorno -> tipo .

    ID              reduce using rule 22 (func_tipo_retorno -> tipo .)


state 28

    (21) func_definicion -> FUNCTION func_tipo_retorno . np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } np_kill_func
    (24) np_func_tipo_retorno -> . epsilon
    (96) epsilon -> .

    ID              reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 37
    np_func_tipo_retorno           shift and go to state 36

state 29

    (4) main -> MAIN . ( ) { loop_estatuto } np_fin_total

    (               shift and go to state 38


state 30

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main .

    $end            reduce using rule 1 (programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main .)


state 31

    (16) np_set_curr_var_type -> epsilon .

    ID              reduce using rule 16 (np_set_curr_var_type -> epsilon .)


state 32

    (13) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type . ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ;

    ID              shift and go to state 39


state 33

    (12) loop_var_declaracion -> epsilon .

    FUNCTION        reduce using rule 12 (loop_var_declaracion -> epsilon .)
    MAIN            reduce using rule 12 (loop_var_declaracion -> epsilon .)
    {               reduce using rule 12 (loop_var_declaracion -> epsilon .)


state 34

    (11) loop_var_declaracion -> var_declaracion_mismo_tipo . loop_var_declaracion
    (11) loop_var_declaracion -> . var_declaracion_mismo_tipo loop_var_declaracion
    (12) loop_var_declaracion -> . epsilon
    (13) var_declaracion_mismo_tipo -> . tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (96) epsilon -> .
    (34) tipo -> . INT
    (35) tipo -> . FLOAT
    (36) tipo -> . CHAR
    (37) tipo -> . BOOL

    FUNCTION        reduce using rule 96 (epsilon -> .)
    MAIN            reduce using rule 96 (epsilon -> .)
    {               reduce using rule 96 (epsilon -> .)
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 24

    tipo                           shift and go to state 19
    epsilon                        shift and go to state 33
    var_declaracion_mismo_tipo     shift and go to state 34
    loop_var_declaracion           shift and go to state 40

state 35

    (9) var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion .

    FUNCTION        reduce using rule 9 (var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion .)
    MAIN            reduce using rule 9 (var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion .)
    {               reduce using rule 9 (var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion .)


state 36

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno . ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } np_kill_func

    ID              shift and go to state 41


state 37

    (24) np_func_tipo_retorno -> epsilon .

    ID              reduce using rule 24 (np_func_tipo_retorno -> epsilon .)


state 38

    (4) main -> MAIN ( . ) { loop_estatuto } np_fin_total

    )               shift and go to state 42


state 39

    (13) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID . np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (17) np_set_curr_var_name -> . epsilon
    (96) epsilon -> .

    ,               reduce using rule 96 (epsilon -> .)
    ;               reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 43
    np_set_curr_var_name           shift and go to state 44

state 40

    (11) loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion .

    FUNCTION        reduce using rule 11 (loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion .)
    MAIN            reduce using rule 11 (loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion .)
    {               reduce using rule 11 (loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion .)


state 41

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID . np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } np_kill_func
    (25) np_func_id -> . epsilon
    (96) epsilon -> .

    (               reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 45
    np_func_id                     shift and go to state 46

state 42

    (4) main -> MAIN ( ) . { loop_estatuto } np_fin_total

    {               shift and go to state 47


state 43

    (17) np_set_curr_var_name -> epsilon .

    ,               reduce using rule 17 (np_set_curr_var_name -> epsilon .)
    ;               reduce using rule 17 (np_set_curr_var_name -> epsilon .)


state 44

    (13) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name . np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (18) np_add_var_to_varstable -> . epsilon
    (96) epsilon -> .

    ,               reduce using rule 96 (epsilon -> .)
    ;               reduce using rule 96 (epsilon -> .)

    np_add_var_to_varstable        shift and go to state 48
    epsilon                        shift and go to state 49

state 45

    (25) np_func_id -> epsilon .

    (               reduce using rule 25 (np_func_id -> epsilon .)


state 46

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id . np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } np_kill_func
    (26) np_add_to_func_dir -> . epsilon
    (96) epsilon -> .

    (               reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 50
    np_add_to_func_dir             shift and go to state 51

state 47

    (4) main -> MAIN ( ) { . loop_estatuto } np_fin_total
    (61) loop_estatuto -> . estatuto loop_estatuto
    (62) loop_estatuto -> . epsilon
    (38) estatuto -> . asignacion
    (39) estatuto -> . func_llamada ;
    (40) estatuto -> . read
    (41) estatuto -> . write
    (42) estatuto -> . decision
    (43) estatuto -> . repeticion
    (44) estatuto -> . func_return
    (96) epsilon -> .
    (45) asignacion -> . variable = hyper_exp ;
    (46) func_llamada -> . ID ( )
    (47) func_llamada -> . ID ( hyper_exp_loop )
    (52) read -> . READ ( variable_loop ) ;
    (57) write -> . WRITE ( hyper_exp_loop ) ;
    (58) decision -> . IF ( hyper_exp ) THEN { loop_estatuto } decision_1
    (63) repeticion -> . condicional
    (64) repeticion -> . no_condicional
    (51) func_return -> . RETURN ( hyper_exp ) ;
    (8) variable -> . ID np_single_var_process
    (65) condicional -> . WHILE ( hyper_exp ) DO { loop_estatuto }
    (66) no_condicional -> . FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto }

    }               reduce using rule 96 (epsilon -> .)
    ID              shift and go to state 59
    READ            shift and go to state 53
    WRITE           shift and go to state 66
    IF              shift and go to state 68
    RETURN          shift and go to state 52
    WHILE           shift and go to state 54
    FOR             shift and go to state 62

    asignacion                     shift and go to state 69
    read                           shift and go to state 63
    epsilon                        shift and go to state 64
    decision                       shift and go to state 57
    estatuto                       shift and go to state 58
    write                          shift and go to state 60
    func_return                    shift and go to state 70
    variable                       shift and go to state 67
    func_llamada                   shift and go to state 55
    repeticion                     shift and go to state 71
    loop_estatuto                  shift and go to state 56
    condicional                    shift and go to state 65
    no_condicional                 shift and go to state 61

state 48

    (13) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable . loop_var_decl_mismo_tipo ;
    (14) loop_var_decl_mismo_tipo -> . , ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo
    (15) loop_var_decl_mismo_tipo -> . epsilon
    (96) epsilon -> .

    ,               shift and go to state 73
    ;               reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 72
    loop_var_decl_mismo_tipo       shift and go to state 74

state 49

    (18) np_add_var_to_varstable -> epsilon .

    ,               reduce using rule 18 (np_add_var_to_varstable -> epsilon .)
    ;               reduce using rule 18 (np_add_var_to_varstable -> epsilon .)


state 50

    (26) np_add_to_func_dir -> epsilon .

    (               reduce using rule 26 (np_add_to_func_dir -> epsilon .)


state 51

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir . ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } np_kill_func

    (               shift and go to state 75


state 52

    (51) func_return -> RETURN . ( hyper_exp ) ;

    (               shift and go to state 76


state 53

    (52) read -> READ . ( variable_loop ) ;

    (               shift and go to state 77


state 54

    (65) condicional -> WHILE . ( hyper_exp ) DO { loop_estatuto }

    (               shift and go to state 78


state 55

    (39) estatuto -> func_llamada . ;

    ;               shift and go to state 79


state 56

    (4) main -> MAIN ( ) { loop_estatuto . } np_fin_total

    }               shift and go to state 80


state 57

    (42) estatuto -> decision .

    ID              reduce using rule 42 (estatuto -> decision .)
    READ            reduce using rule 42 (estatuto -> decision .)
    WRITE           reduce using rule 42 (estatuto -> decision .)
    IF              reduce using rule 42 (estatuto -> decision .)
    RETURN          reduce using rule 42 (estatuto -> decision .)
    WHILE           reduce using rule 42 (estatuto -> decision .)
    FOR             reduce using rule 42 (estatuto -> decision .)
    }               reduce using rule 42 (estatuto -> decision .)


state 58

    (61) loop_estatuto -> estatuto . loop_estatuto
    (61) loop_estatuto -> . estatuto loop_estatuto
    (62) loop_estatuto -> . epsilon
    (38) estatuto -> . asignacion
    (39) estatuto -> . func_llamada ;
    (40) estatuto -> . read
    (41) estatuto -> . write
    (42) estatuto -> . decision
    (43) estatuto -> . repeticion
    (44) estatuto -> . func_return
    (96) epsilon -> .
    (45) asignacion -> . variable = hyper_exp ;
    (46) func_llamada -> . ID ( )
    (47) func_llamada -> . ID ( hyper_exp_loop )
    (52) read -> . READ ( variable_loop ) ;
    (57) write -> . WRITE ( hyper_exp_loop ) ;
    (58) decision -> . IF ( hyper_exp ) THEN { loop_estatuto } decision_1
    (63) repeticion -> . condicional
    (64) repeticion -> . no_condicional
    (51) func_return -> . RETURN ( hyper_exp ) ;
    (8) variable -> . ID np_single_var_process
    (65) condicional -> . WHILE ( hyper_exp ) DO { loop_estatuto }
    (66) no_condicional -> . FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto }

    }               reduce using rule 96 (epsilon -> .)
    ID              shift and go to state 59
    READ            shift and go to state 53
    WRITE           shift and go to state 66
    IF              shift and go to state 68
    RETURN          shift and go to state 52
    WHILE           shift and go to state 54
    FOR             shift and go to state 62

    asignacion                     shift and go to state 69
    read                           shift and go to state 63
    epsilon                        shift and go to state 64
    decision                       shift and go to state 57
    estatuto                       shift and go to state 58
    write                          shift and go to state 60
    func_return                    shift and go to state 70
    variable                       shift and go to state 67
    func_llamada                   shift and go to state 55
    repeticion                     shift and go to state 71
    loop_estatuto                  shift and go to state 81
    condicional                    shift and go to state 65
    no_condicional                 shift and go to state 61

state 59

    (46) func_llamada -> ID . ( )
    (47) func_llamada -> ID . ( hyper_exp_loop )
    (8) variable -> ID . np_single_var_process
    (95) np_single_var_process -> . epsilon
    (96) epsilon -> .

    (               shift and go to state 82
    =               reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 84
    np_single_var_process          shift and go to state 83

state 60

    (41) estatuto -> write .

    ID              reduce using rule 41 (estatuto -> write .)
    READ            reduce using rule 41 (estatuto -> write .)
    WRITE           reduce using rule 41 (estatuto -> write .)
    IF              reduce using rule 41 (estatuto -> write .)
    RETURN          reduce using rule 41 (estatuto -> write .)
    WHILE           reduce using rule 41 (estatuto -> write .)
    FOR             reduce using rule 41 (estatuto -> write .)
    }               reduce using rule 41 (estatuto -> write .)


state 61

    (64) repeticion -> no_condicional .

    ID              reduce using rule 64 (repeticion -> no_condicional .)
    READ            reduce using rule 64 (repeticion -> no_condicional .)
    WRITE           reduce using rule 64 (repeticion -> no_condicional .)
    IF              reduce using rule 64 (repeticion -> no_condicional .)
    RETURN          reduce using rule 64 (repeticion -> no_condicional .)
    WHILE           reduce using rule 64 (repeticion -> no_condicional .)
    FOR             reduce using rule 64 (repeticion -> no_condicional .)
    }               reduce using rule 64 (repeticion -> no_condicional .)


state 62

    (66) no_condicional -> FOR . variable = hyper_exp TO hyper_exp DO { loop_estatuto }
    (8) variable -> . ID np_single_var_process

    ID              shift and go to state 86

    variable                       shift and go to state 85

state 63

    (40) estatuto -> read .

    ID              reduce using rule 40 (estatuto -> read .)
    READ            reduce using rule 40 (estatuto -> read .)
    WRITE           reduce using rule 40 (estatuto -> read .)
    IF              reduce using rule 40 (estatuto -> read .)
    RETURN          reduce using rule 40 (estatuto -> read .)
    WHILE           reduce using rule 40 (estatuto -> read .)
    FOR             reduce using rule 40 (estatuto -> read .)
    }               reduce using rule 40 (estatuto -> read .)


state 64

    (62) loop_estatuto -> epsilon .

    }               reduce using rule 62 (loop_estatuto -> epsilon .)


state 65

    (63) repeticion -> condicional .

    ID              reduce using rule 63 (repeticion -> condicional .)
    READ            reduce using rule 63 (repeticion -> condicional .)
    WRITE           reduce using rule 63 (repeticion -> condicional .)
    IF              reduce using rule 63 (repeticion -> condicional .)
    RETURN          reduce using rule 63 (repeticion -> condicional .)
    WHILE           reduce using rule 63 (repeticion -> condicional .)
    FOR             reduce using rule 63 (repeticion -> condicional .)
    }               reduce using rule 63 (repeticion -> condicional .)


state 66

    (57) write -> WRITE . ( hyper_exp_loop ) ;

    (               shift and go to state 87


state 67

    (45) asignacion -> variable . = hyper_exp ;

    =               shift and go to state 88


state 68

    (58) decision -> IF . ( hyper_exp ) THEN { loop_estatuto } decision_1

    (               shift and go to state 89


state 69

    (38) estatuto -> asignacion .

    ID              reduce using rule 38 (estatuto -> asignacion .)
    READ            reduce using rule 38 (estatuto -> asignacion .)
    WRITE           reduce using rule 38 (estatuto -> asignacion .)
    IF              reduce using rule 38 (estatuto -> asignacion .)
    RETURN          reduce using rule 38 (estatuto -> asignacion .)
    WHILE           reduce using rule 38 (estatuto -> asignacion .)
    FOR             reduce using rule 38 (estatuto -> asignacion .)
    }               reduce using rule 38 (estatuto -> asignacion .)


state 70

    (44) estatuto -> func_return .

    ID              reduce using rule 44 (estatuto -> func_return .)
    READ            reduce using rule 44 (estatuto -> func_return .)
    WRITE           reduce using rule 44 (estatuto -> func_return .)
    IF              reduce using rule 44 (estatuto -> func_return .)
    RETURN          reduce using rule 44 (estatuto -> func_return .)
    WHILE           reduce using rule 44 (estatuto -> func_return .)
    FOR             reduce using rule 44 (estatuto -> func_return .)
    }               reduce using rule 44 (estatuto -> func_return .)


state 71

    (43) estatuto -> repeticion .

    ID              reduce using rule 43 (estatuto -> repeticion .)
    READ            reduce using rule 43 (estatuto -> repeticion .)
    WRITE           reduce using rule 43 (estatuto -> repeticion .)
    IF              reduce using rule 43 (estatuto -> repeticion .)
    RETURN          reduce using rule 43 (estatuto -> repeticion .)
    WHILE           reduce using rule 43 (estatuto -> repeticion .)
    FOR             reduce using rule 43 (estatuto -> repeticion .)
    }               reduce using rule 43 (estatuto -> repeticion .)


state 72

    (15) loop_var_decl_mismo_tipo -> epsilon .

    ;               reduce using rule 15 (loop_var_decl_mismo_tipo -> epsilon .)


state 73

    (14) loop_var_decl_mismo_tipo -> , . ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo

    ID              shift and go to state 90


state 74

    (13) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo . ;

    ;               shift and go to state 91


state 75

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( . np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } np_kill_func
    (28) np_prep_func_params -> . epsilon
    (96) epsilon -> .

    INT             reduce using rule 96 (epsilon -> .)
    FLOAT           reduce using rule 96 (epsilon -> .)
    CHAR            reduce using rule 96 (epsilon -> .)
    BOOL            reduce using rule 96 (epsilon -> .)
    )               reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 93
    np_prep_func_params            shift and go to state 92

state 76

    (51) func_return -> RETURN ( . hyper_exp ) ;
    (67) hyper_exp -> . super_exp hyper_exp_1
    (71) super_exp -> . exp super_exp_1
    (77) exp -> . term exp_1
    (81) term -> . factor term_1
    (86) factor -> . constant
    (87) factor -> . variable
    (88) factor -> . ( hyper_exp )
    (89) constant -> . VAL_INT np_push_const_int
    (90) constant -> . VAL_FLOAT np_push_const_float
    (91) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 96
    VAL_INT         shift and go to state 104
    VAL_FLOAT       shift and go to state 100
    VAL_CHAR        shift and go to state 101
    ID              shift and go to state 86

    super_exp                      shift and go to state 95
    term                           shift and go to state 103
    hyper_exp                      shift and go to state 98
    constant                       shift and go to state 94
    exp                            shift and go to state 99
    factor                         shift and go to state 97
    variable                       shift and go to state 102

state 77

    (52) read -> READ ( . variable_loop ) ;
    (53) variable_loop -> . variable np_add_to_input_counter variable_loop_1
    (8) variable -> . ID np_single_var_process

    ID              shift and go to state 86

    variable                       shift and go to state 105
    variable_loop                  shift and go to state 106

state 78

    (65) condicional -> WHILE ( . hyper_exp ) DO { loop_estatuto }
    (67) hyper_exp -> . super_exp hyper_exp_1
    (71) super_exp -> . exp super_exp_1
    (77) exp -> . term exp_1
    (81) term -> . factor term_1
    (86) factor -> . constant
    (87) factor -> . variable
    (88) factor -> . ( hyper_exp )
    (89) constant -> . VAL_INT np_push_const_int
    (90) constant -> . VAL_FLOAT np_push_const_float
    (91) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 96
    VAL_INT         shift and go to state 104
    VAL_FLOAT       shift and go to state 100
    VAL_CHAR        shift and go to state 101
    ID              shift and go to state 86

    super_exp                      shift and go to state 95
    term                           shift and go to state 103
    hyper_exp                      shift and go to state 107
    constant                       shift and go to state 94
    exp                            shift and go to state 99
    factor                         shift and go to state 97
    variable                       shift and go to state 102

state 79

    (39) estatuto -> func_llamada ; .

    ID              reduce using rule 39 (estatuto -> func_llamada ; .)
    READ            reduce using rule 39 (estatuto -> func_llamada ; .)
    WRITE           reduce using rule 39 (estatuto -> func_llamada ; .)
    IF              reduce using rule 39 (estatuto -> func_llamada ; .)
    RETURN          reduce using rule 39 (estatuto -> func_llamada ; .)
    WHILE           reduce using rule 39 (estatuto -> func_llamada ; .)
    FOR             reduce using rule 39 (estatuto -> func_llamada ; .)
    }               reduce using rule 39 (estatuto -> func_llamada ; .)


state 80

    (4) main -> MAIN ( ) { loop_estatuto } . np_fin_total
    (5) np_fin_total -> . epsilon
    (96) epsilon -> .

    $end            reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 108
    np_fin_total                   shift and go to state 109

state 81

    (61) loop_estatuto -> estatuto loop_estatuto .

    }               reduce using rule 61 (loop_estatuto -> estatuto loop_estatuto .)


state 82

    (46) func_llamada -> ID ( . )
    (47) func_llamada -> ID ( . hyper_exp_loop )
    (48) hyper_exp_loop -> . hyper_exp np_add_to_input_counter hyper_exp_loop_1
    (67) hyper_exp -> . super_exp hyper_exp_1
    (71) super_exp -> . exp super_exp_1
    (77) exp -> . term exp_1
    (81) term -> . factor term_1
    (86) factor -> . constant
    (87) factor -> . variable
    (88) factor -> . ( hyper_exp )
    (89) constant -> . VAL_INT np_push_const_int
    (90) constant -> . VAL_FLOAT np_push_const_float
    (91) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    )               shift and go to state 111
    (               shift and go to state 96
    VAL_INT         shift and go to state 104
    VAL_FLOAT       shift and go to state 100
    VAL_CHAR        shift and go to state 101
    ID              shift and go to state 86

    super_exp                      shift and go to state 95
    term                           shift and go to state 103
    hyper_exp                      shift and go to state 112
    constant                       shift and go to state 94
    hyper_exp_loop                 shift and go to state 110
    exp                            shift and go to state 99
    factor                         shift and go to state 97
    variable                       shift and go to state 102

state 83

    (8) variable -> ID np_single_var_process .

    *               reduce using rule 8 (variable -> ID np_single_var_process .)
    /               reduce using rule 8 (variable -> ID np_single_var_process .)
    <               reduce using rule 8 (variable -> ID np_single_var_process .)
    >               reduce using rule 8 (variable -> ID np_single_var_process .)
    EQUAL_TO        reduce using rule 8 (variable -> ID np_single_var_process .)
    NOT_EQUAL_TO    reduce using rule 8 (variable -> ID np_single_var_process .)
    &               reduce using rule 8 (variable -> ID np_single_var_process .)
    |               reduce using rule 8 (variable -> ID np_single_var_process .)
    )               reduce using rule 8 (variable -> ID np_single_var_process .)
    ,               reduce using rule 8 (variable -> ID np_single_var_process .)
    ;               reduce using rule 8 (variable -> ID np_single_var_process .)
    TO              reduce using rule 8 (variable -> ID np_single_var_process .)
    DO              reduce using rule 8 (variable -> ID np_single_var_process .)
    +               reduce using rule 8 (variable -> ID np_single_var_process .)
    -               reduce using rule 8 (variable -> ID np_single_var_process .)
    =               reduce using rule 8 (variable -> ID np_single_var_process .)


state 84

    (95) np_single_var_process -> epsilon .

    =               reduce using rule 95 (np_single_var_process -> epsilon .)
    *               reduce using rule 95 (np_single_var_process -> epsilon .)
    /               reduce using rule 95 (np_single_var_process -> epsilon .)
    +               reduce using rule 95 (np_single_var_process -> epsilon .)
    -               reduce using rule 95 (np_single_var_process -> epsilon .)
    <               reduce using rule 95 (np_single_var_process -> epsilon .)
    >               reduce using rule 95 (np_single_var_process -> epsilon .)
    EQUAL_TO        reduce using rule 95 (np_single_var_process -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 95 (np_single_var_process -> epsilon .)
    &               reduce using rule 95 (np_single_var_process -> epsilon .)
    |               reduce using rule 95 (np_single_var_process -> epsilon .)
    )               reduce using rule 95 (np_single_var_process -> epsilon .)
    ,               reduce using rule 95 (np_single_var_process -> epsilon .)
    ;               reduce using rule 95 (np_single_var_process -> epsilon .)
    TO              reduce using rule 95 (np_single_var_process -> epsilon .)
    DO              reduce using rule 95 (np_single_var_process -> epsilon .)


state 85

    (66) no_condicional -> FOR variable . = hyper_exp TO hyper_exp DO { loop_estatuto }

    =               shift and go to state 113


state 86

    (8) variable -> ID . np_single_var_process
    (95) np_single_var_process -> . epsilon
    (96) epsilon -> .

    =               reduce using rule 96 (epsilon -> .)
    *               reduce using rule 96 (epsilon -> .)
    /               reduce using rule 96 (epsilon -> .)
    +               reduce using rule 96 (epsilon -> .)
    -               reduce using rule 96 (epsilon -> .)
    <               reduce using rule 96 (epsilon -> .)
    >               reduce using rule 96 (epsilon -> .)
    EQUAL_TO        reduce using rule 96 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 96 (epsilon -> .)
    &               reduce using rule 96 (epsilon -> .)
    |               reduce using rule 96 (epsilon -> .)
    )               reduce using rule 96 (epsilon -> .)
    ,               reduce using rule 96 (epsilon -> .)
    ;               reduce using rule 96 (epsilon -> .)
    TO              reduce using rule 96 (epsilon -> .)
    DO              reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 84
    np_single_var_process          shift and go to state 83

state 87

    (57) write -> WRITE ( . hyper_exp_loop ) ;
    (48) hyper_exp_loop -> . hyper_exp np_add_to_input_counter hyper_exp_loop_1
    (67) hyper_exp -> . super_exp hyper_exp_1
    (71) super_exp -> . exp super_exp_1
    (77) exp -> . term exp_1
    (81) term -> . factor term_1
    (86) factor -> . constant
    (87) factor -> . variable
    (88) factor -> . ( hyper_exp )
    (89) constant -> . VAL_INT np_push_const_int
    (90) constant -> . VAL_FLOAT np_push_const_float
    (91) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 96
    VAL_INT         shift and go to state 104
    VAL_FLOAT       shift and go to state 100
    VAL_CHAR        shift and go to state 101
    ID              shift and go to state 86

    super_exp                      shift and go to state 95
    term                           shift and go to state 103
    hyper_exp                      shift and go to state 112
    constant                       shift and go to state 94
    hyper_exp_loop                 shift and go to state 114
    exp                            shift and go to state 99
    factor                         shift and go to state 97
    variable                       shift and go to state 102

state 88

    (45) asignacion -> variable = . hyper_exp ;
    (67) hyper_exp -> . super_exp hyper_exp_1
    (71) super_exp -> . exp super_exp_1
    (77) exp -> . term exp_1
    (81) term -> . factor term_1
    (86) factor -> . constant
    (87) factor -> . variable
    (88) factor -> . ( hyper_exp )
    (89) constant -> . VAL_INT np_push_const_int
    (90) constant -> . VAL_FLOAT np_push_const_float
    (91) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 96
    VAL_INT         shift and go to state 104
    VAL_FLOAT       shift and go to state 100
    VAL_CHAR        shift and go to state 101
    ID              shift and go to state 86

    super_exp                      shift and go to state 95
    term                           shift and go to state 103
    hyper_exp                      shift and go to state 115
    constant                       shift and go to state 94
    exp                            shift and go to state 99
    factor                         shift and go to state 97
    variable                       shift and go to state 102

state 89

    (58) decision -> IF ( . hyper_exp ) THEN { loop_estatuto } decision_1
    (67) hyper_exp -> . super_exp hyper_exp_1
    (71) super_exp -> . exp super_exp_1
    (77) exp -> . term exp_1
    (81) term -> . factor term_1
    (86) factor -> . constant
    (87) factor -> . variable
    (88) factor -> . ( hyper_exp )
    (89) constant -> . VAL_INT np_push_const_int
    (90) constant -> . VAL_FLOAT np_push_const_float
    (91) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 96
    VAL_INT         shift and go to state 104
    VAL_FLOAT       shift and go to state 100
    VAL_CHAR        shift and go to state 101
    ID              shift and go to state 86

    super_exp                      shift and go to state 95
    term                           shift and go to state 103
    hyper_exp                      shift and go to state 116
    constant                       shift and go to state 94
    exp                            shift and go to state 99
    factor                         shift and go to state 97
    variable                       shift and go to state 102

state 90

    (14) loop_var_decl_mismo_tipo -> , ID . np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo
    (17) np_set_curr_var_name -> . epsilon
    (96) epsilon -> .

    ,               reduce using rule 96 (epsilon -> .)
    ;               reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 43
    np_set_curr_var_name           shift and go to state 117

state 91

    (13) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ; .

    INT             reduce using rule 13 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    FLOAT           reduce using rule 13 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    CHAR            reduce using rule 13 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    BOOL            reduce using rule 13 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    FUNCTION        reduce using rule 13 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    MAIN            reduce using rule 13 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    {               reduce using rule 13 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)


state 92

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params . func_parametro ) ; var_opcional { loop_estatuto } np_kill_func
    (29) func_parametro -> . parametro
    (30) func_parametro -> . epsilon
    (31) parametro -> . tipo ID loop_parametro
    (96) epsilon -> .
    (34) tipo -> . INT
    (35) tipo -> . FLOAT
    (36) tipo -> . CHAR
    (37) tipo -> . BOOL

    )               reduce using rule 96 (epsilon -> .)
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 24

    tipo                           shift and go to state 119
    parametro                      shift and go to state 120
    epsilon                        shift and go to state 121
    func_parametro                 shift and go to state 118

state 93

    (28) np_prep_func_params -> epsilon .

    INT             reduce using rule 28 (np_prep_func_params -> epsilon .)
    FLOAT           reduce using rule 28 (np_prep_func_params -> epsilon .)
    CHAR            reduce using rule 28 (np_prep_func_params -> epsilon .)
    BOOL            reduce using rule 28 (np_prep_func_params -> epsilon .)
    )               reduce using rule 28 (np_prep_func_params -> epsilon .)


state 94

    (86) factor -> constant .

    *               reduce using rule 86 (factor -> constant .)
    /               reduce using rule 86 (factor -> constant .)
    +               reduce using rule 86 (factor -> constant .)
    -               reduce using rule 86 (factor -> constant .)
    <               reduce using rule 86 (factor -> constant .)
    >               reduce using rule 86 (factor -> constant .)
    EQUAL_TO        reduce using rule 86 (factor -> constant .)
    NOT_EQUAL_TO    reduce using rule 86 (factor -> constant .)
    &               reduce using rule 86 (factor -> constant .)
    |               reduce using rule 86 (factor -> constant .)
    ,               reduce using rule 86 (factor -> constant .)
    )               reduce using rule 86 (factor -> constant .)
    ;               reduce using rule 86 (factor -> constant .)
    TO              reduce using rule 86 (factor -> constant .)
    DO              reduce using rule 86 (factor -> constant .)


state 95

    (67) hyper_exp -> super_exp . hyper_exp_1
    (68) hyper_exp_1 -> . & np_push_operator_stack super_exp
    (69) hyper_exp_1 -> . | np_push_operator_stack super_exp
    (70) hyper_exp_1 -> . epsilon
    (96) epsilon -> .

    &               shift and go to state 122
    |               shift and go to state 125
    )               reduce using rule 96 (epsilon -> .)
    ,               reduce using rule 96 (epsilon -> .)
    ;               reduce using rule 96 (epsilon -> .)
    TO              reduce using rule 96 (epsilon -> .)
    DO              reduce using rule 96 (epsilon -> .)

    hyper_exp_1                    shift and go to state 124
    epsilon                        shift and go to state 123

state 96

    (88) factor -> ( . hyper_exp )
    (67) hyper_exp -> . super_exp hyper_exp_1
    (71) super_exp -> . exp super_exp_1
    (77) exp -> . term exp_1
    (81) term -> . factor term_1
    (86) factor -> . constant
    (87) factor -> . variable
    (88) factor -> . ( hyper_exp )
    (89) constant -> . VAL_INT np_push_const_int
    (90) constant -> . VAL_FLOAT np_push_const_float
    (91) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 96
    VAL_INT         shift and go to state 104
    VAL_FLOAT       shift and go to state 100
    VAL_CHAR        shift and go to state 101
    ID              shift and go to state 86

    super_exp                      shift and go to state 95
    term                           shift and go to state 103
    hyper_exp                      shift and go to state 126
    constant                       shift and go to state 94
    exp                            shift and go to state 99
    factor                         shift and go to state 97
    variable                       shift and go to state 102

state 97

    (81) term -> factor . term_1
    (82) term_1 -> . * np_push_operator_stack factor
    (83) term_1 -> . / np_push_operator_stack factor
    (84) term_1 -> . epsilon
    (96) epsilon -> .

    *               shift and go to state 128
    /               shift and go to state 129
    +               reduce using rule 96 (epsilon -> .)
    -               reduce using rule 96 (epsilon -> .)
    <               reduce using rule 96 (epsilon -> .)
    >               reduce using rule 96 (epsilon -> .)
    EQUAL_TO        reduce using rule 96 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 96 (epsilon -> .)
    &               reduce using rule 96 (epsilon -> .)
    |               reduce using rule 96 (epsilon -> .)
    )               reduce using rule 96 (epsilon -> .)
    ,               reduce using rule 96 (epsilon -> .)
    ;               reduce using rule 96 (epsilon -> .)
    TO              reduce using rule 96 (epsilon -> .)
    DO              reduce using rule 96 (epsilon -> .)

    term_1                         shift and go to state 130
    epsilon                        shift and go to state 127

state 98

    (51) func_return -> RETURN ( hyper_exp . ) ;

    )               shift and go to state 131


state 99

    (71) super_exp -> exp . super_exp_1
    (72) super_exp_1 -> . < np_push_operator_stack exp
    (73) super_exp_1 -> . > np_push_operator_stack exp
    (74) super_exp_1 -> . EQUAL_TO np_push_operator_stack exp
    (75) super_exp_1 -> . NOT_EQUAL_TO np_push_operator_stack exp
    (76) super_exp_1 -> . epsilon
    (96) epsilon -> .

    <               shift and go to state 136
    >               shift and go to state 137
    EQUAL_TO        shift and go to state 132
    NOT_EQUAL_TO    shift and go to state 133
    &               reduce using rule 96 (epsilon -> .)
    |               reduce using rule 96 (epsilon -> .)
    )               reduce using rule 96 (epsilon -> .)
    ,               reduce using rule 96 (epsilon -> .)
    ;               reduce using rule 96 (epsilon -> .)
    TO              reduce using rule 96 (epsilon -> .)
    DO              reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 134
    super_exp_1                    shift and go to state 135

state 100

    (90) constant -> VAL_FLOAT . np_push_const_float
    (93) np_push_const_float -> . epsilon
    (96) epsilon -> .

    *               reduce using rule 96 (epsilon -> .)
    /               reduce using rule 96 (epsilon -> .)
    +               reduce using rule 96 (epsilon -> .)
    -               reduce using rule 96 (epsilon -> .)
    <               reduce using rule 96 (epsilon -> .)
    >               reduce using rule 96 (epsilon -> .)
    EQUAL_TO        reduce using rule 96 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 96 (epsilon -> .)
    &               reduce using rule 96 (epsilon -> .)
    |               reduce using rule 96 (epsilon -> .)
    )               reduce using rule 96 (epsilon -> .)
    ,               reduce using rule 96 (epsilon -> .)
    ;               reduce using rule 96 (epsilon -> .)
    TO              reduce using rule 96 (epsilon -> .)
    DO              reduce using rule 96 (epsilon -> .)

    np_push_const_float            shift and go to state 138
    epsilon                        shift and go to state 139

state 101

    (91) constant -> VAL_CHAR . np_push_const_char
    (94) np_push_const_char -> . epsilon
    (96) epsilon -> .

    *               reduce using rule 96 (epsilon -> .)
    /               reduce using rule 96 (epsilon -> .)
    +               reduce using rule 96 (epsilon -> .)
    -               reduce using rule 96 (epsilon -> .)
    <               reduce using rule 96 (epsilon -> .)
    >               reduce using rule 96 (epsilon -> .)
    EQUAL_TO        reduce using rule 96 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 96 (epsilon -> .)
    &               reduce using rule 96 (epsilon -> .)
    |               reduce using rule 96 (epsilon -> .)
    )               reduce using rule 96 (epsilon -> .)
    ,               reduce using rule 96 (epsilon -> .)
    ;               reduce using rule 96 (epsilon -> .)
    TO              reduce using rule 96 (epsilon -> .)
    DO              reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 140
    np_push_const_char             shift and go to state 141

state 102

    (87) factor -> variable .

    *               reduce using rule 87 (factor -> variable .)
    /               reduce using rule 87 (factor -> variable .)
    +               reduce using rule 87 (factor -> variable .)
    -               reduce using rule 87 (factor -> variable .)
    <               reduce using rule 87 (factor -> variable .)
    >               reduce using rule 87 (factor -> variable .)
    EQUAL_TO        reduce using rule 87 (factor -> variable .)
    NOT_EQUAL_TO    reduce using rule 87 (factor -> variable .)
    &               reduce using rule 87 (factor -> variable .)
    |               reduce using rule 87 (factor -> variable .)
    ,               reduce using rule 87 (factor -> variable .)
    )               reduce using rule 87 (factor -> variable .)
    ;               reduce using rule 87 (factor -> variable .)
    TO              reduce using rule 87 (factor -> variable .)
    DO              reduce using rule 87 (factor -> variable .)


state 103

    (77) exp -> term . exp_1
    (78) exp_1 -> . + np_push_operator_stack term
    (79) exp_1 -> . - np_push_operator_stack term
    (80) exp_1 -> . epsilon
    (96) epsilon -> .

    +               shift and go to state 143
    -               shift and go to state 144
    <               reduce using rule 96 (epsilon -> .)
    >               reduce using rule 96 (epsilon -> .)
    EQUAL_TO        reduce using rule 96 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 96 (epsilon -> .)
    &               reduce using rule 96 (epsilon -> .)
    |               reduce using rule 96 (epsilon -> .)
    )               reduce using rule 96 (epsilon -> .)
    ,               reduce using rule 96 (epsilon -> .)
    ;               reduce using rule 96 (epsilon -> .)
    TO              reduce using rule 96 (epsilon -> .)
    DO              reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 142
    exp_1                          shift and go to state 145

state 104

    (89) constant -> VAL_INT . np_push_const_int
    (92) np_push_const_int -> . epsilon
    (96) epsilon -> .

    *               reduce using rule 96 (epsilon -> .)
    /               reduce using rule 96 (epsilon -> .)
    +               reduce using rule 96 (epsilon -> .)
    -               reduce using rule 96 (epsilon -> .)
    <               reduce using rule 96 (epsilon -> .)
    >               reduce using rule 96 (epsilon -> .)
    EQUAL_TO        reduce using rule 96 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 96 (epsilon -> .)
    &               reduce using rule 96 (epsilon -> .)
    |               reduce using rule 96 (epsilon -> .)
    )               reduce using rule 96 (epsilon -> .)
    ,               reduce using rule 96 (epsilon -> .)
    ;               reduce using rule 96 (epsilon -> .)
    TO              reduce using rule 96 (epsilon -> .)
    DO              reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 146
    np_push_const_int              shift and go to state 147

state 105

    (53) variable_loop -> variable . np_add_to_input_counter variable_loop_1
    (56) np_add_to_input_counter -> . epsilon
    (96) epsilon -> .

    ,               reduce using rule 96 (epsilon -> .)
    )               reduce using rule 96 (epsilon -> .)

    np_add_to_input_counter        shift and go to state 148
    epsilon                        shift and go to state 149

state 106

    (52) read -> READ ( variable_loop . ) ;

    )               shift and go to state 150


state 107

    (65) condicional -> WHILE ( hyper_exp . ) DO { loop_estatuto }

    )               shift and go to state 151


state 108

    (5) np_fin_total -> epsilon .

    $end            reduce using rule 5 (np_fin_total -> epsilon .)


state 109

    (4) main -> MAIN ( ) { loop_estatuto } np_fin_total .

    $end            reduce using rule 4 (main -> MAIN ( ) { loop_estatuto } np_fin_total .)


state 110

    (47) func_llamada -> ID ( hyper_exp_loop . )

    )               shift and go to state 152


state 111

    (46) func_llamada -> ID ( ) .

    ;               reduce using rule 46 (func_llamada -> ID ( ) .)


state 112

    (48) hyper_exp_loop -> hyper_exp . np_add_to_input_counter hyper_exp_loop_1
    (56) np_add_to_input_counter -> . epsilon
    (96) epsilon -> .

    ,               reduce using rule 96 (epsilon -> .)
    )               reduce using rule 96 (epsilon -> .)

    np_add_to_input_counter        shift and go to state 153
    epsilon                        shift and go to state 149

state 113

    (66) no_condicional -> FOR variable = . hyper_exp TO hyper_exp DO { loop_estatuto }
    (67) hyper_exp -> . super_exp hyper_exp_1
    (71) super_exp -> . exp super_exp_1
    (77) exp -> . term exp_1
    (81) term -> . factor term_1
    (86) factor -> . constant
    (87) factor -> . variable
    (88) factor -> . ( hyper_exp )
    (89) constant -> . VAL_INT np_push_const_int
    (90) constant -> . VAL_FLOAT np_push_const_float
    (91) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 96
    VAL_INT         shift and go to state 104
    VAL_FLOAT       shift and go to state 100
    VAL_CHAR        shift and go to state 101
    ID              shift and go to state 86

    super_exp                      shift and go to state 95
    term                           shift and go to state 103
    hyper_exp                      shift and go to state 154
    constant                       shift and go to state 94
    exp                            shift and go to state 99
    factor                         shift and go to state 97
    variable                       shift and go to state 102

state 114

    (57) write -> WRITE ( hyper_exp_loop . ) ;

    )               shift and go to state 155


state 115

    (45) asignacion -> variable = hyper_exp . ;

    ;               shift and go to state 156


state 116

    (58) decision -> IF ( hyper_exp . ) THEN { loop_estatuto } decision_1

    )               shift and go to state 157


state 117

    (14) loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name . np_add_var_to_varstable loop_var_decl_mismo_tipo
    (18) np_add_var_to_varstable -> . epsilon
    (96) epsilon -> .

    ,               reduce using rule 96 (epsilon -> .)
    ;               reduce using rule 96 (epsilon -> .)

    np_add_var_to_varstable        shift and go to state 158
    epsilon                        shift and go to state 49

state 118

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro . ) ; var_opcional { loop_estatuto } np_kill_func

    )               shift and go to state 159


state 119

    (31) parametro -> tipo . ID loop_parametro

    ID              shift and go to state 160


state 120

    (29) func_parametro -> parametro .

    )               reduce using rule 29 (func_parametro -> parametro .)


state 121

    (30) func_parametro -> epsilon .

    )               reduce using rule 30 (func_parametro -> epsilon .)


state 122

    (68) hyper_exp_1 -> & . np_push_operator_stack super_exp
    (85) np_push_operator_stack -> . epsilon
    (96) epsilon -> .

    (               reduce using rule 96 (epsilon -> .)
    VAL_INT         reduce using rule 96 (epsilon -> .)
    VAL_FLOAT       reduce using rule 96 (epsilon -> .)
    VAL_CHAR        reduce using rule 96 (epsilon -> .)
    ID              reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 161
    np_push_operator_stack         shift and go to state 162

state 123

    (70) hyper_exp_1 -> epsilon .

    )               reduce using rule 70 (hyper_exp_1 -> epsilon .)
    ,               reduce using rule 70 (hyper_exp_1 -> epsilon .)
    ;               reduce using rule 70 (hyper_exp_1 -> epsilon .)
    TO              reduce using rule 70 (hyper_exp_1 -> epsilon .)
    DO              reduce using rule 70 (hyper_exp_1 -> epsilon .)


state 124

    (67) hyper_exp -> super_exp hyper_exp_1 .

    DO              reduce using rule 67 (hyper_exp -> super_exp hyper_exp_1 .)
    ,               reduce using rule 67 (hyper_exp -> super_exp hyper_exp_1 .)
    )               reduce using rule 67 (hyper_exp -> super_exp hyper_exp_1 .)
    TO              reduce using rule 67 (hyper_exp -> super_exp hyper_exp_1 .)
    ;               reduce using rule 67 (hyper_exp -> super_exp hyper_exp_1 .)


state 125

    (69) hyper_exp_1 -> | . np_push_operator_stack super_exp
    (85) np_push_operator_stack -> . epsilon
    (96) epsilon -> .

    (               reduce using rule 96 (epsilon -> .)
    VAL_INT         reduce using rule 96 (epsilon -> .)
    VAL_FLOAT       reduce using rule 96 (epsilon -> .)
    VAL_CHAR        reduce using rule 96 (epsilon -> .)
    ID              reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 161
    np_push_operator_stack         shift and go to state 163

state 126

    (88) factor -> ( hyper_exp . )

    )               shift and go to state 164


state 127

    (84) term_1 -> epsilon .

    +               reduce using rule 84 (term_1 -> epsilon .)
    -               reduce using rule 84 (term_1 -> epsilon .)
    <               reduce using rule 84 (term_1 -> epsilon .)
    >               reduce using rule 84 (term_1 -> epsilon .)
    EQUAL_TO        reduce using rule 84 (term_1 -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 84 (term_1 -> epsilon .)
    &               reduce using rule 84 (term_1 -> epsilon .)
    |               reduce using rule 84 (term_1 -> epsilon .)
    )               reduce using rule 84 (term_1 -> epsilon .)
    ,               reduce using rule 84 (term_1 -> epsilon .)
    ;               reduce using rule 84 (term_1 -> epsilon .)
    TO              reduce using rule 84 (term_1 -> epsilon .)
    DO              reduce using rule 84 (term_1 -> epsilon .)


state 128

    (82) term_1 -> * . np_push_operator_stack factor
    (85) np_push_operator_stack -> . epsilon
    (96) epsilon -> .

    (               reduce using rule 96 (epsilon -> .)
    VAL_INT         reduce using rule 96 (epsilon -> .)
    VAL_FLOAT       reduce using rule 96 (epsilon -> .)
    VAL_CHAR        reduce using rule 96 (epsilon -> .)
    ID              reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 161
    np_push_operator_stack         shift and go to state 165

state 129

    (83) term_1 -> / . np_push_operator_stack factor
    (85) np_push_operator_stack -> . epsilon
    (96) epsilon -> .

    (               reduce using rule 96 (epsilon -> .)
    VAL_INT         reduce using rule 96 (epsilon -> .)
    VAL_FLOAT       reduce using rule 96 (epsilon -> .)
    VAL_CHAR        reduce using rule 96 (epsilon -> .)
    ID              reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 161
    np_push_operator_stack         shift and go to state 166

state 130

    (81) term -> factor term_1 .

    +               reduce using rule 81 (term -> factor term_1 .)
    -               reduce using rule 81 (term -> factor term_1 .)
    &               reduce using rule 81 (term -> factor term_1 .)
    |               reduce using rule 81 (term -> factor term_1 .)
    )               reduce using rule 81 (term -> factor term_1 .)
    ,               reduce using rule 81 (term -> factor term_1 .)
    ;               reduce using rule 81 (term -> factor term_1 .)
    TO              reduce using rule 81 (term -> factor term_1 .)
    DO              reduce using rule 81 (term -> factor term_1 .)
    <               reduce using rule 81 (term -> factor term_1 .)
    >               reduce using rule 81 (term -> factor term_1 .)
    EQUAL_TO        reduce using rule 81 (term -> factor term_1 .)
    NOT_EQUAL_TO    reduce using rule 81 (term -> factor term_1 .)


state 131

    (51) func_return -> RETURN ( hyper_exp ) . ;

    ;               shift and go to state 167


state 132

    (74) super_exp_1 -> EQUAL_TO . np_push_operator_stack exp
    (85) np_push_operator_stack -> . epsilon
    (96) epsilon -> .

    (               reduce using rule 96 (epsilon -> .)
    VAL_INT         reduce using rule 96 (epsilon -> .)
    VAL_FLOAT       reduce using rule 96 (epsilon -> .)
    VAL_CHAR        reduce using rule 96 (epsilon -> .)
    ID              reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 161
    np_push_operator_stack         shift and go to state 168

state 133

    (75) super_exp_1 -> NOT_EQUAL_TO . np_push_operator_stack exp
    (85) np_push_operator_stack -> . epsilon
    (96) epsilon -> .

    (               reduce using rule 96 (epsilon -> .)
    VAL_INT         reduce using rule 96 (epsilon -> .)
    VAL_FLOAT       reduce using rule 96 (epsilon -> .)
    VAL_CHAR        reduce using rule 96 (epsilon -> .)
    ID              reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 161
    np_push_operator_stack         shift and go to state 169

state 134

    (76) super_exp_1 -> epsilon .

    &               reduce using rule 76 (super_exp_1 -> epsilon .)
    |               reduce using rule 76 (super_exp_1 -> epsilon .)
    )               reduce using rule 76 (super_exp_1 -> epsilon .)
    ,               reduce using rule 76 (super_exp_1 -> epsilon .)
    ;               reduce using rule 76 (super_exp_1 -> epsilon .)
    TO              reduce using rule 76 (super_exp_1 -> epsilon .)
    DO              reduce using rule 76 (super_exp_1 -> epsilon .)


state 135

    (71) super_exp -> exp super_exp_1 .

    &               reduce using rule 71 (super_exp -> exp super_exp_1 .)
    |               reduce using rule 71 (super_exp -> exp super_exp_1 .)
    DO              reduce using rule 71 (super_exp -> exp super_exp_1 .)
    ,               reduce using rule 71 (super_exp -> exp super_exp_1 .)
    )               reduce using rule 71 (super_exp -> exp super_exp_1 .)
    ;               reduce using rule 71 (super_exp -> exp super_exp_1 .)
    TO              reduce using rule 71 (super_exp -> exp super_exp_1 .)


state 136

    (72) super_exp_1 -> < . np_push_operator_stack exp
    (85) np_push_operator_stack -> . epsilon
    (96) epsilon -> .

    (               reduce using rule 96 (epsilon -> .)
    VAL_INT         reduce using rule 96 (epsilon -> .)
    VAL_FLOAT       reduce using rule 96 (epsilon -> .)
    VAL_CHAR        reduce using rule 96 (epsilon -> .)
    ID              reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 161
    np_push_operator_stack         shift and go to state 170

state 137

    (73) super_exp_1 -> > . np_push_operator_stack exp
    (85) np_push_operator_stack -> . epsilon
    (96) epsilon -> .

    (               reduce using rule 96 (epsilon -> .)
    VAL_INT         reduce using rule 96 (epsilon -> .)
    VAL_FLOAT       reduce using rule 96 (epsilon -> .)
    VAL_CHAR        reduce using rule 96 (epsilon -> .)
    ID              reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 161
    np_push_operator_stack         shift and go to state 171

state 138

    (90) constant -> VAL_FLOAT np_push_const_float .

    *               reduce using rule 90 (constant -> VAL_FLOAT np_push_const_float .)
    /               reduce using rule 90 (constant -> VAL_FLOAT np_push_const_float .)
    +               reduce using rule 90 (constant -> VAL_FLOAT np_push_const_float .)
    -               reduce using rule 90 (constant -> VAL_FLOAT np_push_const_float .)
    <               reduce using rule 90 (constant -> VAL_FLOAT np_push_const_float .)
    >               reduce using rule 90 (constant -> VAL_FLOAT np_push_const_float .)
    EQUAL_TO        reduce using rule 90 (constant -> VAL_FLOAT np_push_const_float .)
    NOT_EQUAL_TO    reduce using rule 90 (constant -> VAL_FLOAT np_push_const_float .)
    &               reduce using rule 90 (constant -> VAL_FLOAT np_push_const_float .)
    |               reduce using rule 90 (constant -> VAL_FLOAT np_push_const_float .)
    ,               reduce using rule 90 (constant -> VAL_FLOAT np_push_const_float .)
    )               reduce using rule 90 (constant -> VAL_FLOAT np_push_const_float .)
    ;               reduce using rule 90 (constant -> VAL_FLOAT np_push_const_float .)
    TO              reduce using rule 90 (constant -> VAL_FLOAT np_push_const_float .)
    DO              reduce using rule 90 (constant -> VAL_FLOAT np_push_const_float .)


state 139

    (93) np_push_const_float -> epsilon .

    *               reduce using rule 93 (np_push_const_float -> epsilon .)
    /               reduce using rule 93 (np_push_const_float -> epsilon .)
    +               reduce using rule 93 (np_push_const_float -> epsilon .)
    -               reduce using rule 93 (np_push_const_float -> epsilon .)
    <               reduce using rule 93 (np_push_const_float -> epsilon .)
    >               reduce using rule 93 (np_push_const_float -> epsilon .)
    EQUAL_TO        reduce using rule 93 (np_push_const_float -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 93 (np_push_const_float -> epsilon .)
    &               reduce using rule 93 (np_push_const_float -> epsilon .)
    |               reduce using rule 93 (np_push_const_float -> epsilon .)
    )               reduce using rule 93 (np_push_const_float -> epsilon .)
    ,               reduce using rule 93 (np_push_const_float -> epsilon .)
    ;               reduce using rule 93 (np_push_const_float -> epsilon .)
    TO              reduce using rule 93 (np_push_const_float -> epsilon .)
    DO              reduce using rule 93 (np_push_const_float -> epsilon .)


state 140

    (94) np_push_const_char -> epsilon .

    *               reduce using rule 94 (np_push_const_char -> epsilon .)
    /               reduce using rule 94 (np_push_const_char -> epsilon .)
    +               reduce using rule 94 (np_push_const_char -> epsilon .)
    -               reduce using rule 94 (np_push_const_char -> epsilon .)
    <               reduce using rule 94 (np_push_const_char -> epsilon .)
    >               reduce using rule 94 (np_push_const_char -> epsilon .)
    EQUAL_TO        reduce using rule 94 (np_push_const_char -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 94 (np_push_const_char -> epsilon .)
    &               reduce using rule 94 (np_push_const_char -> epsilon .)
    |               reduce using rule 94 (np_push_const_char -> epsilon .)
    )               reduce using rule 94 (np_push_const_char -> epsilon .)
    ,               reduce using rule 94 (np_push_const_char -> epsilon .)
    ;               reduce using rule 94 (np_push_const_char -> epsilon .)
    TO              reduce using rule 94 (np_push_const_char -> epsilon .)
    DO              reduce using rule 94 (np_push_const_char -> epsilon .)


state 141

    (91) constant -> VAL_CHAR np_push_const_char .

    *               reduce using rule 91 (constant -> VAL_CHAR np_push_const_char .)
    /               reduce using rule 91 (constant -> VAL_CHAR np_push_const_char .)
    +               reduce using rule 91 (constant -> VAL_CHAR np_push_const_char .)
    -               reduce using rule 91 (constant -> VAL_CHAR np_push_const_char .)
    <               reduce using rule 91 (constant -> VAL_CHAR np_push_const_char .)
    >               reduce using rule 91 (constant -> VAL_CHAR np_push_const_char .)
    EQUAL_TO        reduce using rule 91 (constant -> VAL_CHAR np_push_const_char .)
    NOT_EQUAL_TO    reduce using rule 91 (constant -> VAL_CHAR np_push_const_char .)
    &               reduce using rule 91 (constant -> VAL_CHAR np_push_const_char .)
    |               reduce using rule 91 (constant -> VAL_CHAR np_push_const_char .)
    ,               reduce using rule 91 (constant -> VAL_CHAR np_push_const_char .)
    )               reduce using rule 91 (constant -> VAL_CHAR np_push_const_char .)
    ;               reduce using rule 91 (constant -> VAL_CHAR np_push_const_char .)
    TO              reduce using rule 91 (constant -> VAL_CHAR np_push_const_char .)
    DO              reduce using rule 91 (constant -> VAL_CHAR np_push_const_char .)


state 142

    (80) exp_1 -> epsilon .

    <               reduce using rule 80 (exp_1 -> epsilon .)
    >               reduce using rule 80 (exp_1 -> epsilon .)
    EQUAL_TO        reduce using rule 80 (exp_1 -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 80 (exp_1 -> epsilon .)
    &               reduce using rule 80 (exp_1 -> epsilon .)
    |               reduce using rule 80 (exp_1 -> epsilon .)
    )               reduce using rule 80 (exp_1 -> epsilon .)
    ,               reduce using rule 80 (exp_1 -> epsilon .)
    ;               reduce using rule 80 (exp_1 -> epsilon .)
    TO              reduce using rule 80 (exp_1 -> epsilon .)
    DO              reduce using rule 80 (exp_1 -> epsilon .)


state 143

    (78) exp_1 -> + . np_push_operator_stack term
    (85) np_push_operator_stack -> . epsilon
    (96) epsilon -> .

    (               reduce using rule 96 (epsilon -> .)
    VAL_INT         reduce using rule 96 (epsilon -> .)
    VAL_FLOAT       reduce using rule 96 (epsilon -> .)
    VAL_CHAR        reduce using rule 96 (epsilon -> .)
    ID              reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 161
    np_push_operator_stack         shift and go to state 172

state 144

    (79) exp_1 -> - . np_push_operator_stack term
    (85) np_push_operator_stack -> . epsilon
    (96) epsilon -> .

    (               reduce using rule 96 (epsilon -> .)
    VAL_INT         reduce using rule 96 (epsilon -> .)
    VAL_FLOAT       reduce using rule 96 (epsilon -> .)
    VAL_CHAR        reduce using rule 96 (epsilon -> .)
    ID              reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 161
    np_push_operator_stack         shift and go to state 173

state 145

    (77) exp -> term exp_1 .

    <               reduce using rule 77 (exp -> term exp_1 .)
    >               reduce using rule 77 (exp -> term exp_1 .)
    EQUAL_TO        reduce using rule 77 (exp -> term exp_1 .)
    NOT_EQUAL_TO    reduce using rule 77 (exp -> term exp_1 .)
    &               reduce using rule 77 (exp -> term exp_1 .)
    |               reduce using rule 77 (exp -> term exp_1 .)
    TO              reduce using rule 77 (exp -> term exp_1 .)
    )               reduce using rule 77 (exp -> term exp_1 .)
    DO              reduce using rule 77 (exp -> term exp_1 .)
    ,               reduce using rule 77 (exp -> term exp_1 .)
    ;               reduce using rule 77 (exp -> term exp_1 .)


state 146

    (92) np_push_const_int -> epsilon .

    *               reduce using rule 92 (np_push_const_int -> epsilon .)
    /               reduce using rule 92 (np_push_const_int -> epsilon .)
    +               reduce using rule 92 (np_push_const_int -> epsilon .)
    -               reduce using rule 92 (np_push_const_int -> epsilon .)
    <               reduce using rule 92 (np_push_const_int -> epsilon .)
    >               reduce using rule 92 (np_push_const_int -> epsilon .)
    EQUAL_TO        reduce using rule 92 (np_push_const_int -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 92 (np_push_const_int -> epsilon .)
    &               reduce using rule 92 (np_push_const_int -> epsilon .)
    |               reduce using rule 92 (np_push_const_int -> epsilon .)
    )               reduce using rule 92 (np_push_const_int -> epsilon .)
    ,               reduce using rule 92 (np_push_const_int -> epsilon .)
    ;               reduce using rule 92 (np_push_const_int -> epsilon .)
    TO              reduce using rule 92 (np_push_const_int -> epsilon .)
    DO              reduce using rule 92 (np_push_const_int -> epsilon .)


state 147

    (89) constant -> VAL_INT np_push_const_int .

    *               reduce using rule 89 (constant -> VAL_INT np_push_const_int .)
    /               reduce using rule 89 (constant -> VAL_INT np_push_const_int .)
    +               reduce using rule 89 (constant -> VAL_INT np_push_const_int .)
    -               reduce using rule 89 (constant -> VAL_INT np_push_const_int .)
    <               reduce using rule 89 (constant -> VAL_INT np_push_const_int .)
    >               reduce using rule 89 (constant -> VAL_INT np_push_const_int .)
    EQUAL_TO        reduce using rule 89 (constant -> VAL_INT np_push_const_int .)
    NOT_EQUAL_TO    reduce using rule 89 (constant -> VAL_INT np_push_const_int .)
    &               reduce using rule 89 (constant -> VAL_INT np_push_const_int .)
    |               reduce using rule 89 (constant -> VAL_INT np_push_const_int .)
    ,               reduce using rule 89 (constant -> VAL_INT np_push_const_int .)
    )               reduce using rule 89 (constant -> VAL_INT np_push_const_int .)
    ;               reduce using rule 89 (constant -> VAL_INT np_push_const_int .)
    TO              reduce using rule 89 (constant -> VAL_INT np_push_const_int .)
    DO              reduce using rule 89 (constant -> VAL_INT np_push_const_int .)


state 148

    (53) variable_loop -> variable np_add_to_input_counter . variable_loop_1
    (54) variable_loop_1 -> . , variable np_add_to_input_counter variable_loop_1
    (55) variable_loop_1 -> . epsilon
    (96) epsilon -> .

    ,               shift and go to state 175
    )               reduce using rule 96 (epsilon -> .)

    variable_loop_1                shift and go to state 174
    epsilon                        shift and go to state 176

state 149

    (56) np_add_to_input_counter -> epsilon .

    ,               reduce using rule 56 (np_add_to_input_counter -> epsilon .)
    )               reduce using rule 56 (np_add_to_input_counter -> epsilon .)


state 150

    (52) read -> READ ( variable_loop ) . ;

    ;               shift and go to state 177


state 151

    (65) condicional -> WHILE ( hyper_exp ) . DO { loop_estatuto }

    DO              shift and go to state 178


state 152

    (47) func_llamada -> ID ( hyper_exp_loop ) .

    ;               reduce using rule 47 (func_llamada -> ID ( hyper_exp_loop ) .)


state 153

    (48) hyper_exp_loop -> hyper_exp np_add_to_input_counter . hyper_exp_loop_1
    (49) hyper_exp_loop_1 -> . , hyper_exp np_add_to_input_counter hyper_exp_loop_1
    (50) hyper_exp_loop_1 -> . epsilon
    (96) epsilon -> .

    ,               shift and go to state 179
    )               reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 180
    hyper_exp_loop_1               shift and go to state 181

state 154

    (66) no_condicional -> FOR variable = hyper_exp . TO hyper_exp DO { loop_estatuto }

    TO              shift and go to state 182


state 155

    (57) write -> WRITE ( hyper_exp_loop ) . ;

    ;               shift and go to state 183


state 156

    (45) asignacion -> variable = hyper_exp ; .

    ID              reduce using rule 45 (asignacion -> variable = hyper_exp ; .)
    READ            reduce using rule 45 (asignacion -> variable = hyper_exp ; .)
    WRITE           reduce using rule 45 (asignacion -> variable = hyper_exp ; .)
    IF              reduce using rule 45 (asignacion -> variable = hyper_exp ; .)
    RETURN          reduce using rule 45 (asignacion -> variable = hyper_exp ; .)
    WHILE           reduce using rule 45 (asignacion -> variable = hyper_exp ; .)
    FOR             reduce using rule 45 (asignacion -> variable = hyper_exp ; .)
    }               reduce using rule 45 (asignacion -> variable = hyper_exp ; .)


state 157

    (58) decision -> IF ( hyper_exp ) . THEN { loop_estatuto } decision_1

    THEN            shift and go to state 184


state 158

    (14) loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name np_add_var_to_varstable . loop_var_decl_mismo_tipo
    (14) loop_var_decl_mismo_tipo -> . , ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo
    (15) loop_var_decl_mismo_tipo -> . epsilon
    (96) epsilon -> .

    ,               shift and go to state 73
    ;               reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 72
    loop_var_decl_mismo_tipo       shift and go to state 185

state 159

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) . ; var_opcional { loop_estatuto } np_kill_func

    ;               shift and go to state 186


state 160

    (31) parametro -> tipo ID . loop_parametro
    (32) loop_parametro -> . , tipo ID loop_parametro
    (33) loop_parametro -> . epsilon
    (96) epsilon -> .

    ,               shift and go to state 189
    )               reduce using rule 96 (epsilon -> .)

    loop_parametro                 shift and go to state 187
    epsilon                        shift and go to state 188

state 161

    (85) np_push_operator_stack -> epsilon .

    (               reduce using rule 85 (np_push_operator_stack -> epsilon .)
    VAL_INT         reduce using rule 85 (np_push_operator_stack -> epsilon .)
    VAL_FLOAT       reduce using rule 85 (np_push_operator_stack -> epsilon .)
    VAL_CHAR        reduce using rule 85 (np_push_operator_stack -> epsilon .)
    ID              reduce using rule 85 (np_push_operator_stack -> epsilon .)


state 162

    (68) hyper_exp_1 -> & np_push_operator_stack . super_exp
    (71) super_exp -> . exp super_exp_1
    (77) exp -> . term exp_1
    (81) term -> . factor term_1
    (86) factor -> . constant
    (87) factor -> . variable
    (88) factor -> . ( hyper_exp )
    (89) constant -> . VAL_INT np_push_const_int
    (90) constant -> . VAL_FLOAT np_push_const_float
    (91) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 96
    VAL_INT         shift and go to state 104
    VAL_FLOAT       shift and go to state 100
    VAL_CHAR        shift and go to state 101
    ID              shift and go to state 86

    super_exp                      shift and go to state 190
    term                           shift and go to state 103
    constant                       shift and go to state 94
    exp                            shift and go to state 99
    factor                         shift and go to state 97
    variable                       shift and go to state 102

state 163

    (69) hyper_exp_1 -> | np_push_operator_stack . super_exp
    (71) super_exp -> . exp super_exp_1
    (77) exp -> . term exp_1
    (81) term -> . factor term_1
    (86) factor -> . constant
    (87) factor -> . variable
    (88) factor -> . ( hyper_exp )
    (89) constant -> . VAL_INT np_push_const_int
    (90) constant -> . VAL_FLOAT np_push_const_float
    (91) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 96
    VAL_INT         shift and go to state 104
    VAL_FLOAT       shift and go to state 100
    VAL_CHAR        shift and go to state 101
    ID              shift and go to state 86

    super_exp                      shift and go to state 191
    term                           shift and go to state 103
    constant                       shift and go to state 94
    exp                            shift and go to state 99
    factor                         shift and go to state 97
    variable                       shift and go to state 102

state 164

    (88) factor -> ( hyper_exp ) .

    *               reduce using rule 88 (factor -> ( hyper_exp ) .)
    /               reduce using rule 88 (factor -> ( hyper_exp ) .)
    +               reduce using rule 88 (factor -> ( hyper_exp ) .)
    -               reduce using rule 88 (factor -> ( hyper_exp ) .)
    <               reduce using rule 88 (factor -> ( hyper_exp ) .)
    >               reduce using rule 88 (factor -> ( hyper_exp ) .)
    EQUAL_TO        reduce using rule 88 (factor -> ( hyper_exp ) .)
    NOT_EQUAL_TO    reduce using rule 88 (factor -> ( hyper_exp ) .)
    &               reduce using rule 88 (factor -> ( hyper_exp ) .)
    |               reduce using rule 88 (factor -> ( hyper_exp ) .)
    ,               reduce using rule 88 (factor -> ( hyper_exp ) .)
    )               reduce using rule 88 (factor -> ( hyper_exp ) .)
    ;               reduce using rule 88 (factor -> ( hyper_exp ) .)
    TO              reduce using rule 88 (factor -> ( hyper_exp ) .)
    DO              reduce using rule 88 (factor -> ( hyper_exp ) .)


state 165

    (82) term_1 -> * np_push_operator_stack . factor
    (86) factor -> . constant
    (87) factor -> . variable
    (88) factor -> . ( hyper_exp )
    (89) constant -> . VAL_INT np_push_const_int
    (90) constant -> . VAL_FLOAT np_push_const_float
    (91) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 96
    VAL_INT         shift and go to state 104
    VAL_FLOAT       shift and go to state 100
    VAL_CHAR        shift and go to state 101
    ID              shift and go to state 86

    constant                       shift and go to state 94
    factor                         shift and go to state 192
    variable                       shift and go to state 102

state 166

    (83) term_1 -> / np_push_operator_stack . factor
    (86) factor -> . constant
    (87) factor -> . variable
    (88) factor -> . ( hyper_exp )
    (89) constant -> . VAL_INT np_push_const_int
    (90) constant -> . VAL_FLOAT np_push_const_float
    (91) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 96
    VAL_INT         shift and go to state 104
    VAL_FLOAT       shift and go to state 100
    VAL_CHAR        shift and go to state 101
    ID              shift and go to state 86

    constant                       shift and go to state 94
    factor                         shift and go to state 193
    variable                       shift and go to state 102

state 167

    (51) func_return -> RETURN ( hyper_exp ) ; .

    ID              reduce using rule 51 (func_return -> RETURN ( hyper_exp ) ; .)
    READ            reduce using rule 51 (func_return -> RETURN ( hyper_exp ) ; .)
    WRITE           reduce using rule 51 (func_return -> RETURN ( hyper_exp ) ; .)
    IF              reduce using rule 51 (func_return -> RETURN ( hyper_exp ) ; .)
    RETURN          reduce using rule 51 (func_return -> RETURN ( hyper_exp ) ; .)
    WHILE           reduce using rule 51 (func_return -> RETURN ( hyper_exp ) ; .)
    FOR             reduce using rule 51 (func_return -> RETURN ( hyper_exp ) ; .)
    }               reduce using rule 51 (func_return -> RETURN ( hyper_exp ) ; .)


state 168

    (74) super_exp_1 -> EQUAL_TO np_push_operator_stack . exp
    (77) exp -> . term exp_1
    (81) term -> . factor term_1
    (86) factor -> . constant
    (87) factor -> . variable
    (88) factor -> . ( hyper_exp )
    (89) constant -> . VAL_INT np_push_const_int
    (90) constant -> . VAL_FLOAT np_push_const_float
    (91) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 96
    VAL_INT         shift and go to state 104
    VAL_FLOAT       shift and go to state 100
    VAL_CHAR        shift and go to state 101
    ID              shift and go to state 86

    term                           shift and go to state 103
    constant                       shift and go to state 94
    exp                            shift and go to state 194
    factor                         shift and go to state 97
    variable                       shift and go to state 102

state 169

    (75) super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack . exp
    (77) exp -> . term exp_1
    (81) term -> . factor term_1
    (86) factor -> . constant
    (87) factor -> . variable
    (88) factor -> . ( hyper_exp )
    (89) constant -> . VAL_INT np_push_const_int
    (90) constant -> . VAL_FLOAT np_push_const_float
    (91) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 96
    VAL_INT         shift and go to state 104
    VAL_FLOAT       shift and go to state 100
    VAL_CHAR        shift and go to state 101
    ID              shift and go to state 86

    term                           shift and go to state 103
    constant                       shift and go to state 94
    exp                            shift and go to state 195
    factor                         shift and go to state 97
    variable                       shift and go to state 102

state 170

    (72) super_exp_1 -> < np_push_operator_stack . exp
    (77) exp -> . term exp_1
    (81) term -> . factor term_1
    (86) factor -> . constant
    (87) factor -> . variable
    (88) factor -> . ( hyper_exp )
    (89) constant -> . VAL_INT np_push_const_int
    (90) constant -> . VAL_FLOAT np_push_const_float
    (91) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 96
    VAL_INT         shift and go to state 104
    VAL_FLOAT       shift and go to state 100
    VAL_CHAR        shift and go to state 101
    ID              shift and go to state 86

    term                           shift and go to state 103
    constant                       shift and go to state 94
    exp                            shift and go to state 196
    factor                         shift and go to state 97
    variable                       shift and go to state 102

state 171

    (73) super_exp_1 -> > np_push_operator_stack . exp
    (77) exp -> . term exp_1
    (81) term -> . factor term_1
    (86) factor -> . constant
    (87) factor -> . variable
    (88) factor -> . ( hyper_exp )
    (89) constant -> . VAL_INT np_push_const_int
    (90) constant -> . VAL_FLOAT np_push_const_float
    (91) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 96
    VAL_INT         shift and go to state 104
    VAL_FLOAT       shift and go to state 100
    VAL_CHAR        shift and go to state 101
    ID              shift and go to state 86

    term                           shift and go to state 103
    constant                       shift and go to state 94
    exp                            shift and go to state 197
    factor                         shift and go to state 97
    variable                       shift and go to state 102

state 172

    (78) exp_1 -> + np_push_operator_stack . term
    (81) term -> . factor term_1
    (86) factor -> . constant
    (87) factor -> . variable
    (88) factor -> . ( hyper_exp )
    (89) constant -> . VAL_INT np_push_const_int
    (90) constant -> . VAL_FLOAT np_push_const_float
    (91) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 96
    VAL_INT         shift and go to state 104
    VAL_FLOAT       shift and go to state 100
    VAL_CHAR        shift and go to state 101
    ID              shift and go to state 86

    term                           shift and go to state 198
    constant                       shift and go to state 94
    factor                         shift and go to state 97
    variable                       shift and go to state 102

state 173

    (79) exp_1 -> - np_push_operator_stack . term
    (81) term -> . factor term_1
    (86) factor -> . constant
    (87) factor -> . variable
    (88) factor -> . ( hyper_exp )
    (89) constant -> . VAL_INT np_push_const_int
    (90) constant -> . VAL_FLOAT np_push_const_float
    (91) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 96
    VAL_INT         shift and go to state 104
    VAL_FLOAT       shift and go to state 100
    VAL_CHAR        shift and go to state 101
    ID              shift and go to state 86

    term                           shift and go to state 199
    constant                       shift and go to state 94
    factor                         shift and go to state 97
    variable                       shift and go to state 102

state 174

    (53) variable_loop -> variable np_add_to_input_counter variable_loop_1 .

    )               reduce using rule 53 (variable_loop -> variable np_add_to_input_counter variable_loop_1 .)


state 175

    (54) variable_loop_1 -> , . variable np_add_to_input_counter variable_loop_1
    (8) variable -> . ID np_single_var_process

    ID              shift and go to state 86

    variable                       shift and go to state 200

state 176

    (55) variable_loop_1 -> epsilon .

    )               reduce using rule 55 (variable_loop_1 -> epsilon .)


state 177

    (52) read -> READ ( variable_loop ) ; .

    ID              reduce using rule 52 (read -> READ ( variable_loop ) ; .)
    READ            reduce using rule 52 (read -> READ ( variable_loop ) ; .)
    WRITE           reduce using rule 52 (read -> READ ( variable_loop ) ; .)
    IF              reduce using rule 52 (read -> READ ( variable_loop ) ; .)
    RETURN          reduce using rule 52 (read -> READ ( variable_loop ) ; .)
    WHILE           reduce using rule 52 (read -> READ ( variable_loop ) ; .)
    FOR             reduce using rule 52 (read -> READ ( variable_loop ) ; .)
    }               reduce using rule 52 (read -> READ ( variable_loop ) ; .)


state 178

    (65) condicional -> WHILE ( hyper_exp ) DO . { loop_estatuto }

    {               shift and go to state 201


state 179

    (49) hyper_exp_loop_1 -> , . hyper_exp np_add_to_input_counter hyper_exp_loop_1
    (67) hyper_exp -> . super_exp hyper_exp_1
    (71) super_exp -> . exp super_exp_1
    (77) exp -> . term exp_1
    (81) term -> . factor term_1
    (86) factor -> . constant
    (87) factor -> . variable
    (88) factor -> . ( hyper_exp )
    (89) constant -> . VAL_INT np_push_const_int
    (90) constant -> . VAL_FLOAT np_push_const_float
    (91) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 96
    VAL_INT         shift and go to state 104
    VAL_FLOAT       shift and go to state 100
    VAL_CHAR        shift and go to state 101
    ID              shift and go to state 86

    super_exp                      shift and go to state 95
    term                           shift and go to state 103
    hyper_exp                      shift and go to state 202
    constant                       shift and go to state 94
    exp                            shift and go to state 99
    factor                         shift and go to state 97
    variable                       shift and go to state 102

state 180

    (50) hyper_exp_loop_1 -> epsilon .

    )               reduce using rule 50 (hyper_exp_loop_1 -> epsilon .)


state 181

    (48) hyper_exp_loop -> hyper_exp np_add_to_input_counter hyper_exp_loop_1 .

    )               reduce using rule 48 (hyper_exp_loop -> hyper_exp np_add_to_input_counter hyper_exp_loop_1 .)


state 182

    (66) no_condicional -> FOR variable = hyper_exp TO . hyper_exp DO { loop_estatuto }
    (67) hyper_exp -> . super_exp hyper_exp_1
    (71) super_exp -> . exp super_exp_1
    (77) exp -> . term exp_1
    (81) term -> . factor term_1
    (86) factor -> . constant
    (87) factor -> . variable
    (88) factor -> . ( hyper_exp )
    (89) constant -> . VAL_INT np_push_const_int
    (90) constant -> . VAL_FLOAT np_push_const_float
    (91) constant -> . VAL_CHAR np_push_const_char
    (8) variable -> . ID np_single_var_process

    (               shift and go to state 96
    VAL_INT         shift and go to state 104
    VAL_FLOAT       shift and go to state 100
    VAL_CHAR        shift and go to state 101
    ID              shift and go to state 86

    super_exp                      shift and go to state 95
    term                           shift and go to state 103
    hyper_exp                      shift and go to state 203
    constant                       shift and go to state 94
    exp                            shift and go to state 99
    factor                         shift and go to state 97
    variable                       shift and go to state 102

state 183

    (57) write -> WRITE ( hyper_exp_loop ) ; .

    ID              reduce using rule 57 (write -> WRITE ( hyper_exp_loop ) ; .)
    READ            reduce using rule 57 (write -> WRITE ( hyper_exp_loop ) ; .)
    WRITE           reduce using rule 57 (write -> WRITE ( hyper_exp_loop ) ; .)
    IF              reduce using rule 57 (write -> WRITE ( hyper_exp_loop ) ; .)
    RETURN          reduce using rule 57 (write -> WRITE ( hyper_exp_loop ) ; .)
    WHILE           reduce using rule 57 (write -> WRITE ( hyper_exp_loop ) ; .)
    FOR             reduce using rule 57 (write -> WRITE ( hyper_exp_loop ) ; .)
    }               reduce using rule 57 (write -> WRITE ( hyper_exp_loop ) ; .)


state 184

    (58) decision -> IF ( hyper_exp ) THEN . { loop_estatuto } decision_1

    {               shift and go to state 204


state 185

    (14) loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo .

    ;               reduce using rule 14 (loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo .)


state 186

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; . var_opcional { loop_estatuto } np_kill_func
    (6) var_opcional -> . var_declaracion
    (7) var_opcional -> . epsilon
    (9) var_declaracion -> . VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion
    (96) epsilon -> .

    VARS            shift and go to state 9
    {               reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 11
    var_declaracion                shift and go to state 10
    var_opcional                   shift and go to state 205

state 187

    (31) parametro -> tipo ID loop_parametro .

    )               reduce using rule 31 (parametro -> tipo ID loop_parametro .)


state 188

    (33) loop_parametro -> epsilon .

    )               reduce using rule 33 (loop_parametro -> epsilon .)


state 189

    (32) loop_parametro -> , . tipo ID loop_parametro
    (34) tipo -> . INT
    (35) tipo -> . FLOAT
    (36) tipo -> . CHAR
    (37) tipo -> . BOOL

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 24

    tipo                           shift and go to state 206

state 190

    (68) hyper_exp_1 -> & np_push_operator_stack super_exp .

    )               reduce using rule 68 (hyper_exp_1 -> & np_push_operator_stack super_exp .)
    ,               reduce using rule 68 (hyper_exp_1 -> & np_push_operator_stack super_exp .)
    ;               reduce using rule 68 (hyper_exp_1 -> & np_push_operator_stack super_exp .)
    TO              reduce using rule 68 (hyper_exp_1 -> & np_push_operator_stack super_exp .)
    DO              reduce using rule 68 (hyper_exp_1 -> & np_push_operator_stack super_exp .)


state 191

    (69) hyper_exp_1 -> | np_push_operator_stack super_exp .

    )               reduce using rule 69 (hyper_exp_1 -> | np_push_operator_stack super_exp .)
    ,               reduce using rule 69 (hyper_exp_1 -> | np_push_operator_stack super_exp .)
    ;               reduce using rule 69 (hyper_exp_1 -> | np_push_operator_stack super_exp .)
    TO              reduce using rule 69 (hyper_exp_1 -> | np_push_operator_stack super_exp .)
    DO              reduce using rule 69 (hyper_exp_1 -> | np_push_operator_stack super_exp .)


state 192

    (82) term_1 -> * np_push_operator_stack factor .

    +               reduce using rule 82 (term_1 -> * np_push_operator_stack factor .)
    -               reduce using rule 82 (term_1 -> * np_push_operator_stack factor .)
    <               reduce using rule 82 (term_1 -> * np_push_operator_stack factor .)
    >               reduce using rule 82 (term_1 -> * np_push_operator_stack factor .)
    EQUAL_TO        reduce using rule 82 (term_1 -> * np_push_operator_stack factor .)
    NOT_EQUAL_TO    reduce using rule 82 (term_1 -> * np_push_operator_stack factor .)
    &               reduce using rule 82 (term_1 -> * np_push_operator_stack factor .)
    |               reduce using rule 82 (term_1 -> * np_push_operator_stack factor .)
    )               reduce using rule 82 (term_1 -> * np_push_operator_stack factor .)
    ,               reduce using rule 82 (term_1 -> * np_push_operator_stack factor .)
    ;               reduce using rule 82 (term_1 -> * np_push_operator_stack factor .)
    TO              reduce using rule 82 (term_1 -> * np_push_operator_stack factor .)
    DO              reduce using rule 82 (term_1 -> * np_push_operator_stack factor .)


state 193

    (83) term_1 -> / np_push_operator_stack factor .

    +               reduce using rule 83 (term_1 -> / np_push_operator_stack factor .)
    -               reduce using rule 83 (term_1 -> / np_push_operator_stack factor .)
    <               reduce using rule 83 (term_1 -> / np_push_operator_stack factor .)
    >               reduce using rule 83 (term_1 -> / np_push_operator_stack factor .)
    EQUAL_TO        reduce using rule 83 (term_1 -> / np_push_operator_stack factor .)
    NOT_EQUAL_TO    reduce using rule 83 (term_1 -> / np_push_operator_stack factor .)
    &               reduce using rule 83 (term_1 -> / np_push_operator_stack factor .)
    |               reduce using rule 83 (term_1 -> / np_push_operator_stack factor .)
    )               reduce using rule 83 (term_1 -> / np_push_operator_stack factor .)
    ,               reduce using rule 83 (term_1 -> / np_push_operator_stack factor .)
    ;               reduce using rule 83 (term_1 -> / np_push_operator_stack factor .)
    TO              reduce using rule 83 (term_1 -> / np_push_operator_stack factor .)
    DO              reduce using rule 83 (term_1 -> / np_push_operator_stack factor .)


state 194

    (74) super_exp_1 -> EQUAL_TO np_push_operator_stack exp .

    &               reduce using rule 74 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    |               reduce using rule 74 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    )               reduce using rule 74 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    ,               reduce using rule 74 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    ;               reduce using rule 74 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    TO              reduce using rule 74 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    DO              reduce using rule 74 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)


state 195

    (75) super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .

    &               reduce using rule 75 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    |               reduce using rule 75 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    )               reduce using rule 75 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    ,               reduce using rule 75 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    ;               reduce using rule 75 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    TO              reduce using rule 75 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    DO              reduce using rule 75 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)


state 196

    (72) super_exp_1 -> < np_push_operator_stack exp .

    &               reduce using rule 72 (super_exp_1 -> < np_push_operator_stack exp .)
    |               reduce using rule 72 (super_exp_1 -> < np_push_operator_stack exp .)
    )               reduce using rule 72 (super_exp_1 -> < np_push_operator_stack exp .)
    ,               reduce using rule 72 (super_exp_1 -> < np_push_operator_stack exp .)
    ;               reduce using rule 72 (super_exp_1 -> < np_push_operator_stack exp .)
    TO              reduce using rule 72 (super_exp_1 -> < np_push_operator_stack exp .)
    DO              reduce using rule 72 (super_exp_1 -> < np_push_operator_stack exp .)


state 197

    (73) super_exp_1 -> > np_push_operator_stack exp .

    &               reduce using rule 73 (super_exp_1 -> > np_push_operator_stack exp .)
    |               reduce using rule 73 (super_exp_1 -> > np_push_operator_stack exp .)
    )               reduce using rule 73 (super_exp_1 -> > np_push_operator_stack exp .)
    ,               reduce using rule 73 (super_exp_1 -> > np_push_operator_stack exp .)
    ;               reduce using rule 73 (super_exp_1 -> > np_push_operator_stack exp .)
    TO              reduce using rule 73 (super_exp_1 -> > np_push_operator_stack exp .)
    DO              reduce using rule 73 (super_exp_1 -> > np_push_operator_stack exp .)


state 198

    (78) exp_1 -> + np_push_operator_stack term .

    <               reduce using rule 78 (exp_1 -> + np_push_operator_stack term .)
    >               reduce using rule 78 (exp_1 -> + np_push_operator_stack term .)
    EQUAL_TO        reduce using rule 78 (exp_1 -> + np_push_operator_stack term .)
    NOT_EQUAL_TO    reduce using rule 78 (exp_1 -> + np_push_operator_stack term .)
    &               reduce using rule 78 (exp_1 -> + np_push_operator_stack term .)
    |               reduce using rule 78 (exp_1 -> + np_push_operator_stack term .)
    )               reduce using rule 78 (exp_1 -> + np_push_operator_stack term .)
    ,               reduce using rule 78 (exp_1 -> + np_push_operator_stack term .)
    ;               reduce using rule 78 (exp_1 -> + np_push_operator_stack term .)
    TO              reduce using rule 78 (exp_1 -> + np_push_operator_stack term .)
    DO              reduce using rule 78 (exp_1 -> + np_push_operator_stack term .)


state 199

    (79) exp_1 -> - np_push_operator_stack term .

    <               reduce using rule 79 (exp_1 -> - np_push_operator_stack term .)
    >               reduce using rule 79 (exp_1 -> - np_push_operator_stack term .)
    EQUAL_TO        reduce using rule 79 (exp_1 -> - np_push_operator_stack term .)
    NOT_EQUAL_TO    reduce using rule 79 (exp_1 -> - np_push_operator_stack term .)
    &               reduce using rule 79 (exp_1 -> - np_push_operator_stack term .)
    |               reduce using rule 79 (exp_1 -> - np_push_operator_stack term .)
    )               reduce using rule 79 (exp_1 -> - np_push_operator_stack term .)
    ,               reduce using rule 79 (exp_1 -> - np_push_operator_stack term .)
    ;               reduce using rule 79 (exp_1 -> - np_push_operator_stack term .)
    TO              reduce using rule 79 (exp_1 -> - np_push_operator_stack term .)
    DO              reduce using rule 79 (exp_1 -> - np_push_operator_stack term .)


state 200

    (54) variable_loop_1 -> , variable . np_add_to_input_counter variable_loop_1
    (56) np_add_to_input_counter -> . epsilon
    (96) epsilon -> .

    ,               reduce using rule 96 (epsilon -> .)
    )               reduce using rule 96 (epsilon -> .)

    np_add_to_input_counter        shift and go to state 207
    epsilon                        shift and go to state 149

state 201

    (65) condicional -> WHILE ( hyper_exp ) DO { . loop_estatuto }
    (61) loop_estatuto -> . estatuto loop_estatuto
    (62) loop_estatuto -> . epsilon
    (38) estatuto -> . asignacion
    (39) estatuto -> . func_llamada ;
    (40) estatuto -> . read
    (41) estatuto -> . write
    (42) estatuto -> . decision
    (43) estatuto -> . repeticion
    (44) estatuto -> . func_return
    (96) epsilon -> .
    (45) asignacion -> . variable = hyper_exp ;
    (46) func_llamada -> . ID ( )
    (47) func_llamada -> . ID ( hyper_exp_loop )
    (52) read -> . READ ( variable_loop ) ;
    (57) write -> . WRITE ( hyper_exp_loop ) ;
    (58) decision -> . IF ( hyper_exp ) THEN { loop_estatuto } decision_1
    (63) repeticion -> . condicional
    (64) repeticion -> . no_condicional
    (51) func_return -> . RETURN ( hyper_exp ) ;
    (8) variable -> . ID np_single_var_process
    (65) condicional -> . WHILE ( hyper_exp ) DO { loop_estatuto }
    (66) no_condicional -> . FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto }

    }               reduce using rule 96 (epsilon -> .)
    ID              shift and go to state 59
    READ            shift and go to state 53
    WRITE           shift and go to state 66
    IF              shift and go to state 68
    RETURN          shift and go to state 52
    WHILE           shift and go to state 54
    FOR             shift and go to state 62

    asignacion                     shift and go to state 69
    read                           shift and go to state 63
    epsilon                        shift and go to state 64
    decision                       shift and go to state 57
    estatuto                       shift and go to state 58
    write                          shift and go to state 60
    func_return                    shift and go to state 70
    variable                       shift and go to state 67
    func_llamada                   shift and go to state 55
    repeticion                     shift and go to state 71
    loop_estatuto                  shift and go to state 208
    condicional                    shift and go to state 65
    no_condicional                 shift and go to state 61

state 202

    (49) hyper_exp_loop_1 -> , hyper_exp . np_add_to_input_counter hyper_exp_loop_1
    (56) np_add_to_input_counter -> . epsilon
    (96) epsilon -> .

    ,               reduce using rule 96 (epsilon -> .)
    )               reduce using rule 96 (epsilon -> .)

    np_add_to_input_counter        shift and go to state 209
    epsilon                        shift and go to state 149

state 203

    (66) no_condicional -> FOR variable = hyper_exp TO hyper_exp . DO { loop_estatuto }

    DO              shift and go to state 210


state 204

    (58) decision -> IF ( hyper_exp ) THEN { . loop_estatuto } decision_1
    (61) loop_estatuto -> . estatuto loop_estatuto
    (62) loop_estatuto -> . epsilon
    (38) estatuto -> . asignacion
    (39) estatuto -> . func_llamada ;
    (40) estatuto -> . read
    (41) estatuto -> . write
    (42) estatuto -> . decision
    (43) estatuto -> . repeticion
    (44) estatuto -> . func_return
    (96) epsilon -> .
    (45) asignacion -> . variable = hyper_exp ;
    (46) func_llamada -> . ID ( )
    (47) func_llamada -> . ID ( hyper_exp_loop )
    (52) read -> . READ ( variable_loop ) ;
    (57) write -> . WRITE ( hyper_exp_loop ) ;
    (58) decision -> . IF ( hyper_exp ) THEN { loop_estatuto } decision_1
    (63) repeticion -> . condicional
    (64) repeticion -> . no_condicional
    (51) func_return -> . RETURN ( hyper_exp ) ;
    (8) variable -> . ID np_single_var_process
    (65) condicional -> . WHILE ( hyper_exp ) DO { loop_estatuto }
    (66) no_condicional -> . FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto }

    }               reduce using rule 96 (epsilon -> .)
    ID              shift and go to state 59
    READ            shift and go to state 53
    WRITE           shift and go to state 66
    IF              shift and go to state 68
    RETURN          shift and go to state 52
    WHILE           shift and go to state 54
    FOR             shift and go to state 62

    write                          shift and go to state 60
    asignacion                     shift and go to state 69
    read                           shift and go to state 63
    epsilon                        shift and go to state 64
    decision                       shift and go to state 57
    estatuto                       shift and go to state 58
    func_return                    shift and go to state 70
    variable                       shift and go to state 67
    func_llamada                   shift and go to state 55
    repeticion                     shift and go to state 71
    loop_estatuto                  shift and go to state 211
    condicional                    shift and go to state 65
    no_condicional                 shift and go to state 61

state 205

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional . { loop_estatuto } np_kill_func

    {               shift and go to state 212


state 206

    (32) loop_parametro -> , tipo . ID loop_parametro

    ID              shift and go to state 213


state 207

    (54) variable_loop_1 -> , variable np_add_to_input_counter . variable_loop_1
    (54) variable_loop_1 -> . , variable np_add_to_input_counter variable_loop_1
    (55) variable_loop_1 -> . epsilon
    (96) epsilon -> .

    ,               shift and go to state 175
    )               reduce using rule 96 (epsilon -> .)

    variable_loop_1                shift and go to state 214
    epsilon                        shift and go to state 176

state 208

    (65) condicional -> WHILE ( hyper_exp ) DO { loop_estatuto . }

    }               shift and go to state 215


state 209

    (49) hyper_exp_loop_1 -> , hyper_exp np_add_to_input_counter . hyper_exp_loop_1
    (49) hyper_exp_loop_1 -> . , hyper_exp np_add_to_input_counter hyper_exp_loop_1
    (50) hyper_exp_loop_1 -> . epsilon
    (96) epsilon -> .

    ,               shift and go to state 179
    )               reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 180
    hyper_exp_loop_1               shift and go to state 216

state 210

    (66) no_condicional -> FOR variable = hyper_exp TO hyper_exp DO . { loop_estatuto }

    {               shift and go to state 217


state 211

    (58) decision -> IF ( hyper_exp ) THEN { loop_estatuto . } decision_1

    }               shift and go to state 218


state 212

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { . loop_estatuto } np_kill_func
    (61) loop_estatuto -> . estatuto loop_estatuto
    (62) loop_estatuto -> . epsilon
    (38) estatuto -> . asignacion
    (39) estatuto -> . func_llamada ;
    (40) estatuto -> . read
    (41) estatuto -> . write
    (42) estatuto -> . decision
    (43) estatuto -> . repeticion
    (44) estatuto -> . func_return
    (96) epsilon -> .
    (45) asignacion -> . variable = hyper_exp ;
    (46) func_llamada -> . ID ( )
    (47) func_llamada -> . ID ( hyper_exp_loop )
    (52) read -> . READ ( variable_loop ) ;
    (57) write -> . WRITE ( hyper_exp_loop ) ;
    (58) decision -> . IF ( hyper_exp ) THEN { loop_estatuto } decision_1
    (63) repeticion -> . condicional
    (64) repeticion -> . no_condicional
    (51) func_return -> . RETURN ( hyper_exp ) ;
    (8) variable -> . ID np_single_var_process
    (65) condicional -> . WHILE ( hyper_exp ) DO { loop_estatuto }
    (66) no_condicional -> . FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto }

    }               reduce using rule 96 (epsilon -> .)
    ID              shift and go to state 59
    READ            shift and go to state 53
    WRITE           shift and go to state 66
    IF              shift and go to state 68
    RETURN          shift and go to state 52
    WHILE           shift and go to state 54
    FOR             shift and go to state 62

    func_llamada                   shift and go to state 55
    loop_estatuto                  shift and go to state 219
    func_return                    shift and go to state 70
    decision                       shift and go to state 57
    estatuto                       shift and go to state 58
    write                          shift and go to state 60
    read                           shift and go to state 63
    epsilon                        shift and go to state 64
    condicional                    shift and go to state 65
    variable                       shift and go to state 67
    no_condicional                 shift and go to state 61
    asignacion                     shift and go to state 69
    repeticion                     shift and go to state 71

state 213

    (32) loop_parametro -> , tipo ID . loop_parametro
    (32) loop_parametro -> . , tipo ID loop_parametro
    (33) loop_parametro -> . epsilon
    (96) epsilon -> .

    ,               shift and go to state 189
    )               reduce using rule 96 (epsilon -> .)

    loop_parametro                 shift and go to state 220
    epsilon                        shift and go to state 188

state 214

    (54) variable_loop_1 -> , variable np_add_to_input_counter variable_loop_1 .

    )               reduce using rule 54 (variable_loop_1 -> , variable np_add_to_input_counter variable_loop_1 .)


state 215

    (65) condicional -> WHILE ( hyper_exp ) DO { loop_estatuto } .

    ID              reduce using rule 65 (condicional -> WHILE ( hyper_exp ) DO { loop_estatuto } .)
    READ            reduce using rule 65 (condicional -> WHILE ( hyper_exp ) DO { loop_estatuto } .)
    WRITE           reduce using rule 65 (condicional -> WHILE ( hyper_exp ) DO { loop_estatuto } .)
    IF              reduce using rule 65 (condicional -> WHILE ( hyper_exp ) DO { loop_estatuto } .)
    RETURN          reduce using rule 65 (condicional -> WHILE ( hyper_exp ) DO { loop_estatuto } .)
    WHILE           reduce using rule 65 (condicional -> WHILE ( hyper_exp ) DO { loop_estatuto } .)
    FOR             reduce using rule 65 (condicional -> WHILE ( hyper_exp ) DO { loop_estatuto } .)
    }               reduce using rule 65 (condicional -> WHILE ( hyper_exp ) DO { loop_estatuto } .)


state 216

    (49) hyper_exp_loop_1 -> , hyper_exp np_add_to_input_counter hyper_exp_loop_1 .

    )               reduce using rule 49 (hyper_exp_loop_1 -> , hyper_exp np_add_to_input_counter hyper_exp_loop_1 .)


state 217

    (66) no_condicional -> FOR variable = hyper_exp TO hyper_exp DO { . loop_estatuto }
    (61) loop_estatuto -> . estatuto loop_estatuto
    (62) loop_estatuto -> . epsilon
    (38) estatuto -> . asignacion
    (39) estatuto -> . func_llamada ;
    (40) estatuto -> . read
    (41) estatuto -> . write
    (42) estatuto -> . decision
    (43) estatuto -> . repeticion
    (44) estatuto -> . func_return
    (96) epsilon -> .
    (45) asignacion -> . variable = hyper_exp ;
    (46) func_llamada -> . ID ( )
    (47) func_llamada -> . ID ( hyper_exp_loop )
    (52) read -> . READ ( variable_loop ) ;
    (57) write -> . WRITE ( hyper_exp_loop ) ;
    (58) decision -> . IF ( hyper_exp ) THEN { loop_estatuto } decision_1
    (63) repeticion -> . condicional
    (64) repeticion -> . no_condicional
    (51) func_return -> . RETURN ( hyper_exp ) ;
    (8) variable -> . ID np_single_var_process
    (65) condicional -> . WHILE ( hyper_exp ) DO { loop_estatuto }
    (66) no_condicional -> . FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto }

    }               reduce using rule 96 (epsilon -> .)
    ID              shift and go to state 59
    READ            shift and go to state 53
    WRITE           shift and go to state 66
    IF              shift and go to state 68
    RETURN          shift and go to state 52
    WHILE           shift and go to state 54
    FOR             shift and go to state 62

    asignacion                     shift and go to state 69
    read                           shift and go to state 63
    epsilon                        shift and go to state 64
    decision                       shift and go to state 57
    estatuto                       shift and go to state 58
    write                          shift and go to state 60
    func_return                    shift and go to state 70
    variable                       shift and go to state 67
    func_llamada                   shift and go to state 55
    repeticion                     shift and go to state 71
    loop_estatuto                  shift and go to state 221
    condicional                    shift and go to state 65
    no_condicional                 shift and go to state 61

state 218

    (58) decision -> IF ( hyper_exp ) THEN { loop_estatuto } . decision_1
    (59) decision_1 -> . ELSE { loop_estatuto }
    (60) decision_1 -> . epsilon
    (96) epsilon -> .

    ELSE            shift and go to state 222
    ID              reduce using rule 96 (epsilon -> .)
    READ            reduce using rule 96 (epsilon -> .)
    WRITE           reduce using rule 96 (epsilon -> .)
    IF              reduce using rule 96 (epsilon -> .)
    RETURN          reduce using rule 96 (epsilon -> .)
    WHILE           reduce using rule 96 (epsilon -> .)
    FOR             reduce using rule 96 (epsilon -> .)
    }               reduce using rule 96 (epsilon -> .)

    decision_1                     shift and go to state 223
    epsilon                        shift and go to state 224

state 219

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto . } np_kill_func

    }               shift and go to state 225


state 220

    (32) loop_parametro -> , tipo ID loop_parametro .

    )               reduce using rule 32 (loop_parametro -> , tipo ID loop_parametro .)


state 221

    (66) no_condicional -> FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto . }

    }               shift and go to state 226


state 222

    (59) decision_1 -> ELSE . { loop_estatuto }

    {               shift and go to state 227


state 223

    (58) decision -> IF ( hyper_exp ) THEN { loop_estatuto } decision_1 .

    ID              reduce using rule 58 (decision -> IF ( hyper_exp ) THEN { loop_estatuto } decision_1 .)
    READ            reduce using rule 58 (decision -> IF ( hyper_exp ) THEN { loop_estatuto } decision_1 .)
    WRITE           reduce using rule 58 (decision -> IF ( hyper_exp ) THEN { loop_estatuto } decision_1 .)
    IF              reduce using rule 58 (decision -> IF ( hyper_exp ) THEN { loop_estatuto } decision_1 .)
    RETURN          reduce using rule 58 (decision -> IF ( hyper_exp ) THEN { loop_estatuto } decision_1 .)
    WHILE           reduce using rule 58 (decision -> IF ( hyper_exp ) THEN { loop_estatuto } decision_1 .)
    FOR             reduce using rule 58 (decision -> IF ( hyper_exp ) THEN { loop_estatuto } decision_1 .)
    }               reduce using rule 58 (decision -> IF ( hyper_exp ) THEN { loop_estatuto } decision_1 .)


state 224

    (60) decision_1 -> epsilon .

    ID              reduce using rule 60 (decision_1 -> epsilon .)
    READ            reduce using rule 60 (decision_1 -> epsilon .)
    WRITE           reduce using rule 60 (decision_1 -> epsilon .)
    IF              reduce using rule 60 (decision_1 -> epsilon .)
    RETURN          reduce using rule 60 (decision_1 -> epsilon .)
    WHILE           reduce using rule 60 (decision_1 -> epsilon .)
    FOR             reduce using rule 60 (decision_1 -> epsilon .)
    }               reduce using rule 60 (decision_1 -> epsilon .)


state 225

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } . np_kill_func
    (27) np_kill_func -> . epsilon
    (96) epsilon -> .

    FUNCTION        reduce using rule 96 (epsilon -> .)
    MAIN            reduce using rule 96 (epsilon -> .)

    epsilon                        shift and go to state 229
    np_kill_func                   shift and go to state 228

state 226

    (66) no_condicional -> FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto } .

    ID              reduce using rule 66 (no_condicional -> FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto } .)
    READ            reduce using rule 66 (no_condicional -> FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto } .)
    WRITE           reduce using rule 66 (no_condicional -> FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto } .)
    IF              reduce using rule 66 (no_condicional -> FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto } .)
    RETURN          reduce using rule 66 (no_condicional -> FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto } .)
    WHILE           reduce using rule 66 (no_condicional -> FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto } .)
    FOR             reduce using rule 66 (no_condicional -> FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto } .)
    }               reduce using rule 66 (no_condicional -> FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto } .)


state 227

    (59) decision_1 -> ELSE { . loop_estatuto }
    (61) loop_estatuto -> . estatuto loop_estatuto
    (62) loop_estatuto -> . epsilon
    (38) estatuto -> . asignacion
    (39) estatuto -> . func_llamada ;
    (40) estatuto -> . read
    (41) estatuto -> . write
    (42) estatuto -> . decision
    (43) estatuto -> . repeticion
    (44) estatuto -> . func_return
    (96) epsilon -> .
    (45) asignacion -> . variable = hyper_exp ;
    (46) func_llamada -> . ID ( )
    (47) func_llamada -> . ID ( hyper_exp_loop )
    (52) read -> . READ ( variable_loop ) ;
    (57) write -> . WRITE ( hyper_exp_loop ) ;
    (58) decision -> . IF ( hyper_exp ) THEN { loop_estatuto } decision_1
    (63) repeticion -> . condicional
    (64) repeticion -> . no_condicional
    (51) func_return -> . RETURN ( hyper_exp ) ;
    (8) variable -> . ID np_single_var_process
    (65) condicional -> . WHILE ( hyper_exp ) DO { loop_estatuto }
    (66) no_condicional -> . FOR variable = hyper_exp TO hyper_exp DO { loop_estatuto }

    }               reduce using rule 96 (epsilon -> .)
    ID              shift and go to state 59
    READ            shift and go to state 53
    WRITE           shift and go to state 66
    IF              shift and go to state 68
    RETURN          shift and go to state 52
    WHILE           shift and go to state 54
    FOR             shift and go to state 62

    asignacion                     shift and go to state 69
    read                           shift and go to state 63
    epsilon                        shift and go to state 64
    decision                       shift and go to state 57
    estatuto                       shift and go to state 58
    write                          shift and go to state 60
    func_return                    shift and go to state 70
    variable                       shift and go to state 67
    func_llamada                   shift and go to state 55
    repeticion                     shift and go to state 71
    loop_estatuto                  shift and go to state 230
    condicional                    shift and go to state 65
    no_condicional                 shift and go to state 61

state 228

    (21) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } np_kill_func .

    FUNCTION        reduce using rule 21 (func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } np_kill_func .)
    MAIN            reduce using rule 21 (func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional { loop_estatuto } np_kill_func .)


state 229

    (27) np_kill_func -> epsilon .

    FUNCTION        reduce using rule 27 (np_kill_func -> epsilon .)
    MAIN            reduce using rule 27 (np_kill_func -> epsilon .)


state 230

    (59) decision_1 -> ELSE { loop_estatuto . }

    }               shift and go to state 231


state 231

    (59) decision_1 -> ELSE { loop_estatuto } .

    ID              reduce using rule 59 (decision_1 -> ELSE { loop_estatuto } .)
    READ            reduce using rule 59 (decision_1 -> ELSE { loop_estatuto } .)
    WRITE           reduce using rule 59 (decision_1 -> ELSE { loop_estatuto } .)
    IF              reduce using rule 59 (decision_1 -> ELSE { loop_estatuto } .)
    RETURN          reduce using rule 59 (decision_1 -> ELSE { loop_estatuto } .)
    WHILE           reduce using rule 59 (decision_1 -> ELSE { loop_estatuto } .)
    FOR             reduce using rule 59 (decision_1 -> ELSE { loop_estatuto } .)
    }               reduce using rule 59 (decision_1 -> ELSE { loop_estatuto } .)

