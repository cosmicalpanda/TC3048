Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    PRINT
    STRING
    VAL_STRING

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main
Rule 2     np_program_start -> epsilon
Rule 3     np_start_dirfunc -> epsilon
Rule 4     main -> MAIN np_prep_main ( ) { loop_estatuto } np_fin_total
Rule 5     np_prep_main -> epsilon
Rule 6     np_fin_total -> epsilon
Rule 7     var_opcional -> var_declaracion
Rule 8     var_opcional -> epsilon
Rule 9     variable -> ID np_single_var_process
Rule 10    var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion
Rule 11    np_var_prep -> epsilon
Rule 12    loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion
Rule 13    loop_var_declaracion -> epsilon
Rule 14    var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ;
Rule 15    loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo
Rule 16    loop_var_decl_mismo_tipo -> epsilon
Rule 17    np_set_curr_var_type -> epsilon
Rule 18    np_set_curr_var_name -> epsilon
Rule 19    np_add_var_to_varstable -> epsilon
Rule 20    func_programa_loop -> func_definicion func_programa_loop
Rule 21    func_programa_loop -> epsilon
Rule 22    func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
Rule 23    func_tipo_retorno -> tipo
Rule 24    func_tipo_retorno -> VOID
Rule 25    np_func_tipo_retorno -> epsilon
Rule 26    np_func_id -> epsilon
Rule 27    np_add_to_func_dir -> epsilon
Rule 28    np_save_curr_func_quad -> epsilon
Rule 29    np_kill_func -> epsilon
Rule 30    np_prep_func_params -> epsilon
Rule 31    func_parametro -> parametro
Rule 32    func_parametro -> epsilon
Rule 33    parametro -> tipo ID np_add_param loop_parametro
Rule 34    loop_parametro -> , tipo ID np_add_param loop_parametro
Rule 35    loop_parametro -> epsilon
Rule 36    np_add_param -> epsilon
Rule 37    tipo -> INT
Rule 38    tipo -> FLOAT
Rule 39    tipo -> CHAR
Rule 40    tipo -> BOOL
Rule 41    estatuto -> asignacion
Rule 42    estatuto -> func_llamada ;
Rule 43    estatuto -> read
Rule 44    estatuto -> write
Rule 45    estatuto -> decision
Rule 46    estatuto -> repeticion
Rule 47    estatuto -> func_return
Rule 48    asignacion -> variable = hyper_exp ;
Rule 49    func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
Rule 50    np_fc_1 -> epsilon
Rule 51    argumento_loop -> hyper_exp np_fc_2 argumento_loop_1
Rule 52    argumento_loop -> epsilon
Rule 53    argumento_loop_1 -> , hyper_exp np_fc_2 argumento_loop_1
Rule 54    argumento_loop_1 -> epsilon
Rule 55    hyper_exp_loop -> hyper_exp np_add_to_input_counter hyper_exp_loop_1
Rule 56    hyper_exp_loop_1 -> , hyper_exp np_add_to_input_counter hyper_exp_loop_1
Rule 57    hyper_exp_loop_1 -> epsilon
Rule 58    np_fc_2 -> epsilon
Rule 59    func_return -> RETURN ( hyper_exp ) ;
Rule 60    read -> READ ( variable_loop ) ;
Rule 61    variable_loop -> variable np_add_to_input_counter variable_loop_1
Rule 62    variable_loop_1 -> , variable np_add_to_input_counter variable_loop_1
Rule 63    variable_loop_1 -> epsilon
Rule 64    np_add_to_input_counter -> epsilon
Rule 65    write -> WRITE ( hyper_exp_loop ) ;
Rule 66    decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
Rule 67    decision_else -> ELSE np_decision_2 { loop_estatuto }
Rule 68    decision_else -> epsilon
Rule 69    np_decision_1 -> epsilon
Rule 70    np_decision_2 -> epsilon
Rule 71    loop_estatuto -> estatuto loop_estatuto
Rule 72    loop_estatuto -> epsilon
Rule 73    repeticion -> condicional
Rule 74    repeticion -> no_condicional
Rule 75    condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
Rule 76    np_cond_1 -> epsilon
Rule 77    np_cond_2 -> epsilon
Rule 78    np_cond_3 -> epsilon
Rule 79    no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }
Rule 80    np_for_1 -> epsilon
Rule 81    np_for_2 -> epsilon
Rule 82    np_for_3 -> epsilon
Rule 83    hyper_exp -> super_exp hyper_exp_1
Rule 84    hyper_exp_1 -> & np_push_operator_stack super_exp
Rule 85    hyper_exp_1 -> | np_push_operator_stack super_exp
Rule 86    hyper_exp_1 -> epsilon
Rule 87    super_exp -> exp super_exp_1
Rule 88    super_exp_1 -> < np_push_operator_stack exp
Rule 89    super_exp_1 -> > np_push_operator_stack exp
Rule 90    super_exp_1 -> EQUAL_TO np_push_operator_stack exp
Rule 91    super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp
Rule 92    super_exp_1 -> epsilon
Rule 93    exp -> term exp_1
Rule 94    exp_1 -> + np_push_operator_stack term
Rule 95    exp_1 -> - np_push_operator_stack term
Rule 96    exp_1 -> epsilon
Rule 97    term -> factor term_1
Rule 98    term_1 -> * np_push_operator_stack factor
Rule 99    term_1 -> / np_push_operator_stack factor
Rule 100   term_1 -> epsilon
Rule 101   np_push_operator_stack -> epsilon
Rule 102   np_pop_operator_stack -> epsilon
Rule 103   factor -> constant
Rule 104   factor -> variable
Rule 105   factor -> ( hyper_exp )
Rule 106   factor -> func_llamada
Rule 107   constant -> VAL_INT np_push_const_int
Rule 108   constant -> VAL_FLOAT np_push_const_float
Rule 109   constant -> VAL_CHAR np_push_const_char
Rule 110   np_push_const_int -> epsilon
Rule 111   np_push_const_float -> epsilon
Rule 112   np_push_const_char -> epsilon
Rule 113   np_single_var_process -> epsilon
Rule 114   epsilon -> <empty>

Terminals, with rules where they appear

&                    : 84
(                    : 4 22 49 59 60 65 66 75 105
)                    : 4 22 49 59 60 65 66 75 105
*                    : 98
+                    : 94
,                    : 15 34 53 56 62
-                    : 95
/                    : 99
;                    : 1 14 22 42 48 59 60 65
<                    : 88
=                    : 48 79
>                    : 89
BOOL                 : 40
CHAR                 : 39
DO                   : 75 79
ELSE                 : 67
EQUAL_TO             : 90
FLOAT                : 38
FOR                  : 79
FUNCTION             : 22
ID                   : 1 9 14 15 22 33 34 49
IF                   : 66
INT                  : 37
MAIN                 : 4
NOT_EQUAL_TO         : 91
PRINT                : 
PROGRAM              : 1
READ                 : 60
RETURN               : 59
STRING               : 
THEN                 : 66
TO                   : 79
VAL_CHAR             : 109
VAL_FLOAT            : 108
VAL_INT              : 107
VAL_STRING           : 
VARS                 : 10
VOID                 : 24
WHILE                : 75
WRITE                : 65
error                : 
{                    : 4 22 66 67 75 79
|                    : 85
}                    : 4 22 66 67 75 79

Nonterminals, with rules where they appear

argumento_loop       : 49
argumento_loop_1     : 51 53
asignacion           : 41
condicional          : 73
constant             : 103
decision             : 45
decision_else        : 66
epsilon              : 2 3 5 6 8 11 13 16 17 18 19 21 25 26 27 28 29 30 32 35 36 50 52 54 57 58 63 64 68 69 70 72 76 77 78 80 81 82 86 92 96 100 101 102 110 111 112 113
estatuto             : 71
exp                  : 87 88 89 90 91
exp_1                : 93
factor               : 97 98 99
func_definicion      : 20
func_llamada         : 42 106
func_parametro       : 22
func_programa_loop   : 1 20
func_return          : 47
func_tipo_retorno    : 22
hyper_exp            : 48 51 53 55 56 59 66 75 79 79 105
hyper_exp_1          : 83
hyper_exp_loop       : 65
hyper_exp_loop_1     : 55 56
loop_estatuto        : 4 22 66 67 71 75 79
loop_parametro       : 33 34
loop_var_decl_mismo_tipo : 14 15
loop_var_declaracion : 10 12
main                 : 1
no_condicional       : 74
np_add_param         : 33 34
np_add_to_func_dir   : 22
np_add_to_input_counter : 55 56 61 62
np_add_var_to_varstable : 14 15
np_cond_1            : 75
np_cond_2            : 75
np_cond_3            : 75
np_decision_1        : 66
np_decision_2        : 67
np_fc_1              : 49
np_fc_2              : 51 53
np_fin_total         : 4
np_for_1             : 79
np_for_2             : 79
np_for_3             : 79
np_func_id           : 22
np_func_tipo_retorno : 22
np_kill_func         : 22
np_pop_operator_stack : 49
np_prep_func_params  : 22
np_prep_main         : 4
np_program_start     : 1
np_push_const_char   : 109
np_push_const_float  : 108
np_push_const_int    : 107
np_push_operator_stack : 49 84 85 88 89 90 91 94 95 98 99
np_save_curr_func_quad : 22
np_set_curr_var_name : 14 15
np_set_curr_var_type : 14
np_single_var_process : 9
np_start_dirfunc     : 1
np_var_prep          : 10
parametro            : 31
programa             : 0
read                 : 43
repeticion           : 46
super_exp            : 83 84 85
super_exp_1          : 87
term                 : 93 94 95
term_1               : 97
tipo                 : 14 23 33 34
var_declaracion      : 7
var_declaracion_mismo_tipo : 10 12
var_opcional         : 1 22
variable             : 48 61 62 79 104
variable_loop        : 60
variable_loop_1      : 61 62
write                : 44

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main

    PROGRAM         shift and go to state 1

    programa                       shift and go to state 2

state 1

    (1) programa -> PROGRAM . np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main
    (2) np_program_start -> . epsilon
    (114) epsilon -> .

    ID              reduce using rule 114 (epsilon -> .)

    np_program_start               shift and go to state 3
    epsilon                        shift and go to state 4

state 2

    (0) S' -> programa .



state 3

    (1) programa -> PROGRAM np_program_start . ID np_start_dirfunc ; var_opcional func_programa_loop main

    ID              shift and go to state 5


state 4

    (2) np_program_start -> epsilon .

    ID              reduce using rule 2 (np_program_start -> epsilon .)


state 5

    (1) programa -> PROGRAM np_program_start ID . np_start_dirfunc ; var_opcional func_programa_loop main
    (3) np_start_dirfunc -> . epsilon
    (114) epsilon -> .

    ;               reduce using rule 114 (epsilon -> .)

    np_start_dirfunc               shift and go to state 6
    epsilon                        shift and go to state 7

state 6

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc . ; var_opcional func_programa_loop main

    ;               shift and go to state 8


state 7

    (3) np_start_dirfunc -> epsilon .

    ;               reduce using rule 3 (np_start_dirfunc -> epsilon .)


state 8

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc ; . var_opcional func_programa_loop main
    (7) var_opcional -> . var_declaracion
    (8) var_opcional -> . epsilon
    (10) var_declaracion -> . VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion
    (114) epsilon -> .

    VARS            shift and go to state 9
    FUNCTION        reduce using rule 114 (epsilon -> .)
    MAIN            reduce using rule 114 (epsilon -> .)

    var_declaracion                shift and go to state 10
    epsilon                        shift and go to state 11
    var_opcional                   shift and go to state 12

state 9

    (10) var_declaracion -> VARS . np_var_prep var_declaracion_mismo_tipo loop_var_declaracion
    (11) np_var_prep -> . epsilon
    (114) epsilon -> .

    INT             reduce using rule 114 (epsilon -> .)
    FLOAT           reduce using rule 114 (epsilon -> .)
    CHAR            reduce using rule 114 (epsilon -> .)
    BOOL            reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 13
    np_var_prep                    shift and go to state 14

state 10

    (7) var_opcional -> var_declaracion .

    FUNCTION        reduce using rule 7 (var_opcional -> var_declaracion .)
    MAIN            reduce using rule 7 (var_opcional -> var_declaracion .)
    {               reduce using rule 7 (var_opcional -> var_declaracion .)


state 11

    (8) var_opcional -> epsilon .

    FUNCTION        reduce using rule 8 (var_opcional -> epsilon .)
    MAIN            reduce using rule 8 (var_opcional -> epsilon .)
    {               reduce using rule 8 (var_opcional -> epsilon .)


state 12

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional . func_programa_loop main
    (20) func_programa_loop -> . func_definicion func_programa_loop
    (21) func_programa_loop -> . epsilon
    (22) func_definicion -> . FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (114) epsilon -> .

    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 114 (epsilon -> .)

    func_definicion                shift and go to state 15
    epsilon                        shift and go to state 17
    func_programa_loop             shift and go to state 18

state 13

    (11) np_var_prep -> epsilon .

    INT             reduce using rule 11 (np_var_prep -> epsilon .)
    FLOAT           reduce using rule 11 (np_var_prep -> epsilon .)
    CHAR            reduce using rule 11 (np_var_prep -> epsilon .)
    BOOL            reduce using rule 11 (np_var_prep -> epsilon .)


state 14

    (10) var_declaracion -> VARS np_var_prep . var_declaracion_mismo_tipo loop_var_declaracion
    (14) var_declaracion_mismo_tipo -> . tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (37) tipo -> . INT
    (38) tipo -> . FLOAT
    (39) tipo -> . CHAR
    (40) tipo -> . BOOL

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 24

    tipo                           shift and go to state 19
    var_declaracion_mismo_tipo     shift and go to state 23

state 15

    (20) func_programa_loop -> func_definicion . func_programa_loop
    (20) func_programa_loop -> . func_definicion func_programa_loop
    (21) func_programa_loop -> . epsilon
    (22) func_definicion -> . FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (114) epsilon -> .

    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 114 (epsilon -> .)

    func_definicion                shift and go to state 15
    epsilon                        shift and go to state 17
    func_programa_loop             shift and go to state 25

state 16

    (22) func_definicion -> FUNCTION . func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (23) func_tipo_retorno -> . tipo
    (24) func_tipo_retorno -> . VOID
    (37) tipo -> . INT
    (38) tipo -> . FLOAT
    (39) tipo -> . CHAR
    (40) tipo -> . BOOL

    VOID            shift and go to state 26
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 24

    func_tipo_retorno              shift and go to state 28
    tipo                           shift and go to state 27

state 17

    (21) func_programa_loop -> epsilon .

    MAIN            reduce using rule 21 (func_programa_loop -> epsilon .)


state 18

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop . main
    (4) main -> . MAIN np_prep_main ( ) { loop_estatuto } np_fin_total

    MAIN            shift and go to state 29

    main                           shift and go to state 30

state 19

    (14) var_declaracion_mismo_tipo -> tipo . np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (17) np_set_curr_var_type -> . epsilon
    (114) epsilon -> .

    ID              reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 31
    np_set_curr_var_type           shift and go to state 32

state 20

    (37) tipo -> INT .

    ID              reduce using rule 37 (tipo -> INT .)


state 21

    (38) tipo -> FLOAT .

    ID              reduce using rule 38 (tipo -> FLOAT .)


state 22

    (39) tipo -> CHAR .

    ID              reduce using rule 39 (tipo -> CHAR .)


state 23

    (10) var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo . loop_var_declaracion
    (12) loop_var_declaracion -> . var_declaracion_mismo_tipo loop_var_declaracion
    (13) loop_var_declaracion -> . epsilon
    (14) var_declaracion_mismo_tipo -> . tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (114) epsilon -> .
    (37) tipo -> . INT
    (38) tipo -> . FLOAT
    (39) tipo -> . CHAR
    (40) tipo -> . BOOL

    FUNCTION        reduce using rule 114 (epsilon -> .)
    MAIN            reduce using rule 114 (epsilon -> .)
    {               reduce using rule 114 (epsilon -> .)
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 24

    tipo                           shift and go to state 19
    epsilon                        shift and go to state 33
    var_declaracion_mismo_tipo     shift and go to state 34
    loop_var_declaracion           shift and go to state 35

state 24

    (40) tipo -> BOOL .

    ID              reduce using rule 40 (tipo -> BOOL .)


state 25

    (20) func_programa_loop -> func_definicion func_programa_loop .

    MAIN            reduce using rule 20 (func_programa_loop -> func_definicion func_programa_loop .)


state 26

    (24) func_tipo_retorno -> VOID .

    ID              reduce using rule 24 (func_tipo_retorno -> VOID .)


state 27

    (23) func_tipo_retorno -> tipo .

    ID              reduce using rule 23 (func_tipo_retorno -> tipo .)


state 28

    (22) func_definicion -> FUNCTION func_tipo_retorno . np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (25) np_func_tipo_retorno -> . epsilon
    (114) epsilon -> .

    ID              reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 37
    np_func_tipo_retorno           shift and go to state 36

state 29

    (4) main -> MAIN . np_prep_main ( ) { loop_estatuto } np_fin_total
    (5) np_prep_main -> . epsilon
    (114) epsilon -> .

    (               reduce using rule 114 (epsilon -> .)

    np_prep_main                   shift and go to state 38
    epsilon                        shift and go to state 39

state 30

    (1) programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main .

    $end            reduce using rule 1 (programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main .)


state 31

    (17) np_set_curr_var_type -> epsilon .

    ID              reduce using rule 17 (np_set_curr_var_type -> epsilon .)


state 32

    (14) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type . ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ;

    ID              shift and go to state 40


state 33

    (13) loop_var_declaracion -> epsilon .

    FUNCTION        reduce using rule 13 (loop_var_declaracion -> epsilon .)
    MAIN            reduce using rule 13 (loop_var_declaracion -> epsilon .)
    {               reduce using rule 13 (loop_var_declaracion -> epsilon .)


state 34

    (12) loop_var_declaracion -> var_declaracion_mismo_tipo . loop_var_declaracion
    (12) loop_var_declaracion -> . var_declaracion_mismo_tipo loop_var_declaracion
    (13) loop_var_declaracion -> . epsilon
    (14) var_declaracion_mismo_tipo -> . tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (114) epsilon -> .
    (37) tipo -> . INT
    (38) tipo -> . FLOAT
    (39) tipo -> . CHAR
    (40) tipo -> . BOOL

    FUNCTION        reduce using rule 114 (epsilon -> .)
    MAIN            reduce using rule 114 (epsilon -> .)
    {               reduce using rule 114 (epsilon -> .)
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 24

    tipo                           shift and go to state 19
    epsilon                        shift and go to state 33
    var_declaracion_mismo_tipo     shift and go to state 34
    loop_var_declaracion           shift and go to state 41

state 35

    (10) var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion .

    FUNCTION        reduce using rule 10 (var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion .)
    MAIN            reduce using rule 10 (var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion .)
    {               reduce using rule 10 (var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion .)


state 36

    (22) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno . ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func

    ID              shift and go to state 42


state 37

    (25) np_func_tipo_retorno -> epsilon .

    ID              reduce using rule 25 (np_func_tipo_retorno -> epsilon .)


state 38

    (4) main -> MAIN np_prep_main . ( ) { loop_estatuto } np_fin_total

    (               shift and go to state 43


state 39

    (5) np_prep_main -> epsilon .

    (               reduce using rule 5 (np_prep_main -> epsilon .)


state 40

    (14) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID . np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (18) np_set_curr_var_name -> . epsilon
    (114) epsilon -> .

    ,               reduce using rule 114 (epsilon -> .)
    ;               reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 44
    np_set_curr_var_name           shift and go to state 45

state 41

    (12) loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion .

    FUNCTION        reduce using rule 12 (loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion .)
    MAIN            reduce using rule 12 (loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion .)
    {               reduce using rule 12 (loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion .)


state 42

    (22) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID . np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (26) np_func_id -> . epsilon
    (114) epsilon -> .

    (               reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 46
    np_func_id                     shift and go to state 47

state 43

    (4) main -> MAIN np_prep_main ( . ) { loop_estatuto } np_fin_total

    )               shift and go to state 48


state 44

    (18) np_set_curr_var_name -> epsilon .

    ,               reduce using rule 18 (np_set_curr_var_name -> epsilon .)
    ;               reduce using rule 18 (np_set_curr_var_name -> epsilon .)


state 45

    (14) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name . np_add_var_to_varstable loop_var_decl_mismo_tipo ;
    (19) np_add_var_to_varstable -> . epsilon
    (114) epsilon -> .

    ,               reduce using rule 114 (epsilon -> .)
    ;               reduce using rule 114 (epsilon -> .)

    np_add_var_to_varstable        shift and go to state 49
    epsilon                        shift and go to state 50

state 46

    (26) np_func_id -> epsilon .

    (               reduce using rule 26 (np_func_id -> epsilon .)


state 47

    (22) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id . np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (27) np_add_to_func_dir -> . epsilon
    (114) epsilon -> .

    (               reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 51
    np_add_to_func_dir             shift and go to state 52

state 48

    (4) main -> MAIN np_prep_main ( ) . { loop_estatuto } np_fin_total

    {               shift and go to state 53


state 49

    (14) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable . loop_var_decl_mismo_tipo ;
    (15) loop_var_decl_mismo_tipo -> . , ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo
    (16) loop_var_decl_mismo_tipo -> . epsilon
    (114) epsilon -> .

    ,               shift and go to state 55
    ;               reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 54
    loop_var_decl_mismo_tipo       shift and go to state 56

state 50

    (19) np_add_var_to_varstable -> epsilon .

    ,               reduce using rule 19 (np_add_var_to_varstable -> epsilon .)
    ;               reduce using rule 19 (np_add_var_to_varstable -> epsilon .)


state 51

    (27) np_add_to_func_dir -> epsilon .

    (               reduce using rule 27 (np_add_to_func_dir -> epsilon .)


state 52

    (22) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir . ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func

    (               shift and go to state 57


state 53

    (4) main -> MAIN np_prep_main ( ) { . loop_estatuto } np_fin_total
    (71) loop_estatuto -> . estatuto loop_estatuto
    (72) loop_estatuto -> . epsilon
    (41) estatuto -> . asignacion
    (42) estatuto -> . func_llamada ;
    (43) estatuto -> . read
    (44) estatuto -> . write
    (45) estatuto -> . decision
    (46) estatuto -> . repeticion
    (47) estatuto -> . func_return
    (114) epsilon -> .
    (48) asignacion -> . variable = hyper_exp ;
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (60) read -> . READ ( variable_loop ) ;
    (65) write -> . WRITE ( hyper_exp_loop ) ;
    (66) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (73) repeticion -> . condicional
    (74) repeticion -> . no_condicional
    (59) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (75) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (79) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 114 (epsilon -> .)
    ID              shift and go to state 65
    READ            shift and go to state 59
    WRITE           shift and go to state 72
    IF              shift and go to state 74
    RETURN          shift and go to state 58
    WHILE           shift and go to state 60
    FOR             shift and go to state 68

    func_llamada                   shift and go to state 61
    loop_estatuto                  shift and go to state 62
    func_return                    shift and go to state 76
    decision                       shift and go to state 63
    estatuto                       shift and go to state 64
    write                          shift and go to state 66
    epsilon                        shift and go to state 70
    read                           shift and go to state 69
    condicional                    shift and go to state 71
    variable                       shift and go to state 73
    no_condicional                 shift and go to state 67
    asignacion                     shift and go to state 75
    repeticion                     shift and go to state 77

state 54

    (16) loop_var_decl_mismo_tipo -> epsilon .

    ;               reduce using rule 16 (loop_var_decl_mismo_tipo -> epsilon .)


state 55

    (15) loop_var_decl_mismo_tipo -> , . ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo

    ID              shift and go to state 78


state 56

    (14) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo . ;

    ;               shift and go to state 79


state 57

    (22) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( . np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (30) np_prep_func_params -> . epsilon
    (114) epsilon -> .

    INT             reduce using rule 114 (epsilon -> .)
    FLOAT           reduce using rule 114 (epsilon -> .)
    CHAR            reduce using rule 114 (epsilon -> .)
    BOOL            reduce using rule 114 (epsilon -> .)
    )               reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 81
    np_prep_func_params            shift and go to state 80

state 58

    (59) func_return -> RETURN . ( hyper_exp ) ;

    (               shift and go to state 82


state 59

    (60) read -> READ . ( variable_loop ) ;

    (               shift and go to state 83


state 60

    (75) condicional -> WHILE . np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (76) np_cond_1 -> . epsilon
    (114) epsilon -> .

    (               reduce using rule 114 (epsilon -> .)

    np_cond_1                      shift and go to state 84
    epsilon                        shift and go to state 85

state 61

    (42) estatuto -> func_llamada . ;

    ;               shift and go to state 86


state 62

    (4) main -> MAIN np_prep_main ( ) { loop_estatuto . } np_fin_total

    }               shift and go to state 87


state 63

    (45) estatuto -> decision .

    ID              reduce using rule 45 (estatuto -> decision .)
    READ            reduce using rule 45 (estatuto -> decision .)
    WRITE           reduce using rule 45 (estatuto -> decision .)
    IF              reduce using rule 45 (estatuto -> decision .)
    RETURN          reduce using rule 45 (estatuto -> decision .)
    WHILE           reduce using rule 45 (estatuto -> decision .)
    FOR             reduce using rule 45 (estatuto -> decision .)
    }               reduce using rule 45 (estatuto -> decision .)


state 64

    (71) loop_estatuto -> estatuto . loop_estatuto
    (71) loop_estatuto -> . estatuto loop_estatuto
    (72) loop_estatuto -> . epsilon
    (41) estatuto -> . asignacion
    (42) estatuto -> . func_llamada ;
    (43) estatuto -> . read
    (44) estatuto -> . write
    (45) estatuto -> . decision
    (46) estatuto -> . repeticion
    (47) estatuto -> . func_return
    (114) epsilon -> .
    (48) asignacion -> . variable = hyper_exp ;
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (60) read -> . READ ( variable_loop ) ;
    (65) write -> . WRITE ( hyper_exp_loop ) ;
    (66) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (73) repeticion -> . condicional
    (74) repeticion -> . no_condicional
    (59) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (75) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (79) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 114 (epsilon -> .)
    ID              shift and go to state 65
    READ            shift and go to state 59
    WRITE           shift and go to state 72
    IF              shift and go to state 74
    RETURN          shift and go to state 58
    WHILE           shift and go to state 60
    FOR             shift and go to state 68

    func_llamada                   shift and go to state 61
    loop_estatuto                  shift and go to state 88
    func_return                    shift and go to state 76
    decision                       shift and go to state 63
    estatuto                       shift and go to state 64
    write                          shift and go to state 66
    epsilon                        shift and go to state 70
    read                           shift and go to state 69
    condicional                    shift and go to state 71
    variable                       shift and go to state 73
    no_condicional                 shift and go to state 67
    asignacion                     shift and go to state 75
    repeticion                     shift and go to state 77

state 65

    (49) func_llamada -> ID . np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (9) variable -> ID . np_single_var_process
    (50) np_fc_1 -> . epsilon
    (113) np_single_var_process -> . epsilon
    (114) epsilon -> .

    (               reduce using rule 114 (epsilon -> .)
    =               reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 90
    np_fc_1                        shift and go to state 91
    np_single_var_process          shift and go to state 89

state 66

    (44) estatuto -> write .

    ID              reduce using rule 44 (estatuto -> write .)
    READ            reduce using rule 44 (estatuto -> write .)
    WRITE           reduce using rule 44 (estatuto -> write .)
    IF              reduce using rule 44 (estatuto -> write .)
    RETURN          reduce using rule 44 (estatuto -> write .)
    WHILE           reduce using rule 44 (estatuto -> write .)
    FOR             reduce using rule 44 (estatuto -> write .)
    }               reduce using rule 44 (estatuto -> write .)


state 67

    (74) repeticion -> no_condicional .

    ID              reduce using rule 74 (repeticion -> no_condicional .)
    READ            reduce using rule 74 (repeticion -> no_condicional .)
    WRITE           reduce using rule 74 (repeticion -> no_condicional .)
    IF              reduce using rule 74 (repeticion -> no_condicional .)
    RETURN          reduce using rule 74 (repeticion -> no_condicional .)
    WHILE           reduce using rule 74 (repeticion -> no_condicional .)
    FOR             reduce using rule 74 (repeticion -> no_condicional .)
    }               reduce using rule 74 (repeticion -> no_condicional .)


state 68

    (79) no_condicional -> FOR . variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }
    (9) variable -> . ID np_single_var_process

    ID              shift and go to state 93

    variable                       shift and go to state 92

state 69

    (43) estatuto -> read .

    ID              reduce using rule 43 (estatuto -> read .)
    READ            reduce using rule 43 (estatuto -> read .)
    WRITE           reduce using rule 43 (estatuto -> read .)
    IF              reduce using rule 43 (estatuto -> read .)
    RETURN          reduce using rule 43 (estatuto -> read .)
    WHILE           reduce using rule 43 (estatuto -> read .)
    FOR             reduce using rule 43 (estatuto -> read .)
    }               reduce using rule 43 (estatuto -> read .)


state 70

    (72) loop_estatuto -> epsilon .

    }               reduce using rule 72 (loop_estatuto -> epsilon .)


state 71

    (73) repeticion -> condicional .

    ID              reduce using rule 73 (repeticion -> condicional .)
    READ            reduce using rule 73 (repeticion -> condicional .)
    WRITE           reduce using rule 73 (repeticion -> condicional .)
    IF              reduce using rule 73 (repeticion -> condicional .)
    RETURN          reduce using rule 73 (repeticion -> condicional .)
    WHILE           reduce using rule 73 (repeticion -> condicional .)
    FOR             reduce using rule 73 (repeticion -> condicional .)
    }               reduce using rule 73 (repeticion -> condicional .)


state 72

    (65) write -> WRITE . ( hyper_exp_loop ) ;

    (               shift and go to state 94


state 73

    (48) asignacion -> variable . = hyper_exp ;

    =               shift and go to state 95


state 74

    (66) decision -> IF . ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else

    (               shift and go to state 96


state 75

    (41) estatuto -> asignacion .

    ID              reduce using rule 41 (estatuto -> asignacion .)
    READ            reduce using rule 41 (estatuto -> asignacion .)
    WRITE           reduce using rule 41 (estatuto -> asignacion .)
    IF              reduce using rule 41 (estatuto -> asignacion .)
    RETURN          reduce using rule 41 (estatuto -> asignacion .)
    WHILE           reduce using rule 41 (estatuto -> asignacion .)
    FOR             reduce using rule 41 (estatuto -> asignacion .)
    }               reduce using rule 41 (estatuto -> asignacion .)


state 76

    (47) estatuto -> func_return .

    ID              reduce using rule 47 (estatuto -> func_return .)
    READ            reduce using rule 47 (estatuto -> func_return .)
    WRITE           reduce using rule 47 (estatuto -> func_return .)
    IF              reduce using rule 47 (estatuto -> func_return .)
    RETURN          reduce using rule 47 (estatuto -> func_return .)
    WHILE           reduce using rule 47 (estatuto -> func_return .)
    FOR             reduce using rule 47 (estatuto -> func_return .)
    }               reduce using rule 47 (estatuto -> func_return .)


state 77

    (46) estatuto -> repeticion .

    ID              reduce using rule 46 (estatuto -> repeticion .)
    READ            reduce using rule 46 (estatuto -> repeticion .)
    WRITE           reduce using rule 46 (estatuto -> repeticion .)
    IF              reduce using rule 46 (estatuto -> repeticion .)
    RETURN          reduce using rule 46 (estatuto -> repeticion .)
    WHILE           reduce using rule 46 (estatuto -> repeticion .)
    FOR             reduce using rule 46 (estatuto -> repeticion .)
    }               reduce using rule 46 (estatuto -> repeticion .)


state 78

    (15) loop_var_decl_mismo_tipo -> , ID . np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo
    (18) np_set_curr_var_name -> . epsilon
    (114) epsilon -> .

    ,               reduce using rule 114 (epsilon -> .)
    ;               reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 44
    np_set_curr_var_name           shift and go to state 97

state 79

    (14) var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ; .

    INT             reduce using rule 14 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    FLOAT           reduce using rule 14 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    CHAR            reduce using rule 14 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    BOOL            reduce using rule 14 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    FUNCTION        reduce using rule 14 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    MAIN            reduce using rule 14 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)
    {               reduce using rule 14 (var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ; .)


state 80

    (22) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params . func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (31) func_parametro -> . parametro
    (32) func_parametro -> . epsilon
    (33) parametro -> . tipo ID np_add_param loop_parametro
    (114) epsilon -> .
    (37) tipo -> . INT
    (38) tipo -> . FLOAT
    (39) tipo -> . CHAR
    (40) tipo -> . BOOL

    )               reduce using rule 114 (epsilon -> .)
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 24

    tipo                           shift and go to state 99
    parametro                      shift and go to state 100
    epsilon                        shift and go to state 101
    func_parametro                 shift and go to state 98

state 81

    (30) np_prep_func_params -> epsilon .

    INT             reduce using rule 30 (np_prep_func_params -> epsilon .)
    FLOAT           reduce using rule 30 (np_prep_func_params -> epsilon .)
    CHAR            reduce using rule 30 (np_prep_func_params -> epsilon .)
    BOOL            reduce using rule 30 (np_prep_func_params -> epsilon .)
    )               reduce using rule 30 (np_prep_func_params -> epsilon .)


state 82

    (59) func_return -> RETURN ( . hyper_exp ) ;
    (83) hyper_exp -> . super_exp hyper_exp_1
    (87) super_exp -> . exp super_exp_1
    (93) exp -> . term exp_1
    (97) term -> . factor term_1
    (103) factor -> . constant
    (104) factor -> . variable
    (105) factor -> . ( hyper_exp )
    (106) factor -> . func_llamada
    (107) constant -> . VAL_INT np_push_const_int
    (108) constant -> . VAL_FLOAT np_push_const_float
    (109) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 104
    VAL_INT         shift and go to state 114
    VAL_FLOAT       shift and go to state 110
    VAL_CHAR        shift and go to state 111
    ID              shift and go to state 105

    super_exp                      shift and go to state 103
    term                           shift and go to state 113
    hyper_exp                      shift and go to state 108
    constant                       shift and go to state 107
    exp                            shift and go to state 109
    func_llamada                   shift and go to state 102
    factor                         shift and go to state 106
    variable                       shift and go to state 112

state 83

    (60) read -> READ ( . variable_loop ) ;
    (61) variable_loop -> . variable np_add_to_input_counter variable_loop_1
    (9) variable -> . ID np_single_var_process

    ID              shift and go to state 93

    variable                       shift and go to state 115
    variable_loop                  shift and go to state 116

state 84

    (75) condicional -> WHILE np_cond_1 . ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3

    (               shift and go to state 117


state 85

    (76) np_cond_1 -> epsilon .

    (               reduce using rule 76 (np_cond_1 -> epsilon .)


state 86

    (42) estatuto -> func_llamada ; .

    ID              reduce using rule 42 (estatuto -> func_llamada ; .)
    READ            reduce using rule 42 (estatuto -> func_llamada ; .)
    WRITE           reduce using rule 42 (estatuto -> func_llamada ; .)
    IF              reduce using rule 42 (estatuto -> func_llamada ; .)
    RETURN          reduce using rule 42 (estatuto -> func_llamada ; .)
    WHILE           reduce using rule 42 (estatuto -> func_llamada ; .)
    FOR             reduce using rule 42 (estatuto -> func_llamada ; .)
    }               reduce using rule 42 (estatuto -> func_llamada ; .)


state 87

    (4) main -> MAIN np_prep_main ( ) { loop_estatuto } . np_fin_total
    (6) np_fin_total -> . epsilon
    (114) epsilon -> .

    $end            reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 118
    np_fin_total                   shift and go to state 119

state 88

    (71) loop_estatuto -> estatuto loop_estatuto .

    }               reduce using rule 71 (loop_estatuto -> estatuto loop_estatuto .)


state 89

    (9) variable -> ID np_single_var_process .

    *               reduce using rule 9 (variable -> ID np_single_var_process .)
    /               reduce using rule 9 (variable -> ID np_single_var_process .)
    +               reduce using rule 9 (variable -> ID np_single_var_process .)
    -               reduce using rule 9 (variable -> ID np_single_var_process .)
    <               reduce using rule 9 (variable -> ID np_single_var_process .)
    >               reduce using rule 9 (variable -> ID np_single_var_process .)
    EQUAL_TO        reduce using rule 9 (variable -> ID np_single_var_process .)
    NOT_EQUAL_TO    reduce using rule 9 (variable -> ID np_single_var_process .)
    &               reduce using rule 9 (variable -> ID np_single_var_process .)
    |               reduce using rule 9 (variable -> ID np_single_var_process .)
    )               reduce using rule 9 (variable -> ID np_single_var_process .)
    ,               reduce using rule 9 (variable -> ID np_single_var_process .)
    ;               reduce using rule 9 (variable -> ID np_single_var_process .)
    TO              reduce using rule 9 (variable -> ID np_single_var_process .)
    DO              reduce using rule 9 (variable -> ID np_single_var_process .)
    =               reduce using rule 9 (variable -> ID np_single_var_process .)


state 90

    (50) np_fc_1 -> epsilon .
    (113) np_single_var_process -> epsilon .

    (               reduce using rule 50 (np_fc_1 -> epsilon .)
    =               reduce using rule 113 (np_single_var_process -> epsilon .)


state 91

    (49) func_llamada -> ID np_fc_1 . ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 120


state 92

    (79) no_condicional -> FOR variable . = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    =               shift and go to state 121


state 93

    (9) variable -> ID . np_single_var_process
    (113) np_single_var_process -> . epsilon
    (114) epsilon -> .

    =               reduce using rule 114 (epsilon -> .)
    ,               reduce using rule 114 (epsilon -> .)
    )               reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 122
    np_single_var_process          shift and go to state 89

state 94

    (65) write -> WRITE ( . hyper_exp_loop ) ;
    (55) hyper_exp_loop -> . hyper_exp np_add_to_input_counter hyper_exp_loop_1
    (83) hyper_exp -> . super_exp hyper_exp_1
    (87) super_exp -> . exp super_exp_1
    (93) exp -> . term exp_1
    (97) term -> . factor term_1
    (103) factor -> . constant
    (104) factor -> . variable
    (105) factor -> . ( hyper_exp )
    (106) factor -> . func_llamada
    (107) constant -> . VAL_INT np_push_const_int
    (108) constant -> . VAL_FLOAT np_push_const_float
    (109) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 104
    VAL_INT         shift and go to state 114
    VAL_FLOAT       shift and go to state 110
    VAL_CHAR        shift and go to state 111
    ID              shift and go to state 105

    constant                       shift and go to state 107
    func_llamada                   shift and go to state 102
    super_exp                      shift and go to state 103
    hyper_exp_loop                 shift and go to state 123
    factor                         shift and go to state 106
    hyper_exp                      shift and go to state 124
    exp                            shift and go to state 109
    variable                       shift and go to state 112
    term                           shift and go to state 113

state 95

    (48) asignacion -> variable = . hyper_exp ;
    (83) hyper_exp -> . super_exp hyper_exp_1
    (87) super_exp -> . exp super_exp_1
    (93) exp -> . term exp_1
    (97) term -> . factor term_1
    (103) factor -> . constant
    (104) factor -> . variable
    (105) factor -> . ( hyper_exp )
    (106) factor -> . func_llamada
    (107) constant -> . VAL_INT np_push_const_int
    (108) constant -> . VAL_FLOAT np_push_const_float
    (109) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 104
    VAL_INT         shift and go to state 114
    VAL_FLOAT       shift and go to state 110
    VAL_CHAR        shift and go to state 111
    ID              shift and go to state 105

    super_exp                      shift and go to state 103
    term                           shift and go to state 113
    hyper_exp                      shift and go to state 125
    constant                       shift and go to state 107
    exp                            shift and go to state 109
    func_llamada                   shift and go to state 102
    factor                         shift and go to state 106
    variable                       shift and go to state 112

state 96

    (66) decision -> IF ( . hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (83) hyper_exp -> . super_exp hyper_exp_1
    (87) super_exp -> . exp super_exp_1
    (93) exp -> . term exp_1
    (97) term -> . factor term_1
    (103) factor -> . constant
    (104) factor -> . variable
    (105) factor -> . ( hyper_exp )
    (106) factor -> . func_llamada
    (107) constant -> . VAL_INT np_push_const_int
    (108) constant -> . VAL_FLOAT np_push_const_float
    (109) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 104
    VAL_INT         shift and go to state 114
    VAL_FLOAT       shift and go to state 110
    VAL_CHAR        shift and go to state 111
    ID              shift and go to state 105

    constant                       shift and go to state 107
    func_llamada                   shift and go to state 102
    super_exp                      shift and go to state 103
    factor                         shift and go to state 106
    hyper_exp                      shift and go to state 126
    exp                            shift and go to state 109
    variable                       shift and go to state 112
    term                           shift and go to state 113

state 97

    (15) loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name . np_add_var_to_varstable loop_var_decl_mismo_tipo
    (19) np_add_var_to_varstable -> . epsilon
    (114) epsilon -> .

    ,               reduce using rule 114 (epsilon -> .)
    ;               reduce using rule 114 (epsilon -> .)

    np_add_var_to_varstable        shift and go to state 127
    epsilon                        shift and go to state 50

state 98

    (22) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro . ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func

    )               shift and go to state 128


state 99

    (33) parametro -> tipo . ID np_add_param loop_parametro

    ID              shift and go to state 129


state 100

    (31) func_parametro -> parametro .

    )               reduce using rule 31 (func_parametro -> parametro .)


state 101

    (32) func_parametro -> epsilon .

    )               reduce using rule 32 (func_parametro -> epsilon .)


state 102

    (106) factor -> func_llamada .

    *               reduce using rule 106 (factor -> func_llamada .)
    /               reduce using rule 106 (factor -> func_llamada .)
    +               reduce using rule 106 (factor -> func_llamada .)
    -               reduce using rule 106 (factor -> func_llamada .)
    <               reduce using rule 106 (factor -> func_llamada .)
    >               reduce using rule 106 (factor -> func_llamada .)
    EQUAL_TO        reduce using rule 106 (factor -> func_llamada .)
    NOT_EQUAL_TO    reduce using rule 106 (factor -> func_llamada .)
    &               reduce using rule 106 (factor -> func_llamada .)
    |               reduce using rule 106 (factor -> func_llamada .)
    )               reduce using rule 106 (factor -> func_llamada .)
    ,               reduce using rule 106 (factor -> func_llamada .)
    ;               reduce using rule 106 (factor -> func_llamada .)
    TO              reduce using rule 106 (factor -> func_llamada .)
    DO              reduce using rule 106 (factor -> func_llamada .)


state 103

    (83) hyper_exp -> super_exp . hyper_exp_1
    (84) hyper_exp_1 -> . & np_push_operator_stack super_exp
    (85) hyper_exp_1 -> . | np_push_operator_stack super_exp
    (86) hyper_exp_1 -> . epsilon
    (114) epsilon -> .

    &               shift and go to state 130
    |               shift and go to state 133
    )               reduce using rule 114 (epsilon -> .)
    ,               reduce using rule 114 (epsilon -> .)
    ;               reduce using rule 114 (epsilon -> .)
    TO              reduce using rule 114 (epsilon -> .)
    DO              reduce using rule 114 (epsilon -> .)

    hyper_exp_1                    shift and go to state 132
    epsilon                        shift and go to state 131

state 104

    (105) factor -> ( . hyper_exp )
    (83) hyper_exp -> . super_exp hyper_exp_1
    (87) super_exp -> . exp super_exp_1
    (93) exp -> . term exp_1
    (97) term -> . factor term_1
    (103) factor -> . constant
    (104) factor -> . variable
    (105) factor -> . ( hyper_exp )
    (106) factor -> . func_llamada
    (107) constant -> . VAL_INT np_push_const_int
    (108) constant -> . VAL_FLOAT np_push_const_float
    (109) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 104
    VAL_INT         shift and go to state 114
    VAL_FLOAT       shift and go to state 110
    VAL_CHAR        shift and go to state 111
    ID              shift and go to state 105

    super_exp                      shift and go to state 103
    term                           shift and go to state 113
    hyper_exp                      shift and go to state 134
    constant                       shift and go to state 107
    exp                            shift and go to state 109
    func_llamada                   shift and go to state 102
    factor                         shift and go to state 106
    variable                       shift and go to state 112

state 105

    (9) variable -> ID . np_single_var_process
    (49) func_llamada -> ID . np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (113) np_single_var_process -> . epsilon
    (50) np_fc_1 -> . epsilon
    (114) epsilon -> .

    *               reduce using rule 114 (epsilon -> .)
    /               reduce using rule 114 (epsilon -> .)
    +               reduce using rule 114 (epsilon -> .)
    -               reduce using rule 114 (epsilon -> .)
    <               reduce using rule 114 (epsilon -> .)
    >               reduce using rule 114 (epsilon -> .)
    EQUAL_TO        reduce using rule 114 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 114 (epsilon -> .)
    &               reduce using rule 114 (epsilon -> .)
    |               reduce using rule 114 (epsilon -> .)
    )               reduce using rule 114 (epsilon -> .)
    ,               reduce using rule 114 (epsilon -> .)
    ;               reduce using rule 114 (epsilon -> .)
    TO              reduce using rule 114 (epsilon -> .)
    DO              reduce using rule 114 (epsilon -> .)
    (               reduce using rule 114 (epsilon -> .)

    np_fc_1                        shift and go to state 91
    np_single_var_process          shift and go to state 89
    epsilon                        shift and go to state 135

state 106

    (97) term -> factor . term_1
    (98) term_1 -> . * np_push_operator_stack factor
    (99) term_1 -> . / np_push_operator_stack factor
    (100) term_1 -> . epsilon
    (114) epsilon -> .

    *               shift and go to state 137
    /               shift and go to state 138
    +               reduce using rule 114 (epsilon -> .)
    -               reduce using rule 114 (epsilon -> .)
    <               reduce using rule 114 (epsilon -> .)
    >               reduce using rule 114 (epsilon -> .)
    EQUAL_TO        reduce using rule 114 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 114 (epsilon -> .)
    &               reduce using rule 114 (epsilon -> .)
    |               reduce using rule 114 (epsilon -> .)
    )               reduce using rule 114 (epsilon -> .)
    ,               reduce using rule 114 (epsilon -> .)
    ;               reduce using rule 114 (epsilon -> .)
    TO              reduce using rule 114 (epsilon -> .)
    DO              reduce using rule 114 (epsilon -> .)

    term_1                         shift and go to state 139
    epsilon                        shift and go to state 136

state 107

    (103) factor -> constant .

    *               reduce using rule 103 (factor -> constant .)
    /               reduce using rule 103 (factor -> constant .)
    +               reduce using rule 103 (factor -> constant .)
    -               reduce using rule 103 (factor -> constant .)
    <               reduce using rule 103 (factor -> constant .)
    >               reduce using rule 103 (factor -> constant .)
    EQUAL_TO        reduce using rule 103 (factor -> constant .)
    NOT_EQUAL_TO    reduce using rule 103 (factor -> constant .)
    &               reduce using rule 103 (factor -> constant .)
    |               reduce using rule 103 (factor -> constant .)
    )               reduce using rule 103 (factor -> constant .)
    ,               reduce using rule 103 (factor -> constant .)
    ;               reduce using rule 103 (factor -> constant .)
    TO              reduce using rule 103 (factor -> constant .)
    DO              reduce using rule 103 (factor -> constant .)


state 108

    (59) func_return -> RETURN ( hyper_exp . ) ;

    )               shift and go to state 140


state 109

    (87) super_exp -> exp . super_exp_1
    (88) super_exp_1 -> . < np_push_operator_stack exp
    (89) super_exp_1 -> . > np_push_operator_stack exp
    (90) super_exp_1 -> . EQUAL_TO np_push_operator_stack exp
    (91) super_exp_1 -> . NOT_EQUAL_TO np_push_operator_stack exp
    (92) super_exp_1 -> . epsilon
    (114) epsilon -> .

    <               shift and go to state 145
    >               shift and go to state 146
    EQUAL_TO        shift and go to state 141
    NOT_EQUAL_TO    shift and go to state 142
    &               reduce using rule 114 (epsilon -> .)
    |               reduce using rule 114 (epsilon -> .)
    )               reduce using rule 114 (epsilon -> .)
    ,               reduce using rule 114 (epsilon -> .)
    ;               reduce using rule 114 (epsilon -> .)
    TO              reduce using rule 114 (epsilon -> .)
    DO              reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 143
    super_exp_1                    shift and go to state 144

state 110

    (108) constant -> VAL_FLOAT . np_push_const_float
    (111) np_push_const_float -> . epsilon
    (114) epsilon -> .

    *               reduce using rule 114 (epsilon -> .)
    /               reduce using rule 114 (epsilon -> .)
    +               reduce using rule 114 (epsilon -> .)
    -               reduce using rule 114 (epsilon -> .)
    <               reduce using rule 114 (epsilon -> .)
    >               reduce using rule 114 (epsilon -> .)
    EQUAL_TO        reduce using rule 114 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 114 (epsilon -> .)
    &               reduce using rule 114 (epsilon -> .)
    |               reduce using rule 114 (epsilon -> .)
    )               reduce using rule 114 (epsilon -> .)
    ,               reduce using rule 114 (epsilon -> .)
    ;               reduce using rule 114 (epsilon -> .)
    TO              reduce using rule 114 (epsilon -> .)
    DO              reduce using rule 114 (epsilon -> .)

    np_push_const_float            shift and go to state 147
    epsilon                        shift and go to state 148

state 111

    (109) constant -> VAL_CHAR . np_push_const_char
    (112) np_push_const_char -> . epsilon
    (114) epsilon -> .

    *               reduce using rule 114 (epsilon -> .)
    /               reduce using rule 114 (epsilon -> .)
    +               reduce using rule 114 (epsilon -> .)
    -               reduce using rule 114 (epsilon -> .)
    <               reduce using rule 114 (epsilon -> .)
    >               reduce using rule 114 (epsilon -> .)
    EQUAL_TO        reduce using rule 114 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 114 (epsilon -> .)
    &               reduce using rule 114 (epsilon -> .)
    |               reduce using rule 114 (epsilon -> .)
    )               reduce using rule 114 (epsilon -> .)
    ,               reduce using rule 114 (epsilon -> .)
    ;               reduce using rule 114 (epsilon -> .)
    TO              reduce using rule 114 (epsilon -> .)
    DO              reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 149
    np_push_const_char             shift and go to state 150

state 112

    (104) factor -> variable .

    *               reduce using rule 104 (factor -> variable .)
    /               reduce using rule 104 (factor -> variable .)
    +               reduce using rule 104 (factor -> variable .)
    -               reduce using rule 104 (factor -> variable .)
    <               reduce using rule 104 (factor -> variable .)
    >               reduce using rule 104 (factor -> variable .)
    EQUAL_TO        reduce using rule 104 (factor -> variable .)
    NOT_EQUAL_TO    reduce using rule 104 (factor -> variable .)
    &               reduce using rule 104 (factor -> variable .)
    |               reduce using rule 104 (factor -> variable .)
    )               reduce using rule 104 (factor -> variable .)
    ,               reduce using rule 104 (factor -> variable .)
    ;               reduce using rule 104 (factor -> variable .)
    TO              reduce using rule 104 (factor -> variable .)
    DO              reduce using rule 104 (factor -> variable .)


state 113

    (93) exp -> term . exp_1
    (94) exp_1 -> . + np_push_operator_stack term
    (95) exp_1 -> . - np_push_operator_stack term
    (96) exp_1 -> . epsilon
    (114) epsilon -> .

    +               shift and go to state 152
    -               shift and go to state 153
    <               reduce using rule 114 (epsilon -> .)
    >               reduce using rule 114 (epsilon -> .)
    EQUAL_TO        reduce using rule 114 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 114 (epsilon -> .)
    &               reduce using rule 114 (epsilon -> .)
    |               reduce using rule 114 (epsilon -> .)
    )               reduce using rule 114 (epsilon -> .)
    ,               reduce using rule 114 (epsilon -> .)
    ;               reduce using rule 114 (epsilon -> .)
    TO              reduce using rule 114 (epsilon -> .)
    DO              reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 151
    exp_1                          shift and go to state 154

state 114

    (107) constant -> VAL_INT . np_push_const_int
    (110) np_push_const_int -> . epsilon
    (114) epsilon -> .

    *               reduce using rule 114 (epsilon -> .)
    /               reduce using rule 114 (epsilon -> .)
    +               reduce using rule 114 (epsilon -> .)
    -               reduce using rule 114 (epsilon -> .)
    <               reduce using rule 114 (epsilon -> .)
    >               reduce using rule 114 (epsilon -> .)
    EQUAL_TO        reduce using rule 114 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 114 (epsilon -> .)
    &               reduce using rule 114 (epsilon -> .)
    |               reduce using rule 114 (epsilon -> .)
    )               reduce using rule 114 (epsilon -> .)
    ,               reduce using rule 114 (epsilon -> .)
    ;               reduce using rule 114 (epsilon -> .)
    TO              reduce using rule 114 (epsilon -> .)
    DO              reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 155
    np_push_const_int              shift and go to state 156

state 115

    (61) variable_loop -> variable . np_add_to_input_counter variable_loop_1
    (64) np_add_to_input_counter -> . epsilon
    (114) epsilon -> .

    ,               reduce using rule 114 (epsilon -> .)
    )               reduce using rule 114 (epsilon -> .)

    np_add_to_input_counter        shift and go to state 157
    epsilon                        shift and go to state 158

state 116

    (60) read -> READ ( variable_loop . ) ;

    )               shift and go to state 159


state 117

    (75) condicional -> WHILE np_cond_1 ( . hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (83) hyper_exp -> . super_exp hyper_exp_1
    (87) super_exp -> . exp super_exp_1
    (93) exp -> . term exp_1
    (97) term -> . factor term_1
    (103) factor -> . constant
    (104) factor -> . variable
    (105) factor -> . ( hyper_exp )
    (106) factor -> . func_llamada
    (107) constant -> . VAL_INT np_push_const_int
    (108) constant -> . VAL_FLOAT np_push_const_float
    (109) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 104
    VAL_INT         shift and go to state 114
    VAL_FLOAT       shift and go to state 110
    VAL_CHAR        shift and go to state 111
    ID              shift and go to state 105

    constant                       shift and go to state 107
    func_llamada                   shift and go to state 102
    super_exp                      shift and go to state 103
    factor                         shift and go to state 106
    hyper_exp                      shift and go to state 160
    exp                            shift and go to state 109
    term                           shift and go to state 113
    variable                       shift and go to state 112

state 118

    (6) np_fin_total -> epsilon .

    $end            reduce using rule 6 (np_fin_total -> epsilon .)


state 119

    (4) main -> MAIN np_prep_main ( ) { loop_estatuto } np_fin_total .

    $end            reduce using rule 4 (main -> MAIN np_prep_main ( ) { loop_estatuto } np_fin_total .)


state 120

    (49) func_llamada -> ID np_fc_1 ( . np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (101) np_push_operator_stack -> . epsilon
    (114) epsilon -> .

    (               reduce using rule 114 (epsilon -> .)
    VAL_INT         reduce using rule 114 (epsilon -> .)
    VAL_FLOAT       reduce using rule 114 (epsilon -> .)
    VAL_CHAR        reduce using rule 114 (epsilon -> .)
    ID              reduce using rule 114 (epsilon -> .)
    )               reduce using rule 114 (epsilon -> .)

    np_push_operator_stack         shift and go to state 161
    epsilon                        shift and go to state 162

state 121

    (79) no_condicional -> FOR variable = . hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }
    (83) hyper_exp -> . super_exp hyper_exp_1
    (87) super_exp -> . exp super_exp_1
    (93) exp -> . term exp_1
    (97) term -> . factor term_1
    (103) factor -> . constant
    (104) factor -> . variable
    (105) factor -> . ( hyper_exp )
    (106) factor -> . func_llamada
    (107) constant -> . VAL_INT np_push_const_int
    (108) constant -> . VAL_FLOAT np_push_const_float
    (109) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 104
    VAL_INT         shift and go to state 114
    VAL_FLOAT       shift and go to state 110
    VAL_CHAR        shift and go to state 111
    ID              shift and go to state 105

    constant                       shift and go to state 107
    func_llamada                   shift and go to state 102
    super_exp                      shift and go to state 103
    factor                         shift and go to state 106
    hyper_exp                      shift and go to state 163
    exp                            shift and go to state 109
    variable                       shift and go to state 112
    term                           shift and go to state 113

state 122

    (113) np_single_var_process -> epsilon .

    =               reduce using rule 113 (np_single_var_process -> epsilon .)
    ,               reduce using rule 113 (np_single_var_process -> epsilon .)
    )               reduce using rule 113 (np_single_var_process -> epsilon .)


state 123

    (65) write -> WRITE ( hyper_exp_loop . ) ;

    )               shift and go to state 164


state 124

    (55) hyper_exp_loop -> hyper_exp . np_add_to_input_counter hyper_exp_loop_1
    (64) np_add_to_input_counter -> . epsilon
    (114) epsilon -> .

    ,               reduce using rule 114 (epsilon -> .)
    )               reduce using rule 114 (epsilon -> .)

    np_add_to_input_counter        shift and go to state 165
    epsilon                        shift and go to state 158

state 125

    (48) asignacion -> variable = hyper_exp . ;

    ;               shift and go to state 166


state 126

    (66) decision -> IF ( hyper_exp . ) np_decision_1 THEN { loop_estatuto } decision_else

    )               shift and go to state 167


state 127

    (15) loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name np_add_var_to_varstable . loop_var_decl_mismo_tipo
    (15) loop_var_decl_mismo_tipo -> . , ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo
    (16) loop_var_decl_mismo_tipo -> . epsilon
    (114) epsilon -> .

    ,               shift and go to state 55
    ;               reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 54
    loop_var_decl_mismo_tipo       shift and go to state 168

state 128

    (22) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) . ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func

    ;               shift and go to state 169


state 129

    (33) parametro -> tipo ID . np_add_param loop_parametro
    (36) np_add_param -> . epsilon
    (114) epsilon -> .

    ,               reduce using rule 114 (epsilon -> .)
    )               reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 170
    np_add_param                   shift and go to state 171

state 130

    (84) hyper_exp_1 -> & . np_push_operator_stack super_exp
    (101) np_push_operator_stack -> . epsilon
    (114) epsilon -> .

    (               reduce using rule 114 (epsilon -> .)
    VAL_INT         reduce using rule 114 (epsilon -> .)
    VAL_FLOAT       reduce using rule 114 (epsilon -> .)
    VAL_CHAR        reduce using rule 114 (epsilon -> .)
    ID              reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 162
    np_push_operator_stack         shift and go to state 172

state 131

    (86) hyper_exp_1 -> epsilon .

    )               reduce using rule 86 (hyper_exp_1 -> epsilon .)
    ,               reduce using rule 86 (hyper_exp_1 -> epsilon .)
    ;               reduce using rule 86 (hyper_exp_1 -> epsilon .)
    TO              reduce using rule 86 (hyper_exp_1 -> epsilon .)
    DO              reduce using rule 86 (hyper_exp_1 -> epsilon .)


state 132

    (83) hyper_exp -> super_exp hyper_exp_1 .

    ,               reduce using rule 83 (hyper_exp -> super_exp hyper_exp_1 .)
    )               reduce using rule 83 (hyper_exp -> super_exp hyper_exp_1 .)
    ;               reduce using rule 83 (hyper_exp -> super_exp hyper_exp_1 .)
    TO              reduce using rule 83 (hyper_exp -> super_exp hyper_exp_1 .)
    DO              reduce using rule 83 (hyper_exp -> super_exp hyper_exp_1 .)


state 133

    (85) hyper_exp_1 -> | . np_push_operator_stack super_exp
    (101) np_push_operator_stack -> . epsilon
    (114) epsilon -> .

    (               reduce using rule 114 (epsilon -> .)
    VAL_INT         reduce using rule 114 (epsilon -> .)
    VAL_FLOAT       reduce using rule 114 (epsilon -> .)
    VAL_CHAR        reduce using rule 114 (epsilon -> .)
    ID              reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 162
    np_push_operator_stack         shift and go to state 173

state 134

    (105) factor -> ( hyper_exp . )

    )               shift and go to state 174


state 135

    (113) np_single_var_process -> epsilon .
    (50) np_fc_1 -> epsilon .

    *               reduce using rule 113 (np_single_var_process -> epsilon .)
    /               reduce using rule 113 (np_single_var_process -> epsilon .)
    +               reduce using rule 113 (np_single_var_process -> epsilon .)
    -               reduce using rule 113 (np_single_var_process -> epsilon .)
    <               reduce using rule 113 (np_single_var_process -> epsilon .)
    >               reduce using rule 113 (np_single_var_process -> epsilon .)
    EQUAL_TO        reduce using rule 113 (np_single_var_process -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 113 (np_single_var_process -> epsilon .)
    &               reduce using rule 113 (np_single_var_process -> epsilon .)
    |               reduce using rule 113 (np_single_var_process -> epsilon .)
    )               reduce using rule 113 (np_single_var_process -> epsilon .)
    ,               reduce using rule 113 (np_single_var_process -> epsilon .)
    ;               reduce using rule 113 (np_single_var_process -> epsilon .)
    TO              reduce using rule 113 (np_single_var_process -> epsilon .)
    DO              reduce using rule 113 (np_single_var_process -> epsilon .)
    (               reduce using rule 50 (np_fc_1 -> epsilon .)


state 136

    (100) term_1 -> epsilon .

    +               reduce using rule 100 (term_1 -> epsilon .)
    -               reduce using rule 100 (term_1 -> epsilon .)
    <               reduce using rule 100 (term_1 -> epsilon .)
    >               reduce using rule 100 (term_1 -> epsilon .)
    EQUAL_TO        reduce using rule 100 (term_1 -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 100 (term_1 -> epsilon .)
    &               reduce using rule 100 (term_1 -> epsilon .)
    |               reduce using rule 100 (term_1 -> epsilon .)
    )               reduce using rule 100 (term_1 -> epsilon .)
    ,               reduce using rule 100 (term_1 -> epsilon .)
    ;               reduce using rule 100 (term_1 -> epsilon .)
    TO              reduce using rule 100 (term_1 -> epsilon .)
    DO              reduce using rule 100 (term_1 -> epsilon .)


state 137

    (98) term_1 -> * . np_push_operator_stack factor
    (101) np_push_operator_stack -> . epsilon
    (114) epsilon -> .

    (               reduce using rule 114 (epsilon -> .)
    VAL_INT         reduce using rule 114 (epsilon -> .)
    VAL_FLOAT       reduce using rule 114 (epsilon -> .)
    VAL_CHAR        reduce using rule 114 (epsilon -> .)
    ID              reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 162
    np_push_operator_stack         shift and go to state 175

state 138

    (99) term_1 -> / . np_push_operator_stack factor
    (101) np_push_operator_stack -> . epsilon
    (114) epsilon -> .

    (               reduce using rule 114 (epsilon -> .)
    VAL_INT         reduce using rule 114 (epsilon -> .)
    VAL_FLOAT       reduce using rule 114 (epsilon -> .)
    VAL_CHAR        reduce using rule 114 (epsilon -> .)
    ID              reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 162
    np_push_operator_stack         shift and go to state 176

state 139

    (97) term -> factor term_1 .

    +               reduce using rule 97 (term -> factor term_1 .)
    -               reduce using rule 97 (term -> factor term_1 .)
    &               reduce using rule 97 (term -> factor term_1 .)
    |               reduce using rule 97 (term -> factor term_1 .)
    )               reduce using rule 97 (term -> factor term_1 .)
    ,               reduce using rule 97 (term -> factor term_1 .)
    ;               reduce using rule 97 (term -> factor term_1 .)
    TO              reduce using rule 97 (term -> factor term_1 .)
    DO              reduce using rule 97 (term -> factor term_1 .)
    <               reduce using rule 97 (term -> factor term_1 .)
    >               reduce using rule 97 (term -> factor term_1 .)
    EQUAL_TO        reduce using rule 97 (term -> factor term_1 .)
    NOT_EQUAL_TO    reduce using rule 97 (term -> factor term_1 .)


state 140

    (59) func_return -> RETURN ( hyper_exp ) . ;

    ;               shift and go to state 177


state 141

    (90) super_exp_1 -> EQUAL_TO . np_push_operator_stack exp
    (101) np_push_operator_stack -> . epsilon
    (114) epsilon -> .

    (               reduce using rule 114 (epsilon -> .)
    VAL_INT         reduce using rule 114 (epsilon -> .)
    VAL_FLOAT       reduce using rule 114 (epsilon -> .)
    VAL_CHAR        reduce using rule 114 (epsilon -> .)
    ID              reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 162
    np_push_operator_stack         shift and go to state 178

state 142

    (91) super_exp_1 -> NOT_EQUAL_TO . np_push_operator_stack exp
    (101) np_push_operator_stack -> . epsilon
    (114) epsilon -> .

    (               reduce using rule 114 (epsilon -> .)
    VAL_INT         reduce using rule 114 (epsilon -> .)
    VAL_FLOAT       reduce using rule 114 (epsilon -> .)
    VAL_CHAR        reduce using rule 114 (epsilon -> .)
    ID              reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 162
    np_push_operator_stack         shift and go to state 179

state 143

    (92) super_exp_1 -> epsilon .

    &               reduce using rule 92 (super_exp_1 -> epsilon .)
    |               reduce using rule 92 (super_exp_1 -> epsilon .)
    )               reduce using rule 92 (super_exp_1 -> epsilon .)
    ,               reduce using rule 92 (super_exp_1 -> epsilon .)
    ;               reduce using rule 92 (super_exp_1 -> epsilon .)
    TO              reduce using rule 92 (super_exp_1 -> epsilon .)
    DO              reduce using rule 92 (super_exp_1 -> epsilon .)


state 144

    (87) super_exp -> exp super_exp_1 .

    &               reduce using rule 87 (super_exp -> exp super_exp_1 .)
    |               reduce using rule 87 (super_exp -> exp super_exp_1 .)
    TO              reduce using rule 87 (super_exp -> exp super_exp_1 .)
    )               reduce using rule 87 (super_exp -> exp super_exp_1 .)
    ;               reduce using rule 87 (super_exp -> exp super_exp_1 .)
    ,               reduce using rule 87 (super_exp -> exp super_exp_1 .)
    DO              reduce using rule 87 (super_exp -> exp super_exp_1 .)


state 145

    (88) super_exp_1 -> < . np_push_operator_stack exp
    (101) np_push_operator_stack -> . epsilon
    (114) epsilon -> .

    (               reduce using rule 114 (epsilon -> .)
    VAL_INT         reduce using rule 114 (epsilon -> .)
    VAL_FLOAT       reduce using rule 114 (epsilon -> .)
    VAL_CHAR        reduce using rule 114 (epsilon -> .)
    ID              reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 162
    np_push_operator_stack         shift and go to state 180

state 146

    (89) super_exp_1 -> > . np_push_operator_stack exp
    (101) np_push_operator_stack -> . epsilon
    (114) epsilon -> .

    (               reduce using rule 114 (epsilon -> .)
    VAL_INT         reduce using rule 114 (epsilon -> .)
    VAL_FLOAT       reduce using rule 114 (epsilon -> .)
    VAL_CHAR        reduce using rule 114 (epsilon -> .)
    ID              reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 162
    np_push_operator_stack         shift and go to state 181

state 147

    (108) constant -> VAL_FLOAT np_push_const_float .

    *               reduce using rule 108 (constant -> VAL_FLOAT np_push_const_float .)
    /               reduce using rule 108 (constant -> VAL_FLOAT np_push_const_float .)
    +               reduce using rule 108 (constant -> VAL_FLOAT np_push_const_float .)
    -               reduce using rule 108 (constant -> VAL_FLOAT np_push_const_float .)
    &               reduce using rule 108 (constant -> VAL_FLOAT np_push_const_float .)
    |               reduce using rule 108 (constant -> VAL_FLOAT np_push_const_float .)
    )               reduce using rule 108 (constant -> VAL_FLOAT np_push_const_float .)
    ,               reduce using rule 108 (constant -> VAL_FLOAT np_push_const_float .)
    ;               reduce using rule 108 (constant -> VAL_FLOAT np_push_const_float .)
    TO              reduce using rule 108 (constant -> VAL_FLOAT np_push_const_float .)
    DO              reduce using rule 108 (constant -> VAL_FLOAT np_push_const_float .)
    <               reduce using rule 108 (constant -> VAL_FLOAT np_push_const_float .)
    >               reduce using rule 108 (constant -> VAL_FLOAT np_push_const_float .)
    EQUAL_TO        reduce using rule 108 (constant -> VAL_FLOAT np_push_const_float .)
    NOT_EQUAL_TO    reduce using rule 108 (constant -> VAL_FLOAT np_push_const_float .)


state 148

    (111) np_push_const_float -> epsilon .

    *               reduce using rule 111 (np_push_const_float -> epsilon .)
    /               reduce using rule 111 (np_push_const_float -> epsilon .)
    +               reduce using rule 111 (np_push_const_float -> epsilon .)
    -               reduce using rule 111 (np_push_const_float -> epsilon .)
    <               reduce using rule 111 (np_push_const_float -> epsilon .)
    >               reduce using rule 111 (np_push_const_float -> epsilon .)
    EQUAL_TO        reduce using rule 111 (np_push_const_float -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 111 (np_push_const_float -> epsilon .)
    &               reduce using rule 111 (np_push_const_float -> epsilon .)
    |               reduce using rule 111 (np_push_const_float -> epsilon .)
    )               reduce using rule 111 (np_push_const_float -> epsilon .)
    ,               reduce using rule 111 (np_push_const_float -> epsilon .)
    ;               reduce using rule 111 (np_push_const_float -> epsilon .)
    TO              reduce using rule 111 (np_push_const_float -> epsilon .)
    DO              reduce using rule 111 (np_push_const_float -> epsilon .)


state 149

    (112) np_push_const_char -> epsilon .

    *               reduce using rule 112 (np_push_const_char -> epsilon .)
    /               reduce using rule 112 (np_push_const_char -> epsilon .)
    +               reduce using rule 112 (np_push_const_char -> epsilon .)
    -               reduce using rule 112 (np_push_const_char -> epsilon .)
    <               reduce using rule 112 (np_push_const_char -> epsilon .)
    >               reduce using rule 112 (np_push_const_char -> epsilon .)
    EQUAL_TO        reduce using rule 112 (np_push_const_char -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 112 (np_push_const_char -> epsilon .)
    &               reduce using rule 112 (np_push_const_char -> epsilon .)
    |               reduce using rule 112 (np_push_const_char -> epsilon .)
    )               reduce using rule 112 (np_push_const_char -> epsilon .)
    ,               reduce using rule 112 (np_push_const_char -> epsilon .)
    ;               reduce using rule 112 (np_push_const_char -> epsilon .)
    TO              reduce using rule 112 (np_push_const_char -> epsilon .)
    DO              reduce using rule 112 (np_push_const_char -> epsilon .)


state 150

    (109) constant -> VAL_CHAR np_push_const_char .

    *               reduce using rule 109 (constant -> VAL_CHAR np_push_const_char .)
    /               reduce using rule 109 (constant -> VAL_CHAR np_push_const_char .)
    +               reduce using rule 109 (constant -> VAL_CHAR np_push_const_char .)
    -               reduce using rule 109 (constant -> VAL_CHAR np_push_const_char .)
    &               reduce using rule 109 (constant -> VAL_CHAR np_push_const_char .)
    |               reduce using rule 109 (constant -> VAL_CHAR np_push_const_char .)
    )               reduce using rule 109 (constant -> VAL_CHAR np_push_const_char .)
    ,               reduce using rule 109 (constant -> VAL_CHAR np_push_const_char .)
    ;               reduce using rule 109 (constant -> VAL_CHAR np_push_const_char .)
    TO              reduce using rule 109 (constant -> VAL_CHAR np_push_const_char .)
    DO              reduce using rule 109 (constant -> VAL_CHAR np_push_const_char .)
    <               reduce using rule 109 (constant -> VAL_CHAR np_push_const_char .)
    >               reduce using rule 109 (constant -> VAL_CHAR np_push_const_char .)
    EQUAL_TO        reduce using rule 109 (constant -> VAL_CHAR np_push_const_char .)
    NOT_EQUAL_TO    reduce using rule 109 (constant -> VAL_CHAR np_push_const_char .)


state 151

    (96) exp_1 -> epsilon .

    <               reduce using rule 96 (exp_1 -> epsilon .)
    >               reduce using rule 96 (exp_1 -> epsilon .)
    EQUAL_TO        reduce using rule 96 (exp_1 -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 96 (exp_1 -> epsilon .)
    &               reduce using rule 96 (exp_1 -> epsilon .)
    |               reduce using rule 96 (exp_1 -> epsilon .)
    )               reduce using rule 96 (exp_1 -> epsilon .)
    ,               reduce using rule 96 (exp_1 -> epsilon .)
    ;               reduce using rule 96 (exp_1 -> epsilon .)
    TO              reduce using rule 96 (exp_1 -> epsilon .)
    DO              reduce using rule 96 (exp_1 -> epsilon .)


state 152

    (94) exp_1 -> + . np_push_operator_stack term
    (101) np_push_operator_stack -> . epsilon
    (114) epsilon -> .

    (               reduce using rule 114 (epsilon -> .)
    VAL_INT         reduce using rule 114 (epsilon -> .)
    VAL_FLOAT       reduce using rule 114 (epsilon -> .)
    VAL_CHAR        reduce using rule 114 (epsilon -> .)
    ID              reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 162
    np_push_operator_stack         shift and go to state 182

state 153

    (95) exp_1 -> - . np_push_operator_stack term
    (101) np_push_operator_stack -> . epsilon
    (114) epsilon -> .

    (               reduce using rule 114 (epsilon -> .)
    VAL_INT         reduce using rule 114 (epsilon -> .)
    VAL_FLOAT       reduce using rule 114 (epsilon -> .)
    VAL_CHAR        reduce using rule 114 (epsilon -> .)
    ID              reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 162
    np_push_operator_stack         shift and go to state 183

state 154

    (93) exp -> term exp_1 .

    <               reduce using rule 93 (exp -> term exp_1 .)
    >               reduce using rule 93 (exp -> term exp_1 .)
    EQUAL_TO        reduce using rule 93 (exp -> term exp_1 .)
    NOT_EQUAL_TO    reduce using rule 93 (exp -> term exp_1 .)
    &               reduce using rule 93 (exp -> term exp_1 .)
    |               reduce using rule 93 (exp -> term exp_1 .)
    )               reduce using rule 93 (exp -> term exp_1 .)
    ,               reduce using rule 93 (exp -> term exp_1 .)
    ;               reduce using rule 93 (exp -> term exp_1 .)
    TO              reduce using rule 93 (exp -> term exp_1 .)
    DO              reduce using rule 93 (exp -> term exp_1 .)


state 155

    (110) np_push_const_int -> epsilon .

    *               reduce using rule 110 (np_push_const_int -> epsilon .)
    /               reduce using rule 110 (np_push_const_int -> epsilon .)
    +               reduce using rule 110 (np_push_const_int -> epsilon .)
    -               reduce using rule 110 (np_push_const_int -> epsilon .)
    <               reduce using rule 110 (np_push_const_int -> epsilon .)
    >               reduce using rule 110 (np_push_const_int -> epsilon .)
    EQUAL_TO        reduce using rule 110 (np_push_const_int -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 110 (np_push_const_int -> epsilon .)
    &               reduce using rule 110 (np_push_const_int -> epsilon .)
    |               reduce using rule 110 (np_push_const_int -> epsilon .)
    )               reduce using rule 110 (np_push_const_int -> epsilon .)
    ,               reduce using rule 110 (np_push_const_int -> epsilon .)
    ;               reduce using rule 110 (np_push_const_int -> epsilon .)
    TO              reduce using rule 110 (np_push_const_int -> epsilon .)
    DO              reduce using rule 110 (np_push_const_int -> epsilon .)


state 156

    (107) constant -> VAL_INT np_push_const_int .

    *               reduce using rule 107 (constant -> VAL_INT np_push_const_int .)
    /               reduce using rule 107 (constant -> VAL_INT np_push_const_int .)
    +               reduce using rule 107 (constant -> VAL_INT np_push_const_int .)
    -               reduce using rule 107 (constant -> VAL_INT np_push_const_int .)
    &               reduce using rule 107 (constant -> VAL_INT np_push_const_int .)
    |               reduce using rule 107 (constant -> VAL_INT np_push_const_int .)
    )               reduce using rule 107 (constant -> VAL_INT np_push_const_int .)
    ,               reduce using rule 107 (constant -> VAL_INT np_push_const_int .)
    ;               reduce using rule 107 (constant -> VAL_INT np_push_const_int .)
    TO              reduce using rule 107 (constant -> VAL_INT np_push_const_int .)
    DO              reduce using rule 107 (constant -> VAL_INT np_push_const_int .)
    <               reduce using rule 107 (constant -> VAL_INT np_push_const_int .)
    >               reduce using rule 107 (constant -> VAL_INT np_push_const_int .)
    EQUAL_TO        reduce using rule 107 (constant -> VAL_INT np_push_const_int .)
    NOT_EQUAL_TO    reduce using rule 107 (constant -> VAL_INT np_push_const_int .)


state 157

    (61) variable_loop -> variable np_add_to_input_counter . variable_loop_1
    (62) variable_loop_1 -> . , variable np_add_to_input_counter variable_loop_1
    (63) variable_loop_1 -> . epsilon
    (114) epsilon -> .

    ,               shift and go to state 185
    )               reduce using rule 114 (epsilon -> .)

    variable_loop_1                shift and go to state 184
    epsilon                        shift and go to state 186

state 158

    (64) np_add_to_input_counter -> epsilon .

    ,               reduce using rule 64 (np_add_to_input_counter -> epsilon .)
    )               reduce using rule 64 (np_add_to_input_counter -> epsilon .)


state 159

    (60) read -> READ ( variable_loop ) . ;

    ;               shift and go to state 187


state 160

    (75) condicional -> WHILE np_cond_1 ( hyper_exp . ) np_cond_2 DO { loop_estatuto } np_cond_3

    )               shift and go to state 188


state 161

    (49) func_llamada -> ID np_fc_1 ( np_push_operator_stack . argumento_loop ) np_pop_operator_stack
    (51) argumento_loop -> . hyper_exp np_fc_2 argumento_loop_1
    (52) argumento_loop -> . epsilon
    (83) hyper_exp -> . super_exp hyper_exp_1
    (114) epsilon -> .
    (87) super_exp -> . exp super_exp_1
    (93) exp -> . term exp_1
    (97) term -> . factor term_1
    (103) factor -> . constant
    (104) factor -> . variable
    (105) factor -> . ( hyper_exp )
    (106) factor -> . func_llamada
    (107) constant -> . VAL_INT np_push_const_int
    (108) constant -> . VAL_FLOAT np_push_const_float
    (109) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    )               reduce using rule 114 (epsilon -> .)
    (               shift and go to state 104
    VAL_INT         shift and go to state 114
    VAL_FLOAT       shift and go to state 110
    VAL_CHAR        shift and go to state 111
    ID              shift and go to state 105

    constant                       shift and go to state 107
    argumento_loop                 shift and go to state 189
    func_llamada                   shift and go to state 102
    super_exp                      shift and go to state 103
    factor                         shift and go to state 106
    hyper_exp                      shift and go to state 190
    epsilon                        shift and go to state 191
    variable                       shift and go to state 112
    term                           shift and go to state 113
    exp                            shift and go to state 109

state 162

    (101) np_push_operator_stack -> epsilon .

    (               reduce using rule 101 (np_push_operator_stack -> epsilon .)
    VAL_INT         reduce using rule 101 (np_push_operator_stack -> epsilon .)
    VAL_FLOAT       reduce using rule 101 (np_push_operator_stack -> epsilon .)
    VAL_CHAR        reduce using rule 101 (np_push_operator_stack -> epsilon .)
    ID              reduce using rule 101 (np_push_operator_stack -> epsilon .)
    )               reduce using rule 101 (np_push_operator_stack -> epsilon .)


state 163

    (79) no_condicional -> FOR variable = hyper_exp . np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }
    (80) np_for_1 -> . epsilon
    (114) epsilon -> .

    TO              reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 193
    np_for_1                       shift and go to state 192

state 164

    (65) write -> WRITE ( hyper_exp_loop ) . ;

    ;               shift and go to state 194


state 165

    (55) hyper_exp_loop -> hyper_exp np_add_to_input_counter . hyper_exp_loop_1
    (56) hyper_exp_loop_1 -> . , hyper_exp np_add_to_input_counter hyper_exp_loop_1
    (57) hyper_exp_loop_1 -> . epsilon
    (114) epsilon -> .

    ,               shift and go to state 195
    )               reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 196
    hyper_exp_loop_1               shift and go to state 197

state 166

    (48) asignacion -> variable = hyper_exp ; .

    ID              reduce using rule 48 (asignacion -> variable = hyper_exp ; .)
    READ            reduce using rule 48 (asignacion -> variable = hyper_exp ; .)
    WRITE           reduce using rule 48 (asignacion -> variable = hyper_exp ; .)
    IF              reduce using rule 48 (asignacion -> variable = hyper_exp ; .)
    RETURN          reduce using rule 48 (asignacion -> variable = hyper_exp ; .)
    WHILE           reduce using rule 48 (asignacion -> variable = hyper_exp ; .)
    FOR             reduce using rule 48 (asignacion -> variable = hyper_exp ; .)
    }               reduce using rule 48 (asignacion -> variable = hyper_exp ; .)


state 167

    (66) decision -> IF ( hyper_exp ) . np_decision_1 THEN { loop_estatuto } decision_else
    (69) np_decision_1 -> . epsilon
    (114) epsilon -> .

    THEN            reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 199
    np_decision_1                  shift and go to state 198

state 168

    (15) loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo .

    ;               reduce using rule 15 (loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo .)


state 169

    (22) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; . var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func
    (7) var_opcional -> . var_declaracion
    (8) var_opcional -> . epsilon
    (10) var_declaracion -> . VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion
    (114) epsilon -> .

    VARS            shift and go to state 9
    {               reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 11
    var_declaracion                shift and go to state 10
    var_opcional                   shift and go to state 200

state 170

    (36) np_add_param -> epsilon .

    ,               reduce using rule 36 (np_add_param -> epsilon .)
    )               reduce using rule 36 (np_add_param -> epsilon .)


state 171

    (33) parametro -> tipo ID np_add_param . loop_parametro
    (34) loop_parametro -> . , tipo ID np_add_param loop_parametro
    (35) loop_parametro -> . epsilon
    (114) epsilon -> .

    ,               shift and go to state 202
    )               reduce using rule 114 (epsilon -> .)

    loop_parametro                 shift and go to state 203
    epsilon                        shift and go to state 201

state 172

    (84) hyper_exp_1 -> & np_push_operator_stack . super_exp
    (87) super_exp -> . exp super_exp_1
    (93) exp -> . term exp_1
    (97) term -> . factor term_1
    (103) factor -> . constant
    (104) factor -> . variable
    (105) factor -> . ( hyper_exp )
    (106) factor -> . func_llamada
    (107) constant -> . VAL_INT np_push_const_int
    (108) constant -> . VAL_FLOAT np_push_const_float
    (109) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 104
    VAL_INT         shift and go to state 114
    VAL_FLOAT       shift and go to state 110
    VAL_CHAR        shift and go to state 111
    ID              shift and go to state 105

    super_exp                      shift and go to state 204
    term                           shift and go to state 113
    constant                       shift and go to state 107
    exp                            shift and go to state 109
    factor                         shift and go to state 106
    variable                       shift and go to state 112
    func_llamada                   shift and go to state 102

state 173

    (85) hyper_exp_1 -> | np_push_operator_stack . super_exp
    (87) super_exp -> . exp super_exp_1
    (93) exp -> . term exp_1
    (97) term -> . factor term_1
    (103) factor -> . constant
    (104) factor -> . variable
    (105) factor -> . ( hyper_exp )
    (106) factor -> . func_llamada
    (107) constant -> . VAL_INT np_push_const_int
    (108) constant -> . VAL_FLOAT np_push_const_float
    (109) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 104
    VAL_INT         shift and go to state 114
    VAL_FLOAT       shift and go to state 110
    VAL_CHAR        shift and go to state 111
    ID              shift and go to state 105

    super_exp                      shift and go to state 205
    term                           shift and go to state 113
    constant                       shift and go to state 107
    exp                            shift and go to state 109
    factor                         shift and go to state 106
    variable                       shift and go to state 112
    func_llamada                   shift and go to state 102

state 174

    (105) factor -> ( hyper_exp ) .

    *               reduce using rule 105 (factor -> ( hyper_exp ) .)
    /               reduce using rule 105 (factor -> ( hyper_exp ) .)
    +               reduce using rule 105 (factor -> ( hyper_exp ) .)
    -               reduce using rule 105 (factor -> ( hyper_exp ) .)
    <               reduce using rule 105 (factor -> ( hyper_exp ) .)
    >               reduce using rule 105 (factor -> ( hyper_exp ) .)
    EQUAL_TO        reduce using rule 105 (factor -> ( hyper_exp ) .)
    NOT_EQUAL_TO    reduce using rule 105 (factor -> ( hyper_exp ) .)
    &               reduce using rule 105 (factor -> ( hyper_exp ) .)
    |               reduce using rule 105 (factor -> ( hyper_exp ) .)
    )               reduce using rule 105 (factor -> ( hyper_exp ) .)
    ,               reduce using rule 105 (factor -> ( hyper_exp ) .)
    ;               reduce using rule 105 (factor -> ( hyper_exp ) .)
    TO              reduce using rule 105 (factor -> ( hyper_exp ) .)
    DO              reduce using rule 105 (factor -> ( hyper_exp ) .)


state 175

    (98) term_1 -> * np_push_operator_stack . factor
    (103) factor -> . constant
    (104) factor -> . variable
    (105) factor -> . ( hyper_exp )
    (106) factor -> . func_llamada
    (107) constant -> . VAL_INT np_push_const_int
    (108) constant -> . VAL_FLOAT np_push_const_float
    (109) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 104
    VAL_INT         shift and go to state 114
    VAL_FLOAT       shift and go to state 110
    VAL_CHAR        shift and go to state 111
    ID              shift and go to state 105

    constant                       shift and go to state 107
    factor                         shift and go to state 206
    variable                       shift and go to state 112
    func_llamada                   shift and go to state 102

state 176

    (99) term_1 -> / np_push_operator_stack . factor
    (103) factor -> . constant
    (104) factor -> . variable
    (105) factor -> . ( hyper_exp )
    (106) factor -> . func_llamada
    (107) constant -> . VAL_INT np_push_const_int
    (108) constant -> . VAL_FLOAT np_push_const_float
    (109) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 104
    VAL_INT         shift and go to state 114
    VAL_FLOAT       shift and go to state 110
    VAL_CHAR        shift and go to state 111
    ID              shift and go to state 105

    constant                       shift and go to state 107
    factor                         shift and go to state 207
    variable                       shift and go to state 112
    func_llamada                   shift and go to state 102

state 177

    (59) func_return -> RETURN ( hyper_exp ) ; .

    ID              reduce using rule 59 (func_return -> RETURN ( hyper_exp ) ; .)
    READ            reduce using rule 59 (func_return -> RETURN ( hyper_exp ) ; .)
    WRITE           reduce using rule 59 (func_return -> RETURN ( hyper_exp ) ; .)
    IF              reduce using rule 59 (func_return -> RETURN ( hyper_exp ) ; .)
    RETURN          reduce using rule 59 (func_return -> RETURN ( hyper_exp ) ; .)
    WHILE           reduce using rule 59 (func_return -> RETURN ( hyper_exp ) ; .)
    FOR             reduce using rule 59 (func_return -> RETURN ( hyper_exp ) ; .)
    }               reduce using rule 59 (func_return -> RETURN ( hyper_exp ) ; .)


state 178

    (90) super_exp_1 -> EQUAL_TO np_push_operator_stack . exp
    (93) exp -> . term exp_1
    (97) term -> . factor term_1
    (103) factor -> . constant
    (104) factor -> . variable
    (105) factor -> . ( hyper_exp )
    (106) factor -> . func_llamada
    (107) constant -> . VAL_INT np_push_const_int
    (108) constant -> . VAL_FLOAT np_push_const_float
    (109) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 104
    VAL_INT         shift and go to state 114
    VAL_FLOAT       shift and go to state 110
    VAL_CHAR        shift and go to state 111
    ID              shift and go to state 105

    term                           shift and go to state 113
    constant                       shift and go to state 107
    exp                            shift and go to state 208
    factor                         shift and go to state 106
    variable                       shift and go to state 112
    func_llamada                   shift and go to state 102

state 179

    (91) super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack . exp
    (93) exp -> . term exp_1
    (97) term -> . factor term_1
    (103) factor -> . constant
    (104) factor -> . variable
    (105) factor -> . ( hyper_exp )
    (106) factor -> . func_llamada
    (107) constant -> . VAL_INT np_push_const_int
    (108) constant -> . VAL_FLOAT np_push_const_float
    (109) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 104
    VAL_INT         shift and go to state 114
    VAL_FLOAT       shift and go to state 110
    VAL_CHAR        shift and go to state 111
    ID              shift and go to state 105

    term                           shift and go to state 113
    constant                       shift and go to state 107
    exp                            shift and go to state 209
    factor                         shift and go to state 106
    variable                       shift and go to state 112
    func_llamada                   shift and go to state 102

state 180

    (88) super_exp_1 -> < np_push_operator_stack . exp
    (93) exp -> . term exp_1
    (97) term -> . factor term_1
    (103) factor -> . constant
    (104) factor -> . variable
    (105) factor -> . ( hyper_exp )
    (106) factor -> . func_llamada
    (107) constant -> . VAL_INT np_push_const_int
    (108) constant -> . VAL_FLOAT np_push_const_float
    (109) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 104
    VAL_INT         shift and go to state 114
    VAL_FLOAT       shift and go to state 110
    VAL_CHAR        shift and go to state 111
    ID              shift and go to state 105

    term                           shift and go to state 113
    constant                       shift and go to state 107
    exp                            shift and go to state 210
    factor                         shift and go to state 106
    variable                       shift and go to state 112
    func_llamada                   shift and go to state 102

state 181

    (89) super_exp_1 -> > np_push_operator_stack . exp
    (93) exp -> . term exp_1
    (97) term -> . factor term_1
    (103) factor -> . constant
    (104) factor -> . variable
    (105) factor -> . ( hyper_exp )
    (106) factor -> . func_llamada
    (107) constant -> . VAL_INT np_push_const_int
    (108) constant -> . VAL_FLOAT np_push_const_float
    (109) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 104
    VAL_INT         shift and go to state 114
    VAL_FLOAT       shift and go to state 110
    VAL_CHAR        shift and go to state 111
    ID              shift and go to state 105

    term                           shift and go to state 113
    constant                       shift and go to state 107
    exp                            shift and go to state 211
    factor                         shift and go to state 106
    variable                       shift and go to state 112
    func_llamada                   shift and go to state 102

state 182

    (94) exp_1 -> + np_push_operator_stack . term
    (97) term -> . factor term_1
    (103) factor -> . constant
    (104) factor -> . variable
    (105) factor -> . ( hyper_exp )
    (106) factor -> . func_llamada
    (107) constant -> . VAL_INT np_push_const_int
    (108) constant -> . VAL_FLOAT np_push_const_float
    (109) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 104
    VAL_INT         shift and go to state 114
    VAL_FLOAT       shift and go to state 110
    VAL_CHAR        shift and go to state 111
    ID              shift and go to state 105

    term                           shift and go to state 212
    constant                       shift and go to state 107
    factor                         shift and go to state 106
    variable                       shift and go to state 112
    func_llamada                   shift and go to state 102

state 183

    (95) exp_1 -> - np_push_operator_stack . term
    (97) term -> . factor term_1
    (103) factor -> . constant
    (104) factor -> . variable
    (105) factor -> . ( hyper_exp )
    (106) factor -> . func_llamada
    (107) constant -> . VAL_INT np_push_const_int
    (108) constant -> . VAL_FLOAT np_push_const_float
    (109) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 104
    VAL_INT         shift and go to state 114
    VAL_FLOAT       shift and go to state 110
    VAL_CHAR        shift and go to state 111
    ID              shift and go to state 105

    term                           shift and go to state 213
    constant                       shift and go to state 107
    factor                         shift and go to state 106
    variable                       shift and go to state 112
    func_llamada                   shift and go to state 102

state 184

    (61) variable_loop -> variable np_add_to_input_counter variable_loop_1 .

    )               reduce using rule 61 (variable_loop -> variable np_add_to_input_counter variable_loop_1 .)


state 185

    (62) variable_loop_1 -> , . variable np_add_to_input_counter variable_loop_1
    (9) variable -> . ID np_single_var_process

    ID              shift and go to state 93

    variable                       shift and go to state 214

state 186

    (63) variable_loop_1 -> epsilon .

    )               reduce using rule 63 (variable_loop_1 -> epsilon .)


state 187

    (60) read -> READ ( variable_loop ) ; .

    ID              reduce using rule 60 (read -> READ ( variable_loop ) ; .)
    READ            reduce using rule 60 (read -> READ ( variable_loop ) ; .)
    WRITE           reduce using rule 60 (read -> READ ( variable_loop ) ; .)
    IF              reduce using rule 60 (read -> READ ( variable_loop ) ; .)
    RETURN          reduce using rule 60 (read -> READ ( variable_loop ) ; .)
    WHILE           reduce using rule 60 (read -> READ ( variable_loop ) ; .)
    FOR             reduce using rule 60 (read -> READ ( variable_loop ) ; .)
    }               reduce using rule 60 (read -> READ ( variable_loop ) ; .)


state 188

    (75) condicional -> WHILE np_cond_1 ( hyper_exp ) . np_cond_2 DO { loop_estatuto } np_cond_3
    (77) np_cond_2 -> . epsilon
    (114) epsilon -> .

    DO              reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 216
    np_cond_2                      shift and go to state 215

state 189

    (49) func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop . ) np_pop_operator_stack

    )               shift and go to state 217


state 190

    (51) argumento_loop -> hyper_exp . np_fc_2 argumento_loop_1
    (58) np_fc_2 -> . epsilon
    (114) epsilon -> .

    ,               reduce using rule 114 (epsilon -> .)
    )               reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 218
    np_fc_2                        shift and go to state 219

state 191

    (52) argumento_loop -> epsilon .

    )               reduce using rule 52 (argumento_loop -> epsilon .)


state 192

    (79) no_condicional -> FOR variable = hyper_exp np_for_1 . TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    TO              shift and go to state 220


state 193

    (80) np_for_1 -> epsilon .

    TO              reduce using rule 80 (np_for_1 -> epsilon .)


state 194

    (65) write -> WRITE ( hyper_exp_loop ) ; .

    ID              reduce using rule 65 (write -> WRITE ( hyper_exp_loop ) ; .)
    READ            reduce using rule 65 (write -> WRITE ( hyper_exp_loop ) ; .)
    WRITE           reduce using rule 65 (write -> WRITE ( hyper_exp_loop ) ; .)
    IF              reduce using rule 65 (write -> WRITE ( hyper_exp_loop ) ; .)
    RETURN          reduce using rule 65 (write -> WRITE ( hyper_exp_loop ) ; .)
    WHILE           reduce using rule 65 (write -> WRITE ( hyper_exp_loop ) ; .)
    FOR             reduce using rule 65 (write -> WRITE ( hyper_exp_loop ) ; .)
    }               reduce using rule 65 (write -> WRITE ( hyper_exp_loop ) ; .)


state 195

    (56) hyper_exp_loop_1 -> , . hyper_exp np_add_to_input_counter hyper_exp_loop_1
    (83) hyper_exp -> . super_exp hyper_exp_1
    (87) super_exp -> . exp super_exp_1
    (93) exp -> . term exp_1
    (97) term -> . factor term_1
    (103) factor -> . constant
    (104) factor -> . variable
    (105) factor -> . ( hyper_exp )
    (106) factor -> . func_llamada
    (107) constant -> . VAL_INT np_push_const_int
    (108) constant -> . VAL_FLOAT np_push_const_float
    (109) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 104
    VAL_INT         shift and go to state 114
    VAL_FLOAT       shift and go to state 110
    VAL_CHAR        shift and go to state 111
    ID              shift and go to state 105

    constant                       shift and go to state 107
    func_llamada                   shift and go to state 102
    super_exp                      shift and go to state 103
    factor                         shift and go to state 106
    hyper_exp                      shift and go to state 221
    exp                            shift and go to state 109
    variable                       shift and go to state 112
    term                           shift and go to state 113

state 196

    (57) hyper_exp_loop_1 -> epsilon .

    )               reduce using rule 57 (hyper_exp_loop_1 -> epsilon .)


state 197

    (55) hyper_exp_loop -> hyper_exp np_add_to_input_counter hyper_exp_loop_1 .

    )               reduce using rule 55 (hyper_exp_loop -> hyper_exp np_add_to_input_counter hyper_exp_loop_1 .)


state 198

    (66) decision -> IF ( hyper_exp ) np_decision_1 . THEN { loop_estatuto } decision_else

    THEN            shift and go to state 222


state 199

    (69) np_decision_1 -> epsilon .

    THEN            reduce using rule 69 (np_decision_1 -> epsilon .)


state 200

    (22) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional . np_save_curr_func_quad { loop_estatuto } np_kill_func
    (28) np_save_curr_func_quad -> . epsilon
    (114) epsilon -> .

    {               reduce using rule 114 (epsilon -> .)

    np_save_curr_func_quad         shift and go to state 223
    epsilon                        shift and go to state 224

state 201

    (35) loop_parametro -> epsilon .

    )               reduce using rule 35 (loop_parametro -> epsilon .)


state 202

    (34) loop_parametro -> , . tipo ID np_add_param loop_parametro
    (37) tipo -> . INT
    (38) tipo -> . FLOAT
    (39) tipo -> . CHAR
    (40) tipo -> . BOOL

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 24

    tipo                           shift and go to state 225

state 203

    (33) parametro -> tipo ID np_add_param loop_parametro .

    )               reduce using rule 33 (parametro -> tipo ID np_add_param loop_parametro .)


state 204

    (84) hyper_exp_1 -> & np_push_operator_stack super_exp .

    )               reduce using rule 84 (hyper_exp_1 -> & np_push_operator_stack super_exp .)
    ,               reduce using rule 84 (hyper_exp_1 -> & np_push_operator_stack super_exp .)
    ;               reduce using rule 84 (hyper_exp_1 -> & np_push_operator_stack super_exp .)
    TO              reduce using rule 84 (hyper_exp_1 -> & np_push_operator_stack super_exp .)
    DO              reduce using rule 84 (hyper_exp_1 -> & np_push_operator_stack super_exp .)


state 205

    (85) hyper_exp_1 -> | np_push_operator_stack super_exp .

    )               reduce using rule 85 (hyper_exp_1 -> | np_push_operator_stack super_exp .)
    ,               reduce using rule 85 (hyper_exp_1 -> | np_push_operator_stack super_exp .)
    ;               reduce using rule 85 (hyper_exp_1 -> | np_push_operator_stack super_exp .)
    TO              reduce using rule 85 (hyper_exp_1 -> | np_push_operator_stack super_exp .)
    DO              reduce using rule 85 (hyper_exp_1 -> | np_push_operator_stack super_exp .)


state 206

    (98) term_1 -> * np_push_operator_stack factor .

    +               reduce using rule 98 (term_1 -> * np_push_operator_stack factor .)
    -               reduce using rule 98 (term_1 -> * np_push_operator_stack factor .)
    <               reduce using rule 98 (term_1 -> * np_push_operator_stack factor .)
    >               reduce using rule 98 (term_1 -> * np_push_operator_stack factor .)
    EQUAL_TO        reduce using rule 98 (term_1 -> * np_push_operator_stack factor .)
    NOT_EQUAL_TO    reduce using rule 98 (term_1 -> * np_push_operator_stack factor .)
    &               reduce using rule 98 (term_1 -> * np_push_operator_stack factor .)
    |               reduce using rule 98 (term_1 -> * np_push_operator_stack factor .)
    )               reduce using rule 98 (term_1 -> * np_push_operator_stack factor .)
    ,               reduce using rule 98 (term_1 -> * np_push_operator_stack factor .)
    ;               reduce using rule 98 (term_1 -> * np_push_operator_stack factor .)
    TO              reduce using rule 98 (term_1 -> * np_push_operator_stack factor .)
    DO              reduce using rule 98 (term_1 -> * np_push_operator_stack factor .)


state 207

    (99) term_1 -> / np_push_operator_stack factor .

    +               reduce using rule 99 (term_1 -> / np_push_operator_stack factor .)
    -               reduce using rule 99 (term_1 -> / np_push_operator_stack factor .)
    <               reduce using rule 99 (term_1 -> / np_push_operator_stack factor .)
    >               reduce using rule 99 (term_1 -> / np_push_operator_stack factor .)
    EQUAL_TO        reduce using rule 99 (term_1 -> / np_push_operator_stack factor .)
    NOT_EQUAL_TO    reduce using rule 99 (term_1 -> / np_push_operator_stack factor .)
    &               reduce using rule 99 (term_1 -> / np_push_operator_stack factor .)
    |               reduce using rule 99 (term_1 -> / np_push_operator_stack factor .)
    )               reduce using rule 99 (term_1 -> / np_push_operator_stack factor .)
    ,               reduce using rule 99 (term_1 -> / np_push_operator_stack factor .)
    ;               reduce using rule 99 (term_1 -> / np_push_operator_stack factor .)
    TO              reduce using rule 99 (term_1 -> / np_push_operator_stack factor .)
    DO              reduce using rule 99 (term_1 -> / np_push_operator_stack factor .)


state 208

    (90) super_exp_1 -> EQUAL_TO np_push_operator_stack exp .

    &               reduce using rule 90 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    |               reduce using rule 90 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    )               reduce using rule 90 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    ,               reduce using rule 90 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    ;               reduce using rule 90 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    TO              reduce using rule 90 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)
    DO              reduce using rule 90 (super_exp_1 -> EQUAL_TO np_push_operator_stack exp .)


state 209

    (91) super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .

    &               reduce using rule 91 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    |               reduce using rule 91 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    )               reduce using rule 91 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    ,               reduce using rule 91 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    ;               reduce using rule 91 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    TO              reduce using rule 91 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)
    DO              reduce using rule 91 (super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp .)


state 210

    (88) super_exp_1 -> < np_push_operator_stack exp .

    &               reduce using rule 88 (super_exp_1 -> < np_push_operator_stack exp .)
    |               reduce using rule 88 (super_exp_1 -> < np_push_operator_stack exp .)
    )               reduce using rule 88 (super_exp_1 -> < np_push_operator_stack exp .)
    ,               reduce using rule 88 (super_exp_1 -> < np_push_operator_stack exp .)
    ;               reduce using rule 88 (super_exp_1 -> < np_push_operator_stack exp .)
    TO              reduce using rule 88 (super_exp_1 -> < np_push_operator_stack exp .)
    DO              reduce using rule 88 (super_exp_1 -> < np_push_operator_stack exp .)


state 211

    (89) super_exp_1 -> > np_push_operator_stack exp .

    &               reduce using rule 89 (super_exp_1 -> > np_push_operator_stack exp .)
    |               reduce using rule 89 (super_exp_1 -> > np_push_operator_stack exp .)
    )               reduce using rule 89 (super_exp_1 -> > np_push_operator_stack exp .)
    ,               reduce using rule 89 (super_exp_1 -> > np_push_operator_stack exp .)
    ;               reduce using rule 89 (super_exp_1 -> > np_push_operator_stack exp .)
    TO              reduce using rule 89 (super_exp_1 -> > np_push_operator_stack exp .)
    DO              reduce using rule 89 (super_exp_1 -> > np_push_operator_stack exp .)


state 212

    (94) exp_1 -> + np_push_operator_stack term .

    <               reduce using rule 94 (exp_1 -> + np_push_operator_stack term .)
    >               reduce using rule 94 (exp_1 -> + np_push_operator_stack term .)
    EQUAL_TO        reduce using rule 94 (exp_1 -> + np_push_operator_stack term .)
    NOT_EQUAL_TO    reduce using rule 94 (exp_1 -> + np_push_operator_stack term .)
    &               reduce using rule 94 (exp_1 -> + np_push_operator_stack term .)
    |               reduce using rule 94 (exp_1 -> + np_push_operator_stack term .)
    )               reduce using rule 94 (exp_1 -> + np_push_operator_stack term .)
    ,               reduce using rule 94 (exp_1 -> + np_push_operator_stack term .)
    ;               reduce using rule 94 (exp_1 -> + np_push_operator_stack term .)
    TO              reduce using rule 94 (exp_1 -> + np_push_operator_stack term .)
    DO              reduce using rule 94 (exp_1 -> + np_push_operator_stack term .)


state 213

    (95) exp_1 -> - np_push_operator_stack term .

    <               reduce using rule 95 (exp_1 -> - np_push_operator_stack term .)
    >               reduce using rule 95 (exp_1 -> - np_push_operator_stack term .)
    EQUAL_TO        reduce using rule 95 (exp_1 -> - np_push_operator_stack term .)
    NOT_EQUAL_TO    reduce using rule 95 (exp_1 -> - np_push_operator_stack term .)
    &               reduce using rule 95 (exp_1 -> - np_push_operator_stack term .)
    |               reduce using rule 95 (exp_1 -> - np_push_operator_stack term .)
    )               reduce using rule 95 (exp_1 -> - np_push_operator_stack term .)
    ,               reduce using rule 95 (exp_1 -> - np_push_operator_stack term .)
    ;               reduce using rule 95 (exp_1 -> - np_push_operator_stack term .)
    TO              reduce using rule 95 (exp_1 -> - np_push_operator_stack term .)
    DO              reduce using rule 95 (exp_1 -> - np_push_operator_stack term .)


state 214

    (62) variable_loop_1 -> , variable . np_add_to_input_counter variable_loop_1
    (64) np_add_to_input_counter -> . epsilon
    (114) epsilon -> .

    ,               reduce using rule 114 (epsilon -> .)
    )               reduce using rule 114 (epsilon -> .)

    np_add_to_input_counter        shift and go to state 226
    epsilon                        shift and go to state 158

state 215

    (75) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 . DO { loop_estatuto } np_cond_3

    DO              shift and go to state 227


state 216

    (77) np_cond_2 -> epsilon .

    DO              reduce using rule 77 (np_cond_2 -> epsilon .)


state 217

    (49) func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) . np_pop_operator_stack
    (102) np_pop_operator_stack -> . epsilon
    (114) epsilon -> .

    ;               reduce using rule 114 (epsilon -> .)
    *               reduce using rule 114 (epsilon -> .)
    /               reduce using rule 114 (epsilon -> .)
    +               reduce using rule 114 (epsilon -> .)
    -               reduce using rule 114 (epsilon -> .)
    <               reduce using rule 114 (epsilon -> .)
    >               reduce using rule 114 (epsilon -> .)
    EQUAL_TO        reduce using rule 114 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 114 (epsilon -> .)
    &               reduce using rule 114 (epsilon -> .)
    |               reduce using rule 114 (epsilon -> .)
    )               reduce using rule 114 (epsilon -> .)
    ,               reduce using rule 114 (epsilon -> .)
    TO              reduce using rule 114 (epsilon -> .)
    DO              reduce using rule 114 (epsilon -> .)

    np_pop_operator_stack          shift and go to state 228
    epsilon                        shift and go to state 229

state 218

    (58) np_fc_2 -> epsilon .

    ,               reduce using rule 58 (np_fc_2 -> epsilon .)
    )               reduce using rule 58 (np_fc_2 -> epsilon .)


state 219

    (51) argumento_loop -> hyper_exp np_fc_2 . argumento_loop_1
    (53) argumento_loop_1 -> . , hyper_exp np_fc_2 argumento_loop_1
    (54) argumento_loop_1 -> . epsilon
    (114) epsilon -> .

    ,               shift and go to state 232
    )               reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 230
    argumento_loop_1               shift and go to state 231

state 220

    (79) no_condicional -> FOR variable = hyper_exp np_for_1 TO . hyper_exp np_for_2 DO np_for_3 { loop_estatuto }
    (83) hyper_exp -> . super_exp hyper_exp_1
    (87) super_exp -> . exp super_exp_1
    (93) exp -> . term exp_1
    (97) term -> . factor term_1
    (103) factor -> . constant
    (104) factor -> . variable
    (105) factor -> . ( hyper_exp )
    (106) factor -> . func_llamada
    (107) constant -> . VAL_INT np_push_const_int
    (108) constant -> . VAL_FLOAT np_push_const_float
    (109) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 104
    VAL_INT         shift and go to state 114
    VAL_FLOAT       shift and go to state 110
    VAL_CHAR        shift and go to state 111
    ID              shift and go to state 105

    constant                       shift and go to state 107
    func_llamada                   shift and go to state 102
    super_exp                      shift and go to state 103
    factor                         shift and go to state 106
    hyper_exp                      shift and go to state 233
    exp                            shift and go to state 109
    variable                       shift and go to state 112
    term                           shift and go to state 113

state 221

    (56) hyper_exp_loop_1 -> , hyper_exp . np_add_to_input_counter hyper_exp_loop_1
    (64) np_add_to_input_counter -> . epsilon
    (114) epsilon -> .

    ,               reduce using rule 114 (epsilon -> .)
    )               reduce using rule 114 (epsilon -> .)

    np_add_to_input_counter        shift and go to state 234
    epsilon                        shift and go to state 158

state 222

    (66) decision -> IF ( hyper_exp ) np_decision_1 THEN . { loop_estatuto } decision_else

    {               shift and go to state 235


state 223

    (22) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad . { loop_estatuto } np_kill_func

    {               shift and go to state 236


state 224

    (28) np_save_curr_func_quad -> epsilon .

    {               reduce using rule 28 (np_save_curr_func_quad -> epsilon .)


state 225

    (34) loop_parametro -> , tipo . ID np_add_param loop_parametro

    ID              shift and go to state 237


state 226

    (62) variable_loop_1 -> , variable np_add_to_input_counter . variable_loop_1
    (62) variable_loop_1 -> . , variable np_add_to_input_counter variable_loop_1
    (63) variable_loop_1 -> . epsilon
    (114) epsilon -> .

    ,               shift and go to state 185
    )               reduce using rule 114 (epsilon -> .)

    variable_loop_1                shift and go to state 238
    epsilon                        shift and go to state 186

state 227

    (75) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO . { loop_estatuto } np_cond_3

    {               shift and go to state 239


state 228

    (49) func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .

    *               reduce using rule 49 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    /               reduce using rule 49 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    +               reduce using rule 49 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    -               reduce using rule 49 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    <               reduce using rule 49 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    >               reduce using rule 49 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    EQUAL_TO        reduce using rule 49 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    NOT_EQUAL_TO    reduce using rule 49 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    &               reduce using rule 49 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    |               reduce using rule 49 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    TO              reduce using rule 49 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    )               reduce using rule 49 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    ,               reduce using rule 49 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    ;               reduce using rule 49 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)
    DO              reduce using rule 49 (func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack .)


state 229

    (102) np_pop_operator_stack -> epsilon .

    ;               reduce using rule 102 (np_pop_operator_stack -> epsilon .)
    *               reduce using rule 102 (np_pop_operator_stack -> epsilon .)
    /               reduce using rule 102 (np_pop_operator_stack -> epsilon .)
    +               reduce using rule 102 (np_pop_operator_stack -> epsilon .)
    -               reduce using rule 102 (np_pop_operator_stack -> epsilon .)
    <               reduce using rule 102 (np_pop_operator_stack -> epsilon .)
    >               reduce using rule 102 (np_pop_operator_stack -> epsilon .)
    EQUAL_TO        reduce using rule 102 (np_pop_operator_stack -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 102 (np_pop_operator_stack -> epsilon .)
    &               reduce using rule 102 (np_pop_operator_stack -> epsilon .)
    |               reduce using rule 102 (np_pop_operator_stack -> epsilon .)
    )               reduce using rule 102 (np_pop_operator_stack -> epsilon .)
    ,               reduce using rule 102 (np_pop_operator_stack -> epsilon .)
    TO              reduce using rule 102 (np_pop_operator_stack -> epsilon .)
    DO              reduce using rule 102 (np_pop_operator_stack -> epsilon .)


state 230

    (54) argumento_loop_1 -> epsilon .

    )               reduce using rule 54 (argumento_loop_1 -> epsilon .)


state 231

    (51) argumento_loop -> hyper_exp np_fc_2 argumento_loop_1 .

    )               reduce using rule 51 (argumento_loop -> hyper_exp np_fc_2 argumento_loop_1 .)


state 232

    (53) argumento_loop_1 -> , . hyper_exp np_fc_2 argumento_loop_1
    (83) hyper_exp -> . super_exp hyper_exp_1
    (87) super_exp -> . exp super_exp_1
    (93) exp -> . term exp_1
    (97) term -> . factor term_1
    (103) factor -> . constant
    (104) factor -> . variable
    (105) factor -> . ( hyper_exp )
    (106) factor -> . func_llamada
    (107) constant -> . VAL_INT np_push_const_int
    (108) constant -> . VAL_FLOAT np_push_const_float
    (109) constant -> . VAL_CHAR np_push_const_char
    (9) variable -> . ID np_single_var_process
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack

    (               shift and go to state 104
    VAL_INT         shift and go to state 114
    VAL_FLOAT       shift and go to state 110
    VAL_CHAR        shift and go to state 111
    ID              shift and go to state 105

    constant                       shift and go to state 107
    func_llamada                   shift and go to state 102
    super_exp                      shift and go to state 103
    factor                         shift and go to state 106
    hyper_exp                      shift and go to state 240
    exp                            shift and go to state 109
    variable                       shift and go to state 112
    term                           shift and go to state 113

state 233

    (79) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp . np_for_2 DO np_for_3 { loop_estatuto }
    (81) np_for_2 -> . epsilon
    (114) epsilon -> .

    DO              reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 242
    np_for_2                       shift and go to state 241

state 234

    (56) hyper_exp_loop_1 -> , hyper_exp np_add_to_input_counter . hyper_exp_loop_1
    (56) hyper_exp_loop_1 -> . , hyper_exp np_add_to_input_counter hyper_exp_loop_1
    (57) hyper_exp_loop_1 -> . epsilon
    (114) epsilon -> .

    ,               shift and go to state 195
    )               reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 196
    hyper_exp_loop_1               shift and go to state 243

state 235

    (66) decision -> IF ( hyper_exp ) np_decision_1 THEN { . loop_estatuto } decision_else
    (71) loop_estatuto -> . estatuto loop_estatuto
    (72) loop_estatuto -> . epsilon
    (41) estatuto -> . asignacion
    (42) estatuto -> . func_llamada ;
    (43) estatuto -> . read
    (44) estatuto -> . write
    (45) estatuto -> . decision
    (46) estatuto -> . repeticion
    (47) estatuto -> . func_return
    (114) epsilon -> .
    (48) asignacion -> . variable = hyper_exp ;
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (60) read -> . READ ( variable_loop ) ;
    (65) write -> . WRITE ( hyper_exp_loop ) ;
    (66) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (73) repeticion -> . condicional
    (74) repeticion -> . no_condicional
    (59) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (75) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (79) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 114 (epsilon -> .)
    ID              shift and go to state 65
    READ            shift and go to state 59
    WRITE           shift and go to state 72
    IF              shift and go to state 74
    RETURN          shift and go to state 58
    WHILE           shift and go to state 60
    FOR             shift and go to state 68

    func_llamada                   shift and go to state 61
    loop_estatuto                  shift and go to state 244
    func_return                    shift and go to state 76
    decision                       shift and go to state 63
    estatuto                       shift and go to state 64
    write                          shift and go to state 66
    epsilon                        shift and go to state 70
    read                           shift and go to state 69
    condicional                    shift and go to state 71
    variable                       shift and go to state 73
    no_condicional                 shift and go to state 67
    asignacion                     shift and go to state 75
    repeticion                     shift and go to state 77

state 236

    (22) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { . loop_estatuto } np_kill_func
    (71) loop_estatuto -> . estatuto loop_estatuto
    (72) loop_estatuto -> . epsilon
    (41) estatuto -> . asignacion
    (42) estatuto -> . func_llamada ;
    (43) estatuto -> . read
    (44) estatuto -> . write
    (45) estatuto -> . decision
    (46) estatuto -> . repeticion
    (47) estatuto -> . func_return
    (114) epsilon -> .
    (48) asignacion -> . variable = hyper_exp ;
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (60) read -> . READ ( variable_loop ) ;
    (65) write -> . WRITE ( hyper_exp_loop ) ;
    (66) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (73) repeticion -> . condicional
    (74) repeticion -> . no_condicional
    (59) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (75) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (79) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 114 (epsilon -> .)
    ID              shift and go to state 65
    READ            shift and go to state 59
    WRITE           shift and go to state 72
    IF              shift and go to state 74
    RETURN          shift and go to state 58
    WHILE           shift and go to state 60
    FOR             shift and go to state 68

    func_llamada                   shift and go to state 61
    loop_estatuto                  shift and go to state 245
    func_return                    shift and go to state 76
    decision                       shift and go to state 63
    estatuto                       shift and go to state 64
    write                          shift and go to state 66
    read                           shift and go to state 69
    epsilon                        shift and go to state 70
    condicional                    shift and go to state 71
    variable                       shift and go to state 73
    no_condicional                 shift and go to state 67
    asignacion                     shift and go to state 75
    repeticion                     shift and go to state 77

state 237

    (34) loop_parametro -> , tipo ID . np_add_param loop_parametro
    (36) np_add_param -> . epsilon
    (114) epsilon -> .

    ,               reduce using rule 114 (epsilon -> .)
    )               reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 170
    np_add_param                   shift and go to state 246

state 238

    (62) variable_loop_1 -> , variable np_add_to_input_counter variable_loop_1 .

    )               reduce using rule 62 (variable_loop_1 -> , variable np_add_to_input_counter variable_loop_1 .)


state 239

    (75) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { . loop_estatuto } np_cond_3
    (71) loop_estatuto -> . estatuto loop_estatuto
    (72) loop_estatuto -> . epsilon
    (41) estatuto -> . asignacion
    (42) estatuto -> . func_llamada ;
    (43) estatuto -> . read
    (44) estatuto -> . write
    (45) estatuto -> . decision
    (46) estatuto -> . repeticion
    (47) estatuto -> . func_return
    (114) epsilon -> .
    (48) asignacion -> . variable = hyper_exp ;
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (60) read -> . READ ( variable_loop ) ;
    (65) write -> . WRITE ( hyper_exp_loop ) ;
    (66) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (73) repeticion -> . condicional
    (74) repeticion -> . no_condicional
    (59) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (75) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (79) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 114 (epsilon -> .)
    ID              shift and go to state 65
    READ            shift and go to state 59
    WRITE           shift and go to state 72
    IF              shift and go to state 74
    RETURN          shift and go to state 58
    WHILE           shift and go to state 60
    FOR             shift and go to state 68

    func_llamada                   shift and go to state 61
    loop_estatuto                  shift and go to state 247
    func_return                    shift and go to state 76
    decision                       shift and go to state 63
    estatuto                       shift and go to state 64
    write                          shift and go to state 66
    epsilon                        shift and go to state 70
    read                           shift and go to state 69
    condicional                    shift and go to state 71
    variable                       shift and go to state 73
    no_condicional                 shift and go to state 67
    asignacion                     shift and go to state 75
    repeticion                     shift and go to state 77

state 240

    (53) argumento_loop_1 -> , hyper_exp . np_fc_2 argumento_loop_1
    (58) np_fc_2 -> . epsilon
    (114) epsilon -> .

    ,               reduce using rule 114 (epsilon -> .)
    )               reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 218
    np_fc_2                        shift and go to state 248

state 241

    (79) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 . DO np_for_3 { loop_estatuto }

    DO              shift and go to state 249


state 242

    (81) np_for_2 -> epsilon .

    DO              reduce using rule 81 (np_for_2 -> epsilon .)


state 243

    (56) hyper_exp_loop_1 -> , hyper_exp np_add_to_input_counter hyper_exp_loop_1 .

    )               reduce using rule 56 (hyper_exp_loop_1 -> , hyper_exp np_add_to_input_counter hyper_exp_loop_1 .)


state 244

    (66) decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto . } decision_else

    }               shift and go to state 250


state 245

    (22) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto . } np_kill_func

    }               shift and go to state 251


state 246

    (34) loop_parametro -> , tipo ID np_add_param . loop_parametro
    (34) loop_parametro -> . , tipo ID np_add_param loop_parametro
    (35) loop_parametro -> . epsilon
    (114) epsilon -> .

    ,               shift and go to state 202
    )               reduce using rule 114 (epsilon -> .)

    loop_parametro                 shift and go to state 252
    epsilon                        shift and go to state 201

state 247

    (75) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto . } np_cond_3

    }               shift and go to state 253


state 248

    (53) argumento_loop_1 -> , hyper_exp np_fc_2 . argumento_loop_1
    (53) argumento_loop_1 -> . , hyper_exp np_fc_2 argumento_loop_1
    (54) argumento_loop_1 -> . epsilon
    (114) epsilon -> .

    ,               shift and go to state 232
    )               reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 230
    argumento_loop_1               shift and go to state 254

state 249

    (79) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO . np_for_3 { loop_estatuto }
    (82) np_for_3 -> . epsilon
    (114) epsilon -> .

    {               reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 256
    np_for_3                       shift and go to state 255

state 250

    (66) decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } . decision_else
    (67) decision_else -> . ELSE np_decision_2 { loop_estatuto }
    (68) decision_else -> . epsilon
    (114) epsilon -> .

    ELSE            shift and go to state 258
    ID              reduce using rule 114 (epsilon -> .)
    READ            reduce using rule 114 (epsilon -> .)
    WRITE           reduce using rule 114 (epsilon -> .)
    IF              reduce using rule 114 (epsilon -> .)
    RETURN          reduce using rule 114 (epsilon -> .)
    WHILE           reduce using rule 114 (epsilon -> .)
    FOR             reduce using rule 114 (epsilon -> .)
    }               reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 259
    decision_else                  shift and go to state 257

state 251

    (22) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } . np_kill_func
    (29) np_kill_func -> . epsilon
    (114) epsilon -> .

    FUNCTION        reduce using rule 114 (epsilon -> .)
    MAIN            reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 261
    np_kill_func                   shift and go to state 260

state 252

    (34) loop_parametro -> , tipo ID np_add_param loop_parametro .

    )               reduce using rule 34 (loop_parametro -> , tipo ID np_add_param loop_parametro .)


state 253

    (75) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } . np_cond_3
    (78) np_cond_3 -> . epsilon
    (114) epsilon -> .

    ID              reduce using rule 114 (epsilon -> .)
    READ            reduce using rule 114 (epsilon -> .)
    WRITE           reduce using rule 114 (epsilon -> .)
    IF              reduce using rule 114 (epsilon -> .)
    RETURN          reduce using rule 114 (epsilon -> .)
    WHILE           reduce using rule 114 (epsilon -> .)
    FOR             reduce using rule 114 (epsilon -> .)
    }               reduce using rule 114 (epsilon -> .)

    np_cond_3                      shift and go to state 262
    epsilon                        shift and go to state 263

state 254

    (53) argumento_loop_1 -> , hyper_exp np_fc_2 argumento_loop_1 .

    )               reduce using rule 53 (argumento_loop_1 -> , hyper_exp np_fc_2 argumento_loop_1 .)


state 255

    (79) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 . { loop_estatuto }

    {               shift and go to state 264


state 256

    (82) np_for_3 -> epsilon .

    {               reduce using rule 82 (np_for_3 -> epsilon .)


state 257

    (66) decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .

    ID              reduce using rule 66 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    READ            reduce using rule 66 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    WRITE           reduce using rule 66 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    IF              reduce using rule 66 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    RETURN          reduce using rule 66 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    WHILE           reduce using rule 66 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    FOR             reduce using rule 66 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)
    }               reduce using rule 66 (decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else .)


state 258

    (67) decision_else -> ELSE . np_decision_2 { loop_estatuto }
    (70) np_decision_2 -> . epsilon
    (114) epsilon -> .

    {               reduce using rule 114 (epsilon -> .)

    epsilon                        shift and go to state 265
    np_decision_2                  shift and go to state 266

state 259

    (68) decision_else -> epsilon .

    ID              reduce using rule 68 (decision_else -> epsilon .)
    READ            reduce using rule 68 (decision_else -> epsilon .)
    WRITE           reduce using rule 68 (decision_else -> epsilon .)
    IF              reduce using rule 68 (decision_else -> epsilon .)
    RETURN          reduce using rule 68 (decision_else -> epsilon .)
    WHILE           reduce using rule 68 (decision_else -> epsilon .)
    FOR             reduce using rule 68 (decision_else -> epsilon .)
    }               reduce using rule 68 (decision_else -> epsilon .)


state 260

    (22) func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func .

    FUNCTION        reduce using rule 22 (func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func .)
    MAIN            reduce using rule 22 (func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func .)


state 261

    (29) np_kill_func -> epsilon .

    FUNCTION        reduce using rule 29 (np_kill_func -> epsilon .)
    MAIN            reduce using rule 29 (np_kill_func -> epsilon .)


state 262

    (75) condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .

    ID              reduce using rule 75 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    READ            reduce using rule 75 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    WRITE           reduce using rule 75 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    IF              reduce using rule 75 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    RETURN          reduce using rule 75 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    WHILE           reduce using rule 75 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    FOR             reduce using rule 75 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)
    }               reduce using rule 75 (condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3 .)


state 263

    (78) np_cond_3 -> epsilon .

    ID              reduce using rule 78 (np_cond_3 -> epsilon .)
    READ            reduce using rule 78 (np_cond_3 -> epsilon .)
    WRITE           reduce using rule 78 (np_cond_3 -> epsilon .)
    IF              reduce using rule 78 (np_cond_3 -> epsilon .)
    RETURN          reduce using rule 78 (np_cond_3 -> epsilon .)
    WHILE           reduce using rule 78 (np_cond_3 -> epsilon .)
    FOR             reduce using rule 78 (np_cond_3 -> epsilon .)
    }               reduce using rule 78 (np_cond_3 -> epsilon .)


state 264

    (79) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { . loop_estatuto }
    (71) loop_estatuto -> . estatuto loop_estatuto
    (72) loop_estatuto -> . epsilon
    (41) estatuto -> . asignacion
    (42) estatuto -> . func_llamada ;
    (43) estatuto -> . read
    (44) estatuto -> . write
    (45) estatuto -> . decision
    (46) estatuto -> . repeticion
    (47) estatuto -> . func_return
    (114) epsilon -> .
    (48) asignacion -> . variable = hyper_exp ;
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (60) read -> . READ ( variable_loop ) ;
    (65) write -> . WRITE ( hyper_exp_loop ) ;
    (66) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (73) repeticion -> . condicional
    (74) repeticion -> . no_condicional
    (59) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (75) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (79) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 114 (epsilon -> .)
    ID              shift and go to state 65
    READ            shift and go to state 59
    WRITE           shift and go to state 72
    IF              shift and go to state 74
    RETURN          shift and go to state 58
    WHILE           shift and go to state 60
    FOR             shift and go to state 68

    func_llamada                   shift and go to state 61
    loop_estatuto                  shift and go to state 267
    func_return                    shift and go to state 76
    decision                       shift and go to state 63
    estatuto                       shift and go to state 64
    write                          shift and go to state 66
    epsilon                        shift and go to state 70
    read                           shift and go to state 69
    condicional                    shift and go to state 71
    variable                       shift and go to state 73
    no_condicional                 shift and go to state 67
    asignacion                     shift and go to state 75
    repeticion                     shift and go to state 77

state 265

    (70) np_decision_2 -> epsilon .

    {               reduce using rule 70 (np_decision_2 -> epsilon .)


state 266

    (67) decision_else -> ELSE np_decision_2 . { loop_estatuto }

    {               shift and go to state 268


state 267

    (79) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto . }

    }               shift and go to state 269


state 268

    (67) decision_else -> ELSE np_decision_2 { . loop_estatuto }
    (71) loop_estatuto -> . estatuto loop_estatuto
    (72) loop_estatuto -> . epsilon
    (41) estatuto -> . asignacion
    (42) estatuto -> . func_llamada ;
    (43) estatuto -> . read
    (44) estatuto -> . write
    (45) estatuto -> . decision
    (46) estatuto -> . repeticion
    (47) estatuto -> . func_return
    (114) epsilon -> .
    (48) asignacion -> . variable = hyper_exp ;
    (49) func_llamada -> . ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack
    (60) read -> . READ ( variable_loop ) ;
    (65) write -> . WRITE ( hyper_exp_loop ) ;
    (66) decision -> . IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else
    (73) repeticion -> . condicional
    (74) repeticion -> . no_condicional
    (59) func_return -> . RETURN ( hyper_exp ) ;
    (9) variable -> . ID np_single_var_process
    (75) condicional -> . WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3
    (79) no_condicional -> . FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }

    }               reduce using rule 114 (epsilon -> .)
    ID              shift and go to state 65
    READ            shift and go to state 59
    WRITE           shift and go to state 72
    IF              shift and go to state 74
    RETURN          shift and go to state 58
    WHILE           shift and go to state 60
    FOR             shift and go to state 68

    func_llamada                   shift and go to state 61
    loop_estatuto                  shift and go to state 270
    func_return                    shift and go to state 76
    decision                       shift and go to state 63
    estatuto                       shift and go to state 64
    write                          shift and go to state 66
    epsilon                        shift and go to state 70
    read                           shift and go to state 69
    condicional                    shift and go to state 71
    variable                       shift and go to state 73
    no_condicional                 shift and go to state 67
    asignacion                     shift and go to state 75
    repeticion                     shift and go to state 77

state 269

    (79) no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .

    ID              reduce using rule 79 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    READ            reduce using rule 79 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    WRITE           reduce using rule 79 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    IF              reduce using rule 79 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    RETURN          reduce using rule 79 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    WHILE           reduce using rule 79 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    FOR             reduce using rule 79 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)
    }               reduce using rule 79 (no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto } .)


state 270

    (67) decision_else -> ELSE np_decision_2 { loop_estatuto . }

    }               shift and go to state 271


state 271

    (67) decision_else -> ELSE np_decision_2 { loop_estatuto } .

    ID              reduce using rule 67 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    READ            reduce using rule 67 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    WRITE           reduce using rule 67 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    IF              reduce using rule 67 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    RETURN          reduce using rule 67 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    WHILE           reduce using rule 67 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    FOR             reduce using rule 67 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)
    }               reduce using rule 67 (decision_else -> ELSE np_decision_2 { loop_estatuto } .)

