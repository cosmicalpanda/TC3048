
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "BOOL CHAR DO ELSE EQUAL_TO FLOAT FOR FUNCTION ID IF INT MAIN NOT_EQUAL_TO PRINT PROGRAM READ RETURN STRING THEN TO VAL_CHAR VAL_FLOAT VAL_INT VAL_STRING VARS VOID WHILE WRITE\n    programa : PROGRAM np_program_start ID np_start_dirfunc ';' var_opcional func_programa_loop main   \n    \n    np_program_start : epsilon\n    \n    np_start_dirfunc : epsilon\n    \n    main : MAIN np_prep_main '(' ')' '{' loop_estatuto '}' np_fin_total\n    \n    np_prep_main : epsilon\n    \n    np_fin_total : epsilon\n    \n    var_opcional : var_declaracion\n                 | epsilon\n    \n    variable : ID np_single_var_process\n\n    \n    var_declaracion : VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion\n    \n    np_var_prep : epsilon\n    \n    loop_var_declaracion : var_declaracion_mismo_tipo loop_var_declaracion\n                         | epsilon\n    \n    var_declaracion_mismo_tipo :  tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ';'\n    \n    loop_var_decl_mismo_tipo : ',' ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo\n                  | epsilon\n    \n    np_set_curr_var_type : epsilon\n    \n    np_set_curr_var_name : epsilon\n    \n    np_add_var_to_varstable : epsilon\n    \n    func_programa_loop : func_definicion func_programa_loop\n                       | epsilon\n    \n    func_definicion : FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir '(' np_prep_func_params func_parametro ')' ';' var_opcional np_save_curr_func_quad '{' loop_estatuto '}' np_kill_func\n    \n    func_tipo_retorno : tipo\n                      | VOID\n    \n    np_func_tipo_retorno : epsilon\n    \n    np_func_id : epsilon\n    \n    np_add_to_func_dir : epsilon\n    \n    np_save_curr_func_quad : epsilon\n    \n    np_kill_func : epsilon\n    \n    np_prep_func_params : epsilon\n    \n    func_parametro : parametro\n                   | epsilon\n    \n    parametro : tipo ID np_add_param loop_parametro\n    \n    loop_parametro : ',' tipo ID np_add_param loop_parametro\n                   | epsilon\n    \n    np_add_param : epsilon\n    \n    tipo : INT\n         | FLOAT\n         | CHAR\n         | BOOL\n    \n    estatuto : asignacion \n             | func_llamada ';'\n             | read\n             | write\n             | decision\n             | repeticion\n             | func_return \n    \n    asignacion : variable '=' hyper_exp ';'\n    \n    func_llamada : ID np_fc_1 '(' np_push_operator_stack argumento_loop ')' np_pop_operator_stack\n    \n    np_fc_1 : epsilon\n    \n    argumento_loop : hyper_exp np_fc_2 argumento_loop_1\n                   | epsilon\n    \n    argumento_loop_1 : ',' hyper_exp np_fc_2 argumento_loop_1\n                     | epsilon\n    \n    hyper_exp_loop : hyper_exp np_add_to_input_counter hyper_exp_loop_1\n    \n    hyper_exp_loop_1 : ',' hyper_exp np_add_to_input_counter hyper_exp_loop_1\n                     | epsilon\n    \n    np_fc_2 : epsilon\n    \n    func_return : RETURN '(' hyper_exp ')' ';'\n    \n    read : READ '(' variable_loop ')' ';'\n    \n    variable_loop : variable np_add_to_input_counter variable_loop_1\n    \n    variable_loop_1 : ',' variable np_add_to_input_counter variable_loop_1\n                    | epsilon\n    \n    np_add_to_input_counter : epsilon\n    \n    write : WRITE '(' hyper_exp_loop ')' ';'\n    \n    decision : IF '(' hyper_exp ')' np_decision_1 THEN '{' loop_estatuto '}'  decision_else\n    \n    decision_else : ELSE np_decision_2 '{' loop_estatuto '}' \n                  | epsilon\n    \n    np_decision_1 : epsilon\n    \n    np_decision_2 : epsilon\n    \n    loop_estatuto : estatuto loop_estatuto\n                  | epsilon\n    \n    repeticion : condicional\n               | no_condicional\n    \n    condicional : WHILE np_cond_1 '(' hyper_exp ')' np_cond_2 DO '{' loop_estatuto '}' np_cond_3\n    \n    np_cond_1 : epsilon\n    \n    np_cond_2 : epsilon\n    \n    np_cond_3 : epsilon\n    \n    no_condicional : FOR variable '=' hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 '{' loop_estatuto '}' \n    \n    np_for_1 : epsilon\n    \n    np_for_2 : epsilon\n    \n    np_for_3 : epsilon\n    \n    hyper_exp : super_exp hyper_exp_1\n    \n    hyper_exp_1 : '&' np_push_operator_stack super_exp\n                | '|' np_push_operator_stack super_exp\n                | epsilon\n    \n    super_exp : exp super_exp_1\n    \n    super_exp_1 : '<' np_push_operator_stack exp\n                | '>' np_push_operator_stack exp\n                | EQUAL_TO np_push_operator_stack exp\n                | NOT_EQUAL_TO np_push_operator_stack exp\n                | epsilon\n    \n    exp : term exp_1\n    \n    exp_1 : '+' np_push_operator_stack term\n          | '-' np_push_operator_stack term\n          | epsilon\n    \n    term : factor term_1\n    \n    term_1 : '*' np_push_operator_stack factor \n           | '/' np_push_operator_stack factor\n           | epsilon\n    \n    np_push_operator_stack : epsilon\n    \n    np_pop_operator_stack : epsilon\n    \n    factor : constant\n           | variable\n           | '(' hyper_exp ')'\n           | func_llamada\n    \n    constant : VAL_INT np_push_const_int\n             | VAL_FLOAT np_push_const_float\n             | VAL_CHAR np_push_const_char\n    \n    np_push_const_int : epsilon\n    \n    np_push_const_float : epsilon\n    \n    np_push_const_char : epsilon\n    \n    np_single_var_process : epsilon\n    epsilon : "
    
_lr_action_items = {'DO':([89,102,103,105,106,107,109,110,111,112,113,114,131,132,135,136,139,143,144,147,148,149,150,151,154,155,156,174,188,204,205,206,207,208,209,210,211,212,213,215,216,217,228,229,233,241,242,],[-9,-106,-114,-114,-114,-103,-114,-114,-114,-104,-114,-114,-86,-83,-113,-100,-97,-92,-87,-108,-111,-112,-109,-96,-93,-110,-107,-105,-114,-84,-85,-98,-99,-90,-91,-88,-89,-94,-95,227,-77,-114,-49,-102,-114,249,-81,]),'RETURN':([53,63,64,66,67,69,71,75,76,77,86,166,177,187,194,235,236,239,250,253,257,259,262,263,264,268,269,271,],[58,-45,58,-44,-74,-43,-73,-41,-47,-46,-42,-48,-59,-60,-65,58,58,58,-114,-114,-66,-68,-75,-78,58,58,-79,-67,]),'VARS':([8,169,],[9,9,]),'THEN':([167,198,199,],[-114,222,-69,]),'READ':([53,63,64,66,67,69,71,75,76,77,86,166,177,187,194,235,236,239,250,253,257,259,262,263,264,268,269,271,],[59,-45,59,-44,-74,-43,-73,-41,-47,-46,-42,-48,-59,-60,-65,59,59,59,-114,-114,-66,-68,-75,-78,59,59,-79,-67,]),'VOID':([16,],[26,]),'CHAR':([9,13,14,16,23,34,57,79,80,81,202,],[-114,-11,22,22,22,22,-114,-14,22,-30,22,]),'WHILE':([53,63,64,66,67,69,71,75,76,77,86,166,177,187,194,235,236,239,250,253,257,259,262,263,264,268,269,271,],[60,-45,60,-44,-74,-43,-73,-41,-47,-46,-42,-48,-59,-60,-65,60,60,60,-114,-114,-66,-68,-75,-78,60,60,-79,-67,]),'PROGRAM':([0,],[1,]),'&':([89,102,103,105,106,107,109,110,111,112,113,114,135,136,139,143,144,147,148,149,150,151,154,155,156,174,206,207,208,209,210,211,212,213,217,228,229,],[-9,-106,130,-114,-114,-103,-114,-114,-114,-104,-114,-114,-113,-100,-97,-92,-87,-108,-111,-112,-109,-96,-93,-110,-107,-105,-98,-99,-90,-91,-88,-89,-94,-95,-114,-49,-102,]),')':([43,57,80,81,89,93,98,100,101,102,103,105,106,107,108,109,110,111,112,113,114,115,116,120,122,123,124,126,129,131,132,134,135,136,139,143,144,147,148,149,150,151,154,155,156,157,158,160,161,162,165,170,171,174,184,186,189,190,191,196,197,201,203,204,205,206,207,208,209,210,211,212,213,214,217,218,219,221,226,228,229,230,231,234,237,238,240,243,246,248,252,254,],[48,-114,-114,-30,-9,-114,128,-31,-32,-106,-114,-114,-114,-103,140,-114,-114,-114,-104,-114,-114,-114,159,-114,-113,164,-114,167,-114,-86,-83,174,-113,-100,-97,-92,-87,-108,-111,-112,-109,-96,-93,-110,-107,-114,-64,188,-114,-101,-114,-36,-114,-105,-61,-63,217,-114,-52,-57,-55,-35,-33,-84,-85,-98,-99,-90,-91,-88,-89,-94,-95,-114,-114,-58,-114,-114,-114,-49,-102,-54,-51,-114,-114,-62,-114,-56,-114,-114,-34,-53,]),'(':([29,38,39,42,46,47,51,52,58,59,60,65,72,74,82,84,85,90,91,94,95,96,104,105,117,120,121,130,133,135,137,138,141,142,145,146,152,153,161,162,172,173,175,176,178,179,180,181,182,183,195,220,232,],[-114,43,-5,-114,-26,-114,-27,57,82,83,-114,-114,94,96,104,117,-76,-50,120,104,104,104,104,-114,104,-114,104,-114,-114,-50,-114,-114,-114,-114,-114,-114,-114,-114,104,-101,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'+':([89,102,105,106,107,110,111,112,113,114,135,136,139,147,148,149,150,155,156,174,206,207,217,228,229,],[-9,-106,-114,-114,-103,-114,-114,-104,152,-114,-113,-100,-97,-108,-111,-112,-109,-110,-107,-105,-98,-99,-114,-49,-102,]),'*':([89,102,105,106,107,110,111,112,114,135,147,148,149,150,155,156,174,217,228,229,],[-9,-106,-114,137,-103,-114,-114,-104,-114,-113,-108,-111,-112,-109,-110,-107,-105,-114,-49,-102,]),'-':([89,102,105,106,107,110,111,112,113,114,135,136,139,147,148,149,150,155,156,174,206,207,217,228,229,],[-9,-106,-114,-114,-103,-114,-114,-104,153,-114,-113,-100,-97,-108,-111,-112,-109,-110,-107,-105,-98,-99,-114,-49,-102,]),',':([40,44,45,49,50,78,89,93,97,102,103,105,106,107,109,110,111,112,113,114,115,122,124,127,129,131,132,135,136,139,143,144,147,148,149,150,151,154,155,156,157,158,165,170,171,174,190,204,205,206,207,208,209,210,211,212,213,214,217,218,219,221,226,228,229,234,237,240,246,248,],[-114,-18,-114,55,-19,-114,-9,-114,-114,-106,-114,-114,-114,-103,-114,-114,-114,-104,-114,-114,-114,-113,-114,55,-114,-86,-83,-113,-100,-97,-92,-87,-108,-111,-112,-109,-96,-93,-110,-107,185,-64,195,-36,202,-105,-114,-84,-85,-98,-99,-90,-91,-88,-89,-94,-95,-114,-114,-58,232,-114,185,-49,-102,195,-114,-114,202,232,]),'/':([89,102,105,106,107,110,111,112,114,135,147,148,149,150,155,156,174,217,228,229,],[-9,-106,-114,138,-103,-114,-114,-104,-114,-113,-108,-111,-112,-109,-110,-107,-105,-114,-49,-102,]),'TO':([89,102,103,105,106,107,109,110,111,112,113,114,131,132,135,136,139,143,144,147,148,149,150,151,154,155,156,163,174,192,193,204,205,206,207,208,209,210,211,212,213,217,228,229,],[-9,-106,-114,-114,-114,-103,-114,-114,-114,-104,-114,-114,-86,-83,-113,-100,-97,-92,-87,-108,-111,-112,-109,-96,-93,-110,-107,-114,-105,220,-80,-84,-85,-98,-99,-90,-91,-88,-89,-94,-95,-114,-49,-102,]),';':([5,6,7,40,44,45,49,50,54,56,61,78,89,97,102,103,105,106,107,109,110,111,112,113,114,125,127,128,131,132,135,136,139,140,143,144,147,148,149,150,151,154,155,156,159,164,168,174,204,205,206,207,208,209,210,211,212,213,217,228,229,],[-114,8,-3,-114,-18,-114,-114,-19,-16,79,86,-114,-9,-114,-106,-114,-114,-114,-103,-114,-114,-114,-104,-114,-114,166,-114,169,-86,-83,-113,-100,-97,177,-92,-87,-108,-111,-112,-109,-96,-93,-110,-107,187,194,-15,-105,-84,-85,-98,-99,-90,-91,-88,-89,-94,-95,-114,-49,-102,]),'=':([65,73,89,90,92,93,122,],[-114,95,-9,-113,121,-114,-113,]),'<':([89,102,105,106,107,109,110,111,112,113,114,135,136,139,147,148,149,150,151,154,155,156,174,206,207,212,213,217,228,229,],[-9,-106,-114,-114,-103,145,-114,-114,-104,-114,-114,-113,-100,-97,-108,-111,-112,-109,-96,-93,-110,-107,-105,-98,-99,-94,-95,-114,-49,-102,]),'$end':([2,30,87,118,119,],[0,-1,-114,-6,-4,]),'FUNCTION':([8,10,11,12,15,23,33,34,35,41,79,251,260,261,],[-114,-7,-8,16,16,-114,-13,-114,-10,-12,-14,-114,-22,-29,]),'EQUAL_TO':([89,102,105,106,107,109,110,111,112,113,114,135,136,139,147,148,149,150,151,154,155,156,174,206,207,212,213,217,228,229,],[-9,-106,-114,-114,-103,141,-114,-114,-104,-114,-114,-113,-100,-97,-108,-111,-112,-109,-96,-93,-110,-107,-105,-98,-99,-94,-95,-114,-49,-102,]),'FOR':([53,63,64,66,67,69,71,75,76,77,86,166,177,187,194,235,236,239,250,253,257,259,262,263,264,268,269,271,],[68,-45,68,-44,-74,-43,-73,-41,-47,-46,-42,-48,-59,-60,-65,68,68,68,-114,-114,-66,-68,-75,-78,68,68,-79,-67,]),'VAL_CHAR':([82,94,95,96,104,117,120,121,130,133,137,138,141,142,145,146,152,153,161,162,172,173,175,176,178,179,180,181,182,183,195,220,232,],[111,111,111,111,111,111,-114,111,-114,-114,-114,-114,-114,-114,-114,-114,-114,-114,111,-101,111,111,111,111,111,111,111,111,111,111,111,111,111,]),'ELSE':([250,],[258,]),'WRITE':([53,63,64,66,67,69,71,75,76,77,86,166,177,187,194,235,236,239,250,253,257,259,262,263,264,268,269,271,],[72,-45,72,-44,-74,-43,-73,-41,-47,-46,-42,-48,-59,-60,-65,72,72,72,-114,-114,-66,-68,-75,-78,72,72,-79,-67,]),'>':([89,102,105,106,107,109,110,111,112,113,114,135,136,139,147,148,149,150,151,154,155,156,174,206,207,212,213,217,228,229,],[-9,-106,-114,-114,-103,146,-114,-114,-104,-114,-114,-113,-100,-97,-108,-111,-112,-109,-96,-93,-110,-107,-105,-98,-99,-94,-95,-114,-49,-102,]),'ID':([1,3,4,19,20,21,22,24,26,27,28,31,32,36,37,53,55,63,64,66,67,68,69,71,75,76,77,82,83,86,94,95,96,99,104,117,120,121,130,133,137,138,141,142,145,146,152,153,161,162,166,172,173,175,176,177,178,179,180,181,182,183,185,187,194,195,220,225,232,235,236,239,250,253,257,259,262,263,264,268,269,271,],[-114,5,-2,-114,-37,-38,-39,-40,-24,-23,-114,-17,40,42,-25,65,78,-45,65,-44,-74,93,-43,-73,-41,-47,-46,105,93,-42,105,105,105,129,105,105,-114,105,-114,-114,-114,-114,-114,-114,-114,-114,-114,-114,105,-101,-48,105,105,105,105,-59,105,105,105,105,105,105,93,-60,-65,105,105,237,105,65,65,65,-114,-114,-66,-68,-75,-78,65,65,-79,-67,]),'IF':([53,63,64,66,67,69,71,75,76,77,86,166,177,187,194,235,236,239,250,253,257,259,262,263,264,268,269,271,],[74,-45,74,-44,-74,-43,-73,-41,-47,-46,-42,-48,-59,-60,-65,74,74,74,-114,-114,-66,-68,-75,-78,74,74,-79,-67,]),'NOT_EQUAL_TO':([89,102,105,106,107,109,110,111,112,113,114,135,136,139,147,148,149,150,151,154,155,156,174,206,207,212,213,217,228,229,],[-9,-106,-114,-114,-103,142,-114,-114,-104,-114,-114,-113,-100,-97,-108,-111,-112,-109,-96,-93,-110,-107,-105,-98,-99,-94,-95,-114,-49,-102,]),'INT':([9,13,14,16,23,34,57,79,80,81,202,],[-114,-11,20,20,20,20,-114,-14,20,-30,20,]),'VAL_INT':([82,94,95,96,104,117,120,121,130,133,137,138,141,142,145,146,152,153,161,162,172,173,175,176,178,179,180,181,182,183,195,220,232,],[114,114,114,114,114,114,-114,114,-114,-114,-114,-114,-114,-114,-114,-114,-114,-114,114,-101,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'FLOAT':([9,13,14,16,23,34,57,79,80,81,202,],[-114,-11,21,21,21,21,-114,-14,21,-30,21,]),'BOOL':([9,13,14,16,23,34,57,79,80,81,202,],[-114,-11,24,24,24,24,-114,-14,24,-30,24,]),'VAL_FLOAT':([82,94,95,96,104,117,120,121,130,133,137,138,141,142,145,146,152,153,161,162,172,173,175,176,178,179,180,181,182,183,195,220,232,],[110,110,110,110,110,110,-114,110,-114,-114,-114,-114,-114,-114,-114,-114,-114,-114,110,-101,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'{':([10,11,23,33,34,35,41,48,79,169,200,222,223,224,227,249,255,256,258,265,266,],[-7,-8,-114,-13,-114,-10,-12,53,-14,-114,-114,235,236,-28,239,-114,264,-82,-114,-70,268,]),'MAIN':([8,10,11,12,15,17,18,23,25,33,34,35,41,79,251,260,261,],[-114,-7,-8,-114,-114,-21,29,-114,-20,-13,-114,-10,-12,-14,-114,-22,-29,]),'}':([53,62,63,64,66,67,69,70,71,75,76,77,86,88,166,177,187,194,235,236,239,244,245,247,250,253,257,259,262,263,264,267,268,269,270,271,],[-114,87,-45,-114,-44,-74,-43,-72,-73,-41,-47,-46,-42,-71,-48,-59,-60,-65,-114,-114,-114,250,251,253,-114,-114,-66,-68,-75,-78,-114,269,-114,-79,271,-67,]),'|':([89,102,103,105,106,107,109,110,111,112,113,114,135,136,139,143,144,147,148,149,150,151,154,155,156,174,206,207,208,209,210,211,212,213,217,228,229,],[-9,-106,133,-114,-114,-103,-114,-114,-114,-104,-114,-114,-113,-100,-97,-92,-87,-108,-111,-112,-109,-96,-93,-110,-107,-105,-98,-99,-90,-91,-88,-89,-94,-95,-114,-49,-102,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'func_definicion':([12,15,],[15,15,]),'np_save_curr_func_quad':([200,],[223,]),'constant':([82,94,95,96,104,117,121,161,172,173,175,176,178,179,180,181,182,183,195,220,232,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,]),'super_exp_1':([109,],[144,]),'np_start_dirfunc':([5,],[6,]),'np_single_var_process':([65,93,105,],[89,89,89,]),'np_prep_func_params':([57,],[80,]),'np_decision_1':([167,],[198,]),'var_opcional':([8,169,],[12,200,]),'func_parametro':([80,],[98,]),'np_func_tipo_retorno':([28,],[36,]),'np_set_curr_var_name':([40,78,],[45,97,]),'func_llamada':([53,64,82,94,95,96,104,117,121,161,172,173,175,176,178,179,180,181,182,183,195,220,232,235,236,239,264,268,],[61,61,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,61,61,61,61,61,]),'np_add_to_func_dir':([47,],[52,]),'np_kill_func':([251,],[260,]),'loop_estatuto':([53,64,235,236,239,264,268,],[62,88,244,245,247,267,270,]),'variable_loop':([83,],[116,]),'np_var_prep':([9,],[14,]),'argumento_loop':([161,],[189,]),'np_add_var_to_varstable':([45,97,],[49,127,]),'term_1':([106,],[139,]),'np_add_param':([129,237,],[171,246,]),'hyper_exp_loop':([94,],[123,]),'tipo':([14,16,23,34,80,202,],[19,27,19,19,99,225,]),'np_pop_operator_stack':([217,],[228,]),'func_return':([53,64,235,236,239,264,268,],[76,76,76,76,76,76,76,]),'np_push_const_float':([110,],[147,]),'decision':([53,64,235,236,239,264,268,],[63,63,63,63,63,63,63,]),'estatuto':([53,64,235,236,239,264,268,],[64,64,64,64,64,64,64,]),'var_declaracion':([8,169,],[10,10,]),'np_fin_total':([87,],[119,]),'write':([53,64,235,236,239,264,268,],[66,66,66,66,66,66,66,]),'parametro':([80,],[100,]),'loop_var_declaracion':([23,34,],[35,41,]),'factor':([82,94,95,96,104,117,121,161,172,173,175,176,178,179,180,181,182,183,195,220,232,],[106,106,106,106,106,106,106,106,106,106,206,207,106,106,106,106,106,106,106,106,106,]),'loop_parametro':([171,246,],[203,252,]),'np_fc_2':([190,240,],[219,248,]),'variable_loop_1':([157,226,],[184,238,]),'main':([18,],[30,]),'loop_var_decl_mismo_tipo':([49,127,],[56,168,]),'decision_else':([250,],[257,]),'argumento_loop_1':([219,248,],[231,254,]),'np_cond_1':([60,],[84,]),'hyper_exp':([82,94,95,96,104,117,121,161,195,220,232,],[108,124,125,126,134,160,163,190,221,233,240,]),'np_push_const_int':([114,],[156,]),'read':([53,64,235,236,239,264,268,],[69,69,69,69,69,69,69,]),'epsilon':([1,5,8,9,12,15,19,23,28,29,34,40,42,45,47,49,53,57,60,64,65,78,80,87,93,97,103,105,106,109,110,111,113,114,115,120,124,127,129,130,133,137,138,141,142,145,146,152,153,157,161,163,165,167,169,171,188,190,200,214,217,219,221,226,233,234,235,236,237,239,240,246,248,249,250,251,253,258,264,268,],[4,7,11,13,17,17,31,33,37,39,33,44,46,50,51,54,70,81,85,70,90,44,101,118,122,50,131,135,136,143,148,149,151,155,158,162,158,54,170,162,162,162,162,162,162,162,162,162,162,186,191,193,196,199,11,201,216,218,224,158,229,230,158,186,242,196,70,70,170,70,218,201,230,256,259,261,263,265,70,70,]),'condicional':([53,64,235,236,239,264,268,],[71,71,71,71,71,71,71,]),'np_fc_1':([65,105,],[91,91,]),'np_cond_3':([253,],[262,]),'np_decision_2':([258,],[266,]),'np_for_3':([249,],[255,]),'np_add_to_input_counter':([115,124,214,221,],[157,165,226,234,]),'var_declaracion_mismo_tipo':([14,23,34,],[23,34,34,]),'np_cond_2':([188,],[215,]),'variable':([53,64,68,82,83,94,95,96,104,117,121,161,172,173,175,176,178,179,180,181,182,183,185,195,220,232,235,236,239,264,268,],[73,73,92,112,115,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,214,112,112,112,73,73,73,73,73,]),'np_set_curr_var_type':([19,],[32,]),'np_push_const_char':([111,],[150,]),'no_condicional':([53,64,235,236,239,264,268,],[67,67,67,67,67,67,67,]),'np_prep_main':([29,],[38,]),'term':([82,94,95,96,104,117,121,161,172,173,178,179,180,181,182,183,195,220,232,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,212,213,113,113,113,]),'np_push_operator_stack':([120,130,133,137,138,141,142,145,146,152,153,],[161,172,173,175,176,178,179,180,181,182,183,]),'func_tipo_retorno':([16,],[28,]),'asignacion':([53,64,235,236,239,264,268,],[75,75,75,75,75,75,75,]),'np_for_2':([233,],[241,]),'np_program_start':([1,],[3,]),'super_exp':([82,94,95,96,104,117,121,161,172,173,195,220,232,],[103,103,103,103,103,103,103,103,204,205,103,103,103,]),'np_for_1':([163,],[192,]),'exp_1':([113,],[154,]),'programa':([0,],[2,]),'exp':([82,94,95,96,104,117,121,161,172,173,178,179,180,181,195,220,232,],[109,109,109,109,109,109,109,109,109,109,208,209,210,211,109,109,109,]),'func_programa_loop':([12,15,],[18,25,]),'hyper_exp_1':([103,],[132,]),'repeticion':([53,64,235,236,239,264,268,],[77,77,77,77,77,77,77,]),'hyper_exp_loop_1':([165,234,],[197,243,]),'np_func_id':([42,],[47,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM np_program_start ID np_start_dirfunc ; var_opcional func_programa_loop main','programa',8,'p_programa','a_parser.py',43),
  ('np_program_start -> epsilon','np_program_start',1,'p_np_program_start','a_parser.py',48),
  ('np_start_dirfunc -> epsilon','np_start_dirfunc',1,'p_np_start_dirfunc','a_parser.py',68),
  ('main -> MAIN np_prep_main ( ) { loop_estatuto } np_fin_total','main',8,'p_main','a_parser.py',83),
  ('np_prep_main -> epsilon','np_prep_main',1,'p_np_prep_main','a_parser.py',87),
  ('np_fin_total -> epsilon','np_fin_total',1,'p_np_fin_total','a_parser.py',101),
  ('var_opcional -> var_declaracion','var_opcional',1,'p_var_opcional','a_parser.py',129),
  ('var_opcional -> epsilon','var_opcional',1,'p_var_opcional','a_parser.py',130),
  ('variable -> ID np_single_var_process','variable',2,'p_variable','a_parser.py',139),
  ('var_declaracion -> VARS np_var_prep var_declaracion_mismo_tipo loop_var_declaracion','var_declaracion',4,'p_var_declaracion','a_parser.py',149),
  ('np_var_prep -> epsilon','np_var_prep',1,'p_np_var_prep','a_parser.py',155),
  ('loop_var_declaracion -> var_declaracion_mismo_tipo loop_var_declaracion','loop_var_declaracion',2,'p_loop_var_declaracion','a_parser.py',169),
  ('loop_var_declaracion -> epsilon','loop_var_declaracion',1,'p_loop_var_declaracion','a_parser.py',170),
  ('var_declaracion_mismo_tipo -> tipo np_set_curr_var_type ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo ;','var_declaracion_mismo_tipo',7,'p_var_declaracion_mismo_tipo','a_parser.py',176),
  ('loop_var_decl_mismo_tipo -> , ID np_set_curr_var_name np_add_var_to_varstable loop_var_decl_mismo_tipo','loop_var_decl_mismo_tipo',5,'p_loop_var_decl_mismo_tipo','a_parser.py',183),
  ('loop_var_decl_mismo_tipo -> epsilon','loop_var_decl_mismo_tipo',1,'p_loop_var_decl_mismo_tipo','a_parser.py',184),
  ('np_set_curr_var_type -> epsilon','np_set_curr_var_type',1,'p_np_set_curr_var_type','a_parser.py',190),
  ('np_set_curr_var_name -> epsilon','np_set_curr_var_name',1,'p_np_set_curr_var_name','a_parser.py',199),
  ('np_add_var_to_varstable -> epsilon','np_add_var_to_varstable',1,'p_np_add_var_to_varstable','a_parser.py',207),
  ('func_programa_loop -> func_definicion func_programa_loop','func_programa_loop',2,'p_func_programa_loop','a_parser.py',223),
  ('func_programa_loop -> epsilon','func_programa_loop',1,'p_func_programa_loop','a_parser.py',224),
  ('func_definicion -> FUNCTION func_tipo_retorno np_func_tipo_retorno ID np_func_id np_add_to_func_dir ( np_prep_func_params func_parametro ) ; var_opcional np_save_curr_func_quad { loop_estatuto } np_kill_func','func_definicion',17,'p_func_definicion','a_parser.py',230),
  ('func_tipo_retorno -> tipo','func_tipo_retorno',1,'p_func_tipo_retorno','a_parser.py',238),
  ('func_tipo_retorno -> VOID','func_tipo_retorno',1,'p_func_tipo_retorno','a_parser.py',239),
  ('np_func_tipo_retorno -> epsilon','np_func_tipo_retorno',1,'p_np_func_tipo_retorno','a_parser.py',245),
  ('np_func_id -> epsilon','np_func_id',1,'p_np_func_id','a_parser.py',253),
  ('np_add_to_func_dir -> epsilon','np_add_to_func_dir',1,'p_np_add_to_func_dir','a_parser.py',261),
  ('np_save_curr_func_quad -> epsilon','np_save_curr_func_quad',1,'p_np_save_curr_func_quad','a_parser.py',280),
  ('np_kill_func -> epsilon','np_kill_func',1,'p_np_kill_func','a_parser.py',288),
  ('np_prep_func_params -> epsilon','np_prep_func_params',1,'p_np_prep_func_params','a_parser.py',294),
  ('func_parametro -> parametro','func_parametro',1,'p_func_parametro','a_parser.py',304),
  ('func_parametro -> epsilon','func_parametro',1,'p_func_parametro','a_parser.py',305),
  ('parametro -> tipo ID np_add_param loop_parametro','parametro',4,'p_parametro','a_parser.py',314),
  ('loop_parametro -> , tipo ID np_add_param loop_parametro','loop_parametro',5,'p_loop_parametro','a_parser.py',321),
  ('loop_parametro -> epsilon','loop_parametro',1,'p_loop_parametro','a_parser.py',322),
  ('np_add_param -> epsilon','np_add_param',1,'p_np_add_param','a_parser.py',327),
  ('tipo -> INT','tipo',1,'p_tipo','a_parser.py',336),
  ('tipo -> FLOAT','tipo',1,'p_tipo','a_parser.py',337),
  ('tipo -> CHAR','tipo',1,'p_tipo','a_parser.py',338),
  ('tipo -> BOOL','tipo',1,'p_tipo','a_parser.py',339),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto','a_parser.py',375),
  ('estatuto -> func_llamada ;','estatuto',2,'p_estatuto','a_parser.py',376),
  ('estatuto -> read','estatuto',1,'p_estatuto','a_parser.py',377),
  ('estatuto -> write','estatuto',1,'p_estatuto','a_parser.py',378),
  ('estatuto -> decision','estatuto',1,'p_estatuto','a_parser.py',379),
  ('estatuto -> repeticion','estatuto',1,'p_estatuto','a_parser.py',380),
  ('estatuto -> func_return','estatuto',1,'p_estatuto','a_parser.py',381),
  ('asignacion -> variable = hyper_exp ;','asignacion',4,'p_asignacion','a_parser.py',389),
  ('func_llamada -> ID np_fc_1 ( np_push_operator_stack argumento_loop ) np_pop_operator_stack','func_llamada',7,'p_func_llamada','a_parser.py',403),
  ('np_fc_1 -> epsilon','np_fc_1',1,'p_np_fc_1','a_parser.py',430),
  ('argumento_loop -> hyper_exp np_fc_2 argumento_loop_1','argumento_loop',3,'p_argumento_loop','a_parser.py',448),
  ('argumento_loop -> epsilon','argumento_loop',1,'p_argumento_loop','a_parser.py',449),
  ('argumento_loop_1 -> , hyper_exp np_fc_2 argumento_loop_1','argumento_loop_1',4,'p_argumento_loop_1','a_parser.py',453),
  ('argumento_loop_1 -> epsilon','argumento_loop_1',1,'p_argumento_loop_1','a_parser.py',454),
  ('hyper_exp_loop -> hyper_exp np_add_to_input_counter hyper_exp_loop_1','hyper_exp_loop',3,'p_hyper_exp_loop','a_parser.py',460),
  ('hyper_exp_loop_1 -> , hyper_exp np_add_to_input_counter hyper_exp_loop_1','hyper_exp_loop_1',4,'p_hyper_exp_loop_1','a_parser.py',466),
  ('hyper_exp_loop_1 -> epsilon','hyper_exp_loop_1',1,'p_hyper_exp_loop_1','a_parser.py',467),
  ('np_fc_2 -> epsilon','np_fc_2',1,'p_np_fc_2','a_parser.py',472),
  ('func_return -> RETURN ( hyper_exp ) ;','func_return',5,'p_func_return','a_parser.py',498),
  ('read -> READ ( variable_loop ) ;','read',5,'p_read','a_parser.py',510),
  ('variable_loop -> variable np_add_to_input_counter variable_loop_1','variable_loop',3,'p_variable_loop','a_parser.py',523),
  ('variable_loop_1 -> , variable np_add_to_input_counter variable_loop_1','variable_loop_1',4,'p_variable_loop_1','a_parser.py',530),
  ('variable_loop_1 -> epsilon','variable_loop_1',1,'p_variable_loop_1','a_parser.py',531),
  ('np_add_to_input_counter -> epsilon','np_add_to_input_counter',1,'p_np_add_to_input_counter','a_parser.py',540),
  ('write -> WRITE ( hyper_exp_loop ) ;','write',5,'p_write','a_parser.py',549),
  ('decision -> IF ( hyper_exp ) np_decision_1 THEN { loop_estatuto } decision_else','decision',10,'p_decision','a_parser.py',562),
  ('decision_else -> ELSE np_decision_2 { loop_estatuto }','decision_else',5,'p_decision_else','a_parser.py',572),
  ('decision_else -> epsilon','decision_else',1,'p_decision_else','a_parser.py',573),
  ('np_decision_1 -> epsilon','np_decision_1',1,'p_np_decision_1','a_parser.py',578),
  ('np_decision_2 -> epsilon','np_decision_2',1,'p_np_decision_2','a_parser.py',591),
  ('loop_estatuto -> estatuto loop_estatuto','loop_estatuto',2,'p_loop_estatuto','a_parser.py',608),
  ('loop_estatuto -> epsilon','loop_estatuto',1,'p_loop_estatuto','a_parser.py',609),
  ('repeticion -> condicional','repeticion',1,'p_repeticion','a_parser.py',619),
  ('repeticion -> no_condicional','repeticion',1,'p_repeticion','a_parser.py',620),
  ('condicional -> WHILE np_cond_1 ( hyper_exp ) np_cond_2 DO { loop_estatuto } np_cond_3','condicional',11,'p_condicional','a_parser.py',626),
  ('np_cond_1 -> epsilon','np_cond_1',1,'p_np_cond_1','a_parser.py',631),
  ('np_cond_2 -> epsilon','np_cond_2',1,'p_np_cond_2','a_parser.py',639),
  ('np_cond_3 -> epsilon','np_cond_3',1,'p_np_cond_3','a_parser.py',653),
  ('no_condicional -> FOR variable = hyper_exp np_for_1 TO hyper_exp np_for_2 DO np_for_3 { loop_estatuto }','no_condicional',13,'p_no_condicional','a_parser.py',670),
  ('np_for_1 -> epsilon','np_for_1',1,'p_np_for_1','a_parser.py',687),
  ('np_for_2 -> epsilon','np_for_2',1,'p_np_for_2','a_parser.py',702),
  ('np_for_3 -> epsilon','np_for_3',1,'p_np_for_3','a_parser.py',715),
  ('hyper_exp -> super_exp hyper_exp_1','hyper_exp',2,'p_hyper_exp','a_parser.py',737),
  ('hyper_exp_1 -> & np_push_operator_stack super_exp','hyper_exp_1',3,'p_hyper_exp_1','a_parser.py',763),
  ('hyper_exp_1 -> | np_push_operator_stack super_exp','hyper_exp_1',3,'p_hyper_exp_1','a_parser.py',764),
  ('hyper_exp_1 -> epsilon','hyper_exp_1',1,'p_hyper_exp_1','a_parser.py',765),
  ('super_exp -> exp super_exp_1','super_exp',2,'p_super_exp','a_parser.py',771),
  ('super_exp_1 -> < np_push_operator_stack exp','super_exp_1',3,'p_super_exp_1','a_parser.py',796),
  ('super_exp_1 -> > np_push_operator_stack exp','super_exp_1',3,'p_super_exp_1','a_parser.py',797),
  ('super_exp_1 -> EQUAL_TO np_push_operator_stack exp','super_exp_1',3,'p_super_exp_1','a_parser.py',798),
  ('super_exp_1 -> NOT_EQUAL_TO np_push_operator_stack exp','super_exp_1',3,'p_super_exp_1','a_parser.py',799),
  ('super_exp_1 -> epsilon','super_exp_1',1,'p_super_exp_1','a_parser.py',800),
  ('exp -> term exp_1','exp',2,'p_exp','a_parser.py',806),
  ('exp_1 -> + np_push_operator_stack term','exp_1',3,'p_exp_1','a_parser.py',831),
  ('exp_1 -> - np_push_operator_stack term','exp_1',3,'p_exp_1','a_parser.py',832),
  ('exp_1 -> epsilon','exp_1',1,'p_exp_1','a_parser.py',833),
  ('term -> factor term_1','term',2,'p_term','a_parser.py',839),
  ('term_1 -> * np_push_operator_stack factor','term_1',3,'p_term_1','a_parser.py',863),
  ('term_1 -> / np_push_operator_stack factor','term_1',3,'p_term_1','a_parser.py',864),
  ('term_1 -> epsilon','term_1',1,'p_term_1','a_parser.py',865),
  ('np_push_operator_stack -> epsilon','np_push_operator_stack',1,'p_np_push_operator_stack','a_parser.py',871),
  ('np_pop_operator_stack -> epsilon','np_pop_operator_stack',1,'p_np_pop_operator_stack','a_parser.py',879),
  ('factor -> constant','factor',1,'p_factor','a_parser.py',900),
  ('factor -> variable','factor',1,'p_factor','a_parser.py',901),
  ('factor -> ( hyper_exp )','factor',3,'p_factor','a_parser.py',902),
  ('factor -> func_llamada','factor',1,'p_factor','a_parser.py',903),
  ('constant -> VAL_INT np_push_const_int','constant',2,'p_constant','a_parser.py',914),
  ('constant -> VAL_FLOAT np_push_const_float','constant',2,'p_constant','a_parser.py',915),
  ('constant -> VAL_CHAR np_push_const_char','constant',2,'p_constant','a_parser.py',916),
  ('np_push_const_int -> epsilon','np_push_const_int',1,'p_np_push_const_int','a_parser.py',922),
  ('np_push_const_float -> epsilon','np_push_const_float',1,'p_np_push_const_float','a_parser.py',930),
  ('np_push_const_char -> epsilon','np_push_const_char',1,'p_np_push_const_char','a_parser.py',938),
  ('np_single_var_process -> epsilon','np_single_var_process',1,'p_np_single_var_process','a_parser.py',946),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','a_parser.py',955),
]
